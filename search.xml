<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于博客迁移的几点教训]]></title>
    <url>%2Flife%2Fblog%2F</url>
    <content type="text"><![CDATA[一直以来都有记笔记的习惯, 记录生活点滴、技术感想. 从最初的博客园, 简书, 知乎, 再到个人博客站点, 一路走来, 颇有感触. 个人博客迁移痛点 历史遗留博客无备份. 历史博客没有备份, 一直是个痛点, 工作忙是个借口, 但主要原因在于个人主观臆断, 想当然地认为只要谷歌, 百度还在, 找篇博文应该不是什么难事. 博客分散. 国内各大主流博客网站, 基本扒过, 留下过”拙文”, 有些印象颇深, 有些至今无感. 在国内各大主流博客网站上同步自己的”拙文”, 也是一项”技术活”, 不巧遇上很”不幸的”事儿(如某篇冷门博文被人转载, 个人转发反被骂), 想想也是心累. 从个人博文, 到公共资产、大众共享, 跨度其实还是挺大的, 难免有心理落差. 缺乏系统梳理. 记得刚开始在博客园写博客时, “Too Young, Too Navie”, 难免产生从众心理, 看到比自己写得好的博文, 疯狂转发、”点赞”. 然后对于自己要写的博文果断弃笔, 跑到其它站点考虑下一话题. 由于历史遗留博客缺乏系统梳理, 至今不得不面临”历史博客”迁移困难的尴尬局面. 博客建站历程2016年开始系统博客建站, 建站至今, 经历过VPS停用(忘记续费), 博客站点”长草”, “荒芜”, 到现在重新梳理. 历程参考如下: 2016 - 2018, 经好友推荐, 站点托管于Linode. 博客比较随意, 主要用于科学上网. 2018 - 2019, 站点迁移至Vultr, 没别的, 主要在于想试下其它的VPS供应商, 毕竟试用无法准确评估VPS实际服务质量. (好吧, 其实是Linode忘了续费). 该阶段博客站点开始”长草”, “荒芜”. 2019 - 至今, 开始重新整理博客, 站点迁移 Digital Ocean -&gt; Liquid Web . 个人比较推荐Vultr和Liquid Web, 两者对新用户均有优惠, 比如新用户注册Vultr可获取100美金新人礼. Vultr比较稳定, 个人VPS使用期间, 从未出现过宕机情况. 域名购买推荐Namesilo, 他家域名比较公道, 也比较实惠. 推荐一款个人使用过的CDN, 速度很快, 免备案. 尽管有自己的站点, 但比较致命的是由于没有及时查看邮件通知, Linode忘记续费, 数据毫无备份, 之前写的博客, 全是泪. 别问我本地数据备份, 换了电脑, 更新系统, 有种”大海捞针”的既视感. 与时俱进, 紧跟迭代进行博客迁移时, 有时不得不面临着技术迭代层面的考量. 新技术层出不穷、迭代速度”日新月异”. 历史遗留博客中, 当时看起来可能比较”新颖”的技术, 现在已俨然过时. 举个简单例子, 以下是一段可以正常运行的代码12345678910111213141516171819202122232425import scala.actors._import Actor._val caller = selfval accumulator = actor &#123; var continue = true var sum = 0 loopWhile(continue) &#123; reactWithin(500) &#123; case number: Int =&gt; sum += number case TIMEOUT =&gt; continue = false caller ! sum &#125; &#125;&#125;accumulator ! 1accumulator ! 15receiveWithin(1000) &#123; case result =&gt; println(s"Total is $result")&#125; 如果你使用的Scala版本在2.11及以下, 上面这段代码可以正常运行, 没什么问题. 但如果你安装的是Scala 2.12, 这段代码无法正常通过编译, 原因在于Scala 2.12标准库中正式移除了scala-actors包, 而2.11及以下版本并无影响, Scala 2.12版本需要增加Akka Actor依赖才能正常使用Actor. 关于Scala 2.12.X 正式移除scala-actors包, 个人看法有两点: 一是EPFL为了减轻维护工作量, Scala Actor后期维护工作自然落在了Lightbend Akka团队; 二是马丁老爷子(马丁·奥德斯基, Scala之”父”)试图尽量统一Scala中Actor生态、减少分化, 毕竟除了Akka Actor、还有Scalaz Actor、Lift Actor等. 个人看法, 仅供参考. 实际上, 上面这段代码还存在一个问题, 闭包使用太频繁, 如使用actor闭包方法隐式实例化Actor, Akka官方推荐使用OOP(面向对象)方式显示实例化Actor. 上面这段代码, 在早些年很常见, 特别是当你开始使用Scala 2.9 进行Hacking时. 以上仅是一个小例子, 实际上个人历史遗留博客中有很大一部分博文, 由于技术迭代频繁之故, 已经不能看了, 比如曾经写过的Akka学习笔记, 使用了好多过时的API. 再比如当年Apache Mahout分布式机器学习笔记, 现在要迁移依然存在困难, 主要原因有以下两点: Apache Mahout PMC于2014年决定使用Scala作为Mahout内核源码主要开发语言(之前是Java), 并全面拥抱Apache Spark和Flink作为Mahout后端计算引擎 Apache Mahout自身一些API迭代原因 以上这几点, 意味着之前花了很多时间梳理的Mahout与Hadoop计算引擎MapReduce关系的源码解读笔记, 现在看来几乎没有什么意义, 完全没有迁移必要 (再者笔记中很多Mahout Java源码有些过时). 由于以上几点原因, 个人历史遗留博客, 能迁移的占少数, 特别是2015年以前的博文, 几乎”全军覆没”. 忙完工作, 以后有时间再整理、迁移能看的部分吧. 活在当下, 欢迎交流 !]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微服务内部进程通信之gRPC篇]]></title>
    <url>%2Fmicrosrvc%2Fgrpc%2F</url>
    <content type="text"><![CDATA[微服务内部进程通信方式, 常用的有以下几种, 限于篇幅, 本文仅讨论gRPC. REST gRPC Events (或基于异步事件消息) gRPC概述gRPC是一个开源框架, 最初是由谷歌开发, 通过网络进行通用远程过程调用. gRPC与HTTP 2语义对齐, 且允许全双工流式传输. 支持不同的传输格式,如Protobuf(默认),JSON,XML,Thrift等,Protobuf在性能方面远高于其他格式. gRPC是一个分层架构,具有以下几层： Stub层: Stub层位于最顶层, Stub层从IDL(接口定义语言)定义的文件生成, 通常IDL文件包含具有服务、方法和消息的接口. 默认使用如Protobuf,但也可以使用其他IDL,如messagepack. 客户端通过Stub层调用服务端. Channel(通道)层: 通道层是一个中间层, 提供Stub层使用的应用程序二进制接口(ABI). Transport(传输)层: 最底层,使用HTTP 2协议, gRPC在同一网络中提供全双工通信及多路并行调用. gRPC特征gRPC结合了REST和RPC(远程过程调用)优点, 非常适合在分布式网络中进行API通信, 其特征如下： 低延迟, 可拓展, 为分布式系统而生 分层设计, 可轻松集成到应用层, 在流控制方面具有很好的交互性 支持负载平衡和故障转移 通信应用广泛, 从移动应用程序到服务端、从Web应用程序到服务端以及从客户端应用程序到不同节点服务器等 支持取消级联调用 gRPC优点 跨语言、跨平台, 支持多种主流语言, 如C++、Java、Golang、Scala、Kotlin、Swift等 高效, 由于采用HTTP 2和二进制消息进行通信, gRPC非常快, 吞吐量大. 将数据流式传输到客户端的功能很不错, 从移动的角度来看, 客户端只需与服务端保持单一连接, 服务端便可将数据更新推送给客户端 安全, gRPC支持TLS加密、身份验证及请求验证 可拓展, 可以编写自定义插件 可维护性佳, 更新gRPC非常容易, 如谷歌投入了大量工作保证Protobuf v3规范向下兼容v2 开源, 可以查看并修改源码 代码生成, 如使用Protobuf作为IDL文件定义服务接口时, 可进行代码生成, 开发人员只需关注业务逻辑即可 gRPC与REST对比gRPC和REST均使用了HTTP 1.1和HTTP 2规范, gRPC还支持全双工流式通信. 通常, REST可以通过Query、路径参数以及请求主体, 传递有效负载, 这意味请求数据有不同来源, 且对不同来源的数据解析(Query,路径及请求主体)增加了时延, 加剧了复杂性. gRPC在使用静态路径时比REST性能更佳. REST调用错误取决于HTTP状态代码, 而gRPC有对应规范标准, 以适用于API. REST API完全基于HTTP, 有不同的方式实现API. 除了DELETE方法外, REST还允许开发人员使用其它HTTP方法删除资源. HTTP提供了灵活性, 但有严格的验证标准与约定. gRPC可用于处理负载平衡、故障转移及调用取消等, 但REST更加成熟, 运用广泛. REST和gRPC各有优缺点, 对比如下: REST gRPC 基于HTTP 基于HTTP语义及RPC 非CS(服务端/客户端)协议 基于CS协议(服务端/客户端) 使用HTTP术语, 如request 使用RPC语义, 如call gRPC代码实战gRPC实现步骤gRPC主要实现步骤如下： 定义服务接口, 包括各种方法签名(如参数和返回类型设计等) 在服务端实现服务接口, 并允许远程调用 生成服务接口Stub, 并在客户端应用中使用 客户端应用调用Stub, 即调用本地对象, 然后Stub与gRPC服务端进行通信, 将返回值传给gRPC客户端, 如下图所示(gRPC跨语言, 图中仅以Java和C++为例): 在此期间, 客户端应用只需进行本地对象(Stub)调用并获取回复, 服务端可位于不同节点. 这使得编写分布式服务变得简单, gRPC也是微服务进行内部进程通信的理想方式之一. gRPC跨语言,意味着可以使用不同语言编写服务端服务与客户端应用, 开发灵活. 进行gRPC服务设计时, 代码实现步骤, 参考如下： 使用IDL(接口定义语言)文件(若使用Protobuf, 则为.proto文件)定义服务接口 实现步骤1中定义的服务接口 创建gRPC Server并注册服务 创建gRPC Client及Stub gRPC编码实战本文将以Golang和Protobuf为例, 实现一个简单的gRPC通信应用. 首先编写IDL文件, 定义具体服务接口, 本例定义一个简单的ZBonjour服务, 当服务端收到客户端Request请求时, 回复Response消息.123456789101112131415syntax = "proto3";package xavier.grpc;message Request &#123; string name = 1;&#125;message Response &#123; string msg = 1;&#125;service ZBonjour &#123; rpc Hello(Request) returns (Response) &#123;&#125;&#125; 可以使用ptotoc工具对Protobuf进行代码生成, 参考指令如下:1protoc -I ./proto ./proto/zbonjour.proto --go_out=plugins=grpc:./proto 生成的Golang代码, 示意如下, 完整代码请参考这里 服务端核心代码: 123456789101112131415161718192021// 对应Protobuf代码生成的ZBonjourServer接口type zBonjourServer struct&#123;&#125;// 服务端 Handlerfunc (k *zBonjourServer) Hello(ctx context.Context, request *proto.Request) (*proto.Response, error) &#123; response := &amp;proto.Response&#123;&#125; response.Msg = fmt.Sprintf("Request received from %v", request.Name) fmt.Println(response.Msg) return response, nil&#125;lis, err := net.Listen("tcp", fmt.Sprintf(":%d", 9000))if err != nil &#123; log.Fatalf("failed to listen: %v", err)&#125;fmt.Println("Receiving Requests.......")// 实例化服务端grpcServer := grpc.NewServer()proto.RegisterZBonjourServer(grpcServer, &amp;zBonjourServer&#123;&#125;)grpcServer.Serve(lis) 客户端核心代码123456789101112131415conn, err := grpc.Dial("127.0.0.1:9000", grpc.WithInsecure())if err != nil &#123; log.Fatal("Unable to create connection to server: ", err)&#125;// 实例化客户端client := proto.NewZBonjourClient(conn)response, err := client.Hello(context.Background(), &amp;proto.Request&#123;Name: "Xavier.IO"&#125;)if err != nil &#123; log.Fatal("Error calling service: ", err)&#125;fmt.Println("Sending a request...")// 客户端连接建立后, 进行具体客户端应用请求, 主要逻辑代码略 效果如下, 详细代码, 请参考这里.]]></content>
      <categories>
        <category>Distributed System</category>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Microservices</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫谈Golang软件架构 (二) -- API构建]]></title>
    <url>%2Fgo%2Fapi-build%2F</url>
    <content type="text"><![CDATA[Golang软件架构漫谈之API设计篇, 本文将对API设计相关问题进行细述. 服务通常很少孤立运作, 一般通过网络交互, 通常使用标准化协议在特定端点进行数据交换, 通信方式有以下两种： 通过API(应用程序编程接口)进行通信, API作为一种请求/响应模型, 通常使用如HTTP等其它网络协议 通过消息传递进行通信, 服务通过交换消息的方式进行数据交换 本文主要侧重API相关设计, 关于消息传递后续博文会详细阐述. 数据序列化常见的数据序列化格式有以下几种: XML JSON Protobuf 不同的序列化格式在对象序列化/反序列化方面具有不同的特性, 对系统整体性能产生重大影响、尤其是在微服务架构中.单个用户请求可能由多个服务处理.这些服务使用序列化(反序列化)对象、通过API或消息传递进行通信. 通常.可从Schema文件(如Protobuf)进行代码生成的序列化格式比通用序列化格式(如JSON)性能更佳.后者需使用反射来确定对象结构(如字段和类型等). 当然, 这些序列化格式(Protobuf等)在调试方面有些不太方便, 如不能通过简单的curl请求读取数据, 需使要反序列化器或解码器进行解码. 路由与端点 进行网络通信时必须定义一组数据交换规则, 这些规则通常通过协议标准化并进行分层—即经典的”五层”(或七层, 在五层基础上将应用层细分为应用层、表示层和会话层)网络协议, 如上图所示 多数API通过TCP协议进行网络通信, 通常在进行数据交换前, 客户端需与服务端建立连接. 建立连接前, 客户端需要知道以下内容: 托管服务的主机IP 服务监听端口 应用层细节, 如应用层特定端点(如HTTP中URL)、数据协议(如数据序列化格式、数据内容)等 服务端服务发现服务部署在集群中, 而客户端通常不会、也不关心哪个特定实例提供服务.在服务端服务发现架构中, 负载均衡器接收请求并将其路由到合适的服务实例, 如下图所示: 通常, 负载均衡器具有一组虚拟IP地址(VIP), 对应每项服务, 存在对应该虚拟IP后端实例的静态列表, 负载均衡器将来自客户端的请求多路复用到后端实例集上, 即使列表是静态的, 依然存在各种机制支持自动化配置更新, 如实例开闭等.经典的负载均衡器, 如Nginx, Nginx高性能、可扩展. Nginx包含一组有限的worker进程(通常一个CPU内核对应一woker进程), 通过使用非阻塞、事件驱动IO(如epoll和kqueue)路由请求, Nginx Woker进程体系架构如下: 后端实例的NGINX配置是静态的, 但可以使用辅助组件(如Consul Template)进行动态配置, 通常这些解决方案会对新生实例或死亡实例进行事件监视, 重写NGINX配置文件或正常重启NGINX进程. 进行服务连接时, 客户端请求的URL通过域名服务(DNS)转换为服务端虚拟IP, 然后客户端使用该虚拟IP及端口初始化连接. 负载均衡器通常还具有健康检测特性, 以便找出健康状况良好的后端实例集, 未定期Check-in的实例被判断为unhealthy, 并从后端实例集中移除. 服务端服务发现, 优点如下: 客户端不需要了解服务实例 高可用、容错 缺点在于: 负载均衡器存在单点故障, 需准备备用服务器 客户端无法选择特定服务实例 客户端服务发现客户端服务发现, 客户端检测可用服务实例对应端点, 然后路由请求, 客户端查询服务注册表, 然后将请求路由最佳服务实例, 可以使用Round-Robin算法.每个服务实例在启动时连接到服务注册表, 通过定期使用注册表更新其健康状况, 该架构参考如下 Netflix Eureka可用于服务注册与发现, Netflix Ribbon是一个用Java编写的IPC客户端, 可与Eureka一起结合使用进行负载均衡, 非Java程序可以使用REST API与Eureka进行交互. Golang可以通过fargo包, 向Eureka进行服务注册, 通过心跳信息进行实例健康状况检查. 连接到Eureka并获取应用实例列表, 代码参考如下: 123c = fargo.NewConn("http://127.0.0.1:8080/eureka/v2")// 返回一个 map[String]fargo.Applicationc.GetApps() Consul也可用于服务发现, 通过Service Catalog方式组织服务, 并在此基础上提供DNS和HTTP API接口, Consul监视已注册的服务实例并管理一系列状况良好的服务集, 具体请参考Consul官方文档. REST服务使用Golang标准库自带的net/http包可以很方便地构建Web服务, 如下:123456789101112131415161718192021222324252627package mainimport ( "fmt" "log" "net/http" ) func main() &#123; // 设置 Router http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) &#123; log.Println("path", r.URL.Path) fmt.Fprintf(w, "pong! on %sn", r.URL.Path) &#125;) // 监听服务. 其中`ListenAndServe()` 方法: // 1. 实例化 Http Server // 2. 调用 `net.Listen(tcp, addr)` 方法监听指定端口(本例9090端口) // 3. 开启循环并接收循环主体中请求 // 4. 为每一个请求开启一个Go协程 // 5. 读取请求数据 // 6. 搜寻URL句柄(Handler)并执行代码 err:= http.ListenAndServe(":9090", nil) if err != nil &#123; log.Fatal("ListenAndServe: ", err) &#125; &#125; Go Web应用中, 通常每一个请求对应后端一个独立Go协程, 提高了资源利用率及拓展性, 如下图所示: Golang构建REST服务, 相对简单, 如下图所示: GraphQLREST API使用简单、应用广泛, 但对于快节奏的Web开发而言,繁杂、不灵活的Endpoint和Schema可能会严重降低开发效率; 此外,REST效率较低, 特别是只需获取部分服务数据时. 如开发一个酒店搜索相关的移动应用程序, 并不希望页面展示酒店所有属性, 因为手机屏幕可能没办法显示所有数据(比如有些设备屏幕小, 后端返回的很多字段数据对这些设备而言根本就用不上，纯粹是浪费网络带宽); 此外进行REST API设计时, 需要一系列URL和所有酒店的Schema. 但如果是平板电脑则希望显示更多详细信息以适应屏幕, 可以通过使用其它辅助资源或使用一些查询参数来判定屏幕规格, 但这样的话客户端需求和服务端代码将耦合在一起. 为避免这种问题, 可以考虑使用GraphQL. GraphQL由Facebook推出, 定义了API开发的新模式. GraphQL官方提供了对Golang支持, 使用参考如下 12345678910111213141516171819202122232425262728293031323334353637// 本例以酒旅业务为例, 编写一简单的GraphQL接口type Hotel struct &#123; Id string `json:"id"` DisplayName string `json:"displayName"` City string `json:"city"` NoRooms int `json:"noRooms"` StarRating int `json:"starRating"` &#125;// 为结构体`Hotel`定义GraphQL对象类型var hotelType = graphql.NewObject(graphql.ObjectConfig&#123; Name: "Hotel", Fields: graphql.Fields&#123; "id": &amp;graphql.Field&#123; Type: graphql.String, &#125;, "displayName": &amp;graphql.Field&#123; Type: graphql.String, &#125;, "city": &amp;graphql.Field&#123; Type: graphql.String, &#125;, "noRooms": &amp;graphql.Field&#123; Type: graphql.Int, &#125;, "starRating": &amp;graphql.Field&#123; Type: graphql.Int, &#125;, &#125;, &#125;)// 定义Schemavar schema, schemaErr = graphql.NewSchema(graphql.SchemaConfig&#123; Query: rootQuery, Mutation: rootMutation, &#125;) Endpoint使用REST API时,每个资源均有一特定端点, 这些端点拥有多个方法(或谓词), 以特定方式获取(或提供)数据. 而GraphQL恰恰相反, 通常GraphQL中只有一个端点, 数据结构不固定,整个协议完全由客户端驱动, 如获取据时, 客户端需明确指定所需数据.12345678910111213141516171819http.HandleFunc("/graphql", func(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("[in handler]", r.URL.Query()) result:= executeQuery(r.URL.Query()["query"][0], schema) json.NewEncoder(w).Encode(result) &#125;) fmt.Println("Graphql server is running on port 8080") http.ListenAndServe(":8080", nil)func executeQuery(query string, schema graphql.Schema) *graphql.Result &#123; result:= graphql.Do(graphql.Params&#123; Schema: schema, RequestString: query, &#125;) if len(result.Errors) &gt; 0 &#123; fmt.Printf("wrong result, unexpected errors: %v", result.Errors) &#125; return result &#125; Queries回到Golang代码, rootQuery处理所有查询, 可以通过graphql.NewObject()函数创建 123456789101112131415161718192021222324// 实际生产环境, 使用数据库存储、获取数据, 而非基于内存的Mapvar hotels map[string]Hotel// 基于酒店ID获取数据var rootQuery = graphql.NewObject(graphql.ObjectConfig&#123; Name: "RootQuery", Fields: graphql.Fields&#123; "hotel": &amp;graphql.Field&#123; Type: hotelType, Description: "Get a hotel with this id", Args: graphql.FieldConfigArgument&#123; "id": &amp;graphql.ArgumentConfig&#123; Type: graphql.String, &#125;, &#125;, Resolve: (funcparams graphql.ResolveParams) (interface&#123;&#125;, error) &#123; id, _:= params.Args["id"].(string) return hotels[id], nil &#125;, &#125;, &#125;, &#125;) 使用CURL请求给定ID的酒店相关数据, 如名称、城市、空房数、评分等 1curl -g 'http://localhost:8080/graphql?query=&#123;hotel(id:"XVlBzgba")&#123;displayName,city,noRooms,starRating&#125;&#125;' 或使用GraphQL DSL获取所有酒店ID: 12345&#123; allHotels &#123; id &#125; &#125; 服务端返回 12345678&#123; "allHotels": [ &#123; "id": "xyz" &#125;, &#123; "id": "abc" &#125;, &#123; "id": "pqr" &#125;, ... ] &#125; Mutations除了检索数据,API还需支持数据修改, 通常有以下几种数据变更： 新增数据 更新数据 删除数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var rootMutation = graphql.NewObject(graphql.ObjectConfig&#123; Name: "RootMutation", Fields: graphql.Fields&#123; "createHotel": &amp;graphql.Field&#123; Type: hotelType, Description: "Create new hotel", Args: graphql.FieldConfigArgument&#123; "displayName": &amp;graphql.ArgumentConfig&#123; Type: graphql.NewNonNull(graphql.String), &#125;, "city": &amp;graphql.ArgumentConfig&#123; Type: graphql.NewNonNull(graphql.String), &#125;, "noRooms": &amp;graphql.ArgumentConfig&#123; Type: graphql.NewNonNull(graphql.Int), &#125;, "starRating": &amp;graphql.ArgumentConfig&#123; Type: graphql.NewNonNull(graphql.Int), &#125;, &#125;, Resolve: func(params graphql.ResolveParams) (interface&#123;&#125;, error) &#123; displayName, _:= params.Args["displayName"].(string) city, _:= params.Args["city"].(string) noRooms, _:= params.Args["noRooms"].(int) starRating, _:= params.Args["starRating"].(int) newHotel:= Hotel&#123; Id: randomId(), DisplayName: displayName, City: city, NoRooms: noRooms, StarRating: starRating, &#125; hotels[newHotel.Id] = newHotel return newHotel, nil &#125;, &#125;, &#125;, &#125;)var letterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") // 随机生成IDfunc randomId() string &#123; b:= make([]rune, 8) for i:= range b &#123; b[i] = letterRunes[rand.Intn(len(letterRunes))] &#125; return string(b) &#125; 使用CURL创建新增酒店数据: 1curl -g 'http://localhost:8080/graphql?query=mutation+_&#123;createHotel(displayName:"HotelX",city:"NY",noRooms:300,starRating:5)&#123;id&#125;&#125;' Subscriptions通过订阅,客户端可获取不同事件的更新,客户端与服务端建立持久化连接,服务端数据流入客户端. 如客户端要获取新增酒店名称和ID数据,可以发送以下订阅： 123456subscription &#123; newHotel &#123; name id &#125; &#125; 此后,客户端与服务端建立连接, 每次进行数据变更如新增酒店,服务端将数据流式传输至已订阅的客户端： 123456&#123; "newHotel": &#123; "name": "NewHotel", "id": rndid16 &#125; &#125; 高级API设计模式 MVC API 网关 负载均衡、健康监测.服务部署集群中通常存在在冗余实例(如可靠性及拓展性考虑), 对于客户端而言, 最好能够访问运行状况良好实例以避免服务不可用.通常,该模式对每个服务实例进行深层健康状况检查（即检查所有子系统)并告知负载均衡器或服务注册表有关实例运行状况, 负载均衡器或服务注册表拥有一个代理,该代理调用每个服务后端实例并在给定时间内接收回复,可以通过异步健康监测方式, 以便获取更好的性能.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Software Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫谈Golang软件架构 (一) -- 分布式系统]]></title>
    <url>%2Fgo%2Fdistros%2F</url>
    <content type="text"><![CDATA[分布式系统, 从设计、开发调试到部署上线、后期维护, 每个过程并非易事. 分布式系统复杂, 具有挑战性, 比单机系统更容易出错. Java之父—James Gosling曾提出八个有关分布式计算的谬论: 网络可靠 延迟为零 带宽无限 网络安全 拓扑不变 传输代价为零 网络同构 管理人员”无所不能” 对于这些谬论, 暂且一笑了之, 但在20年前, 真的很难预测, 特别是分布式计算. 今天我们依然面临这些限制: 网络不可靠,不安全,带宽有限,网络的拓扑结构将发生变化,其组件的配置方式不同. 意识到这些限制将有助于我们设计更好的分布式系统. 分布式系统架构分层架构 如图, 分层架构中的每一层聚合了下一层的相关职责和抽象. 严格类型分层系统中, 每层组件只能和同一层组件或下一层组价交互. 分布式系统中存在多个节点, 这种分层架构也可以称为N阶架构, 如典型的Web应用包含以下几层: 展现层, UI相关特性 HTTP服务层, 处理HTTP/HTTPS请求、HTTP持久化连接、SSL/TLS加密、逆向缓存、负载均衡等 业务逻辑层, 基于具体业务规则进行处理, 代码部署至Web容器或Web相关框架中 数据层, 与数据库进行交互, 代码复用, 初期数据层可与业务逻辑层放在一起. 尽量保持客户端代码简单, 以便获得最大复用灵活性以及拓展性(通常服务端代码比客户端代码更容易变更和部署). 当然, 有时客户端代码封装了好几层, 以便进行如延迟优化等. 基于对象系统最简单的分布式系统由对象构成, 对象间彼此通过远程过程调用(RPC)或远程方法调用(RMI)进行交互. 每个节点一般包括以下三层 代理/框架层, 存在客户端代理以及服务器主框架, 客户端代理转发请求给实际服务器对象及远程引用层 远程引用层, 负责执行调用语义, 具体通信委托给传输层 传输层, 负责连接管理及远程对象追踪 基于对象系统, 通常有以下两类生态 CORBA(通用对象请求代理体系结构, Common Object Request Broker Architecture), 由对象管理组织(OMG)定义, Java中RPC框架常用此技术 DCOM(分布式组件对象模型, Distributed Component Object Model), 由微软赞助 在Go语言中, Go标准库有rpc包允许开发人员通过远程过程调用导出任意对象方法1234567891011// 简单实现一个乘法服务type Args struct &#123; A, B int&#125;type MultiplyService struct &#123;&#125;func (t *Arith) Do(args *Args, reply *int) error &#123; *reply = args.A * args.B return nil&#125; 上面代码中的服务可以通过rpc包在远程过程调用中使用123456789101112func main() &#123; service := new(MuliplyService) rpc.Register(MuliplyService) rpc.HandleHTTP() l, err := net.Listen("tcp", ":1234") if err != nil &#123; log.Fatal("listen error:", err) &#125; go http.Serve(l, nil)&#125; 客户端代码12345678910client, err:= rpc.DialHTTP("tcp", serverAddress + ":1234")if err != nil &#123; log.Fatal("dialing: ", err)&#125;args := &amp;server.Args&#123;10, 12&#125;var reply intclient.Call("Multiply.Do", args, &amp;reply)fmt.Printf("%d*%d=%d", args.A, args.B, reply) 基于对象系统架构, 近几年不再流行, 主要有以下几点原因 试图为远程对象进行封装并伪造本地引用, 实际上远程行为和本地未必相同, 此类架构并没有更好的处理方式 调用双方在进行通信时必须正常运行, 不太符合实际情况, 如应用构建时未必 部分架构, 如CORBA变得原来越复杂 P2P架构所有对等节点分担部分负载或共享资源, P2P架构中, 所有节点既可以充当客户端, 也可以充当服务端. 分布式哈希表, 也是一种P2P结构, 一种结构化的P2P. 分布式哈希表可以跨节点, 可以通过一致性哈希(Consistent Hashing)算法构建分布式哈希表. 一致性哈希算法主要思想是通过使用同一哈希函数对Keys和托管缓存的Server进行哈希, 这样做的理由是将缓存映射为哈希值, 如果移除缓存, 只需移除对应哈希值即可, 其他缓存无需变更. P2P网络中, 有时也可变得具有等级, 如Superpeer. 这些Superpeers负责内部集群通信, 也可以与其他Superpeer进行交互, 这种类型的架构有CDN(内容分发网络), 每一个Edge服务器充当一个peer. 分布式计算 Map-Reduce并行处理框架, 在大数据生态组件中很常见, 如Hadoop 分布式内存计算模型, 如大数据生态组件Spark, RDD(分布式弹性数据集) + 内存计算, 快速而高效地进行数据处理 MPP, 多并行处理, 如Impala 流式处理 微批处理模型, 如Apache Spark/Storm、Samza等流式处理框架, 适合无状态计算 State Transformation, 框架本身拥有一种状态维护机制, 如Apache Flink/Apex, 适合有状态计算. 事件驱动架构通常, 单体应用可通过微服务进行分解, 每项微服务为避免耦合可以拥有自己的数据库, 这也使得分布式事务成为可能, 但也存在不足之处: 与使用单个数据库事务相比, 拟合时间长, 容易出错 所有微服务不一定使用关系型数据库, 有的微服务可能根据具体业务需求使用NoSQL数据库, 如MongoDB等 遇到这种情况可以考虑Event-Driven. 事件驱动(Event-Driven), 通过事件响应对行为进行分解, 进行事件驱动建模时, 一个事件Event通常意味着重要的状态变更, 比如购物付款后订单状态由未支付变为已经支付等. 事件驱动架构设计, 常用的设计模式有 Event Sourcing, 事件溯源, 通过追加日志形式, 实现事务或分布式事务 CQRS, 指令查询责任分离, 指令更新和查询进行分离, 查询部分并不负责更新写入, 反之亦然, 实现最终一致性(Eventual Consistency) Event Stream, 适用于源源不断无边界的事件建模, 流式处理常用模式之一 Actor模型可以通过使用Actor进行异步非阻塞计算, 适用于消息驱动建模. 每个Actor拥有自己的邮箱, 通过交换消息进行通信, 每个Actor拥有内部状态可以影响消息回复. Actor语义和管道-协程语义区别如下: 每个Actor通过邮箱进行唯一性区分, 进行消息处理时由特定Actor进行处理, 管道是通用型, 意味着多个协程可以监听同一管道. 管道基于内存, Actor通过邮箱可以跨主机多节点进行通信. Actor模型基于Actor原语, 管道-协程基于CSP(顺序化通信进程) 容错方面, Actor存在灵活的Supervise监督机制和Let it crash思想(意味着当一个Actor crash时, Supervisor会推选出另一Actor继续进行未完成的任务),而管道-协程需要开发人员手动添加容错处理逻辑. Actor模型遵循分治原则, 将任务进行切分直到每个任务足够小, 能被部分顺序化代码处理. Actor进行消息交换时, 生产者和消费者不需要同时存活, 处理速率可以不对等. 分布式系统中共识算法分布式系统中为保持数据一致性, 对于数据更新达成共识, 常见的实现形式有 Leader选举, 集群节点中推选一个节点作为Leader负责协同、交互等. 分布式锁管理, 多节点间处理互斥访问. 分布式事务, 多节点间通过分布式事务保持数据一致性. 在设计分布式共识算法时, 需要注意以下几点 真实性, 推选出来的值必须在提议值内 生命周期, 共识进程应该在一定时间内中止 共识, 所有参与节点认可提议值 Leader选举 在多个集群节点中推选出Leader, 通常有以下两种常见策略 基于ID选举, 每项实例ID唯一, 不管什么时候发生选举, 实例与ID最小或最大节点进行ID交换. 基于环拓扑实例的Leader选举算法, 复杂度在O(n^2)到O(nlogn)之间, 取决于具体算法实现. 互斥竞争, 实例间共享互斥锁进行争用, 获取锁的实例推选为Leader. 通常为防止Leader故障进行重新选举, 在Leader和其他实例间存在一种保活机制. 选举中一般会用到选举计数器, 进行消息交换时, 选举计数器封装在负载中, 以避免在同一选举中同一节点同时投票给俩不同节点推选为Leader. 多阶段提交提议进程发送提议值给每项参与进程, 每项进程要么接受提议要么回绝提议, 提议进程根据收到所有参与进程的回复, 判定是否达成一致. 分布式提交主要有两种类型: 两阶段提交 三阶段提交 两阶段提交假定提议进程P0, 以及其他参与进程P1…PN(或执行进程)需要更新值, 在两阶段提交中, P0与其他进程进行协同, 以便达成一致, 主要阶段如下: 准备阶段, P0发送消息”Prepare update v = x”给其他执行进程[P1…PN], 每项执行进程可以投票”Prepared”或”No”, 如果存在其他并发事务执行进程可以投票”No”, 或存在局部Stage已经改变可以投票”Prepared” 提交阶段, 收到所有进程的回复后, P0要么发送提交消息”commit”要么发送取消消息, 每项执行进程根据回复完成事务. 为了便于处理类似于重启之类的状况, 每个进程记录自身当前状态并在发送消息前持久化, 如所有执行进程回复消息”Prepared”, P0可以记录处于提交阶段. 两阶段提交容易在提交阶段产生错误: P0可能在准备阶段奔溃. 此时其它所有执行进程阻塞, 直到P0上线, 系统由于共识产生中断. P0也可以判断崩溃节点是否重新上线或中止事务. 如果其中一个执行进程在提交阶段奔溃, P0并不能判断该进程是在提交前还是在提交后产生故障. 小结: 两阶段提交最大的缺点在于阻塞, 如果在重要阶段其中一个进程死亡, 可能会导致”中断不止”. 三阶段提交非阻塞的提交协议在于单进程故障是否影响其他进程判定事务是否提交还是中止, 为了实现这种目的, 可将提交阶段分成俩部分 预提交阶段, 在接收到执行进程的”Prepared”消息后, P0进入预提交阶段. P0发送”precommit”消息给所有的执行进程, 在此阶段并不进行实际提交. 提交阶段, 如果P0在预提交阶段接收到所有执行进程的回复消息”Yes”, 便发送提交消息”commit”至所有的执行进程, 然后完成事务. 如果任一执行进程在预提交阶段回复”No”或没有回复,事务中止. 三阶段提交算法本质上还是两阶段提交, 不过在提交阶段多个了预提交而已. 目前, 绝大多数大数据分布式框架如Flink采用含有预提交的两阶段算法保证恰好一次及时消费语义性. 预提交阶段有助于算法从节点故障中恢复, 每项进程可能会产生超时, 假如执行进程未接收来自P0回复, 可推选出新的Coordinator继续完成事务. 新的Coordinator通过对执行进程进行Query检测当前的事务状态. 另一方面, 如果有一执行进程回复新的Coordinator没有接收到”precommit”消息, 新的Coordinator判定P0是在提交阶段前发生故障, 因为其他执行进程没有任何变更, 可以安全地中断此次事务.含有预提交的两阶段算法, 也存在一定不足, 如容易受网络环境影响. Paxos共识算法Paxos协议灵活, 比两阶段提交算法具有更好的容错性. Paxos算法实现中节点有以下三种角色 提议者(Proposer), 该节点驱动共识处理 接收者(Acceptor), 这些节点可以独立接受或回绝提议 学习者(Learner), 并不直接影响共识构建进程, 基于接收者的接收值进行学习, 通常学习者和接收者打包于同一组件中. Paxos基本步骤和两阶段提交有些类似, Paxos中提议者发送俩种类型消息给接收者—Prepare以及Accept. 在Prepare准备阶段, 除了发送提议值还发送提议序列数, 提议数为单调调增的正数, 具有唯一性. 提议数由两部分组成: 节点标识及对应节点计数器, 当接受者收到有冲突的提议时, 选择提议数最大的提议. Accepter须记住已经接收的最大提议数以及回复其他请求的最大提议数. Paxos主要步骤如下 阶段一: Prepare, 构造提议消息,消息包含提议值v及提议数N(比进程之前使用过的任何数字大), 发送给大多数接收者 Promise, 当一接收者收到Prepare消息后, 检测提议数是否比之前接收过的提议数大, 是的话记录提议值并更新提议数N, 不是的话忽略该消息(尽管没有必要回复, 但回复NACK可以加速算法拟合). 若接收者接受提议, 须发送包含之前提议数及提议值消息回复Proposer提议者. 整个过程中, 一个接收者可以接收多条提议. 阶段二: 接收请求, 一旦提议者接收到绝大多数节点消息时, 算法进入Acceptance(接收)阶段. 基本上提议者希望接收者进行提交, 存在以下几种情况: 如果绝大多数接收者回复NACK消息或回复失败, 提议者放弃提议回到初始状态或初始阶段 如果没有一个接受者接收提议, 提议者可能选择初始值v以及提议数N 如果任一接收者接收过提议, 提议值和提议序列数对提议者可用, 假如此时接受的提议值v、最大提议序列数w, Paxos协议迫使提议者更新提议数为w, 以防止之前死亡过的提议者重新上线分化整个共识进程. 提议者发送包含选定值的消息Accept给所有接收者, 接收, 当接受者接收Accept消息后, 检测以下几种情况: 消息值是否是之前接收提议中值 消息中序列数是否是所有接受者认可的最大提议数 如果上面两个条件都满足, 接收者发送Accept消息给提议者, 否则发送Reject消息 为使多个提议者进行提议时拟合更快, 一般通过Leader选举与Paxos协议结合使用保证多节点间达成共识. 实际上, Zookeeper协同服务主要由Paxos协议和Leader选举实现. Raft共识算法Raft和Paxos共识算法类似, 与Paxos相比具有更少的状态, 算法也比Paxos简单. 任意给定时间, 每项Raft允许的实例状态有: Leader、Follower或Candidate. 刚开始,每项实例作为Follower, 在此期间, 实例很消极仅回复消息, 如基于Log结构消息从Leader处复制状态或回复Candidate的选举消息. 如果一定时间内没有接收消息, 该实例可推选自身为Candidate, 开始进行选举并有可能被推选为Leader. 处于Candidate状态的实例, 向其它对等实例请求投票, 收到绝大多数投票的实例被推选为Leader. 推选为Leader的实例, 主要职责有: 处理写入请求, 如客户端的状态变更请求 处理读取请求, 如不允许读取老数据(Stale read, 或陈旧数据) 复制状态给所有的Follower Raft算法中, 处理写入请求过程一般产生追加日志, Leader将追加日志持久化, 然后对Follower复制进行初始化. 日志在Raft协议中很重要, 共识问题基本转化成了日志副本问题. 如果所有实例具有相同日志项且日志项具有相同顺序, 可以认为系统处于一致性状态. 当大多数节点实例成功复制可视为写入提交, 对于N个实例集群而言, 绝大多数意味着至少(N/2+1)个节点. 写入提交机制, 可能会阻塞客户端写入, 直到已经提交. 一旦日志项提交, 可在实例上运行有限状态机. 有限状态机上可托管特定应用代码, 如处理状态变更, 当然应用代码须具有确定性, 因为所有节点以相同顺序运行相同的数据, 输出也应该相同. 分布式系统中一致性问题 ACID, 关系型数据库中ACID(Atomicity原子性, Consistency一致性, Isolation隔离性, Durability持续性)特性, 缺点在于拓展性不佳 CAP理论, 分布式系统CAP理论, 不能同时取得一致性、可用性和分区容错性 BASE原理, Basically Available(基本可用)、Soft state(软状态) 及 Eventual Consistency(最终一致性) 三个短语缩略. 其核心思想是即使无法做到强一致性(Strong Consistency,CAP的一致性就是强一致性), 但应用可以采用适合的方式达到最终一致性(Eventual Consitency).]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Software Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch JIT浅酌]]></title>
    <url>%2Ftorch%2Fjit%2F</url>
    <content type="text"><![CDATA[对于采用Python进行开发的PyTorch应用代码而言, 运用JIT技术, 不仅可以避免Python GIL(全局解释锁)带来的性能瓶颈, 而且有助于加速PyTorch代码进行模型迭代与训练. 当PyTorch于GPU上执行一系列操作时, 底层GPU内核从GPU内存读取输入, 计算结果并存储, 其中大部分时间开销并不在计算上, 而在内存读写上. 为了提升性能, 可以考虑减少读取次数(如仅读取一次), 计算多次并最终写入结果. 运用PyTorch JIT技术, 可以达到这样的效果. 下面以LSTM(长短期记忆, Long Short Term Memory)算法为例, 进行简要说明. 运用PyTorch JIT技术, 可以均衡LSTM算法的运行速率与泛化能力. 图中该LSTM算法的具体细节并不重要, 图中有五项输入, 两项输出, 七项中间结果, 通过运用PyTorch JIT技术, GPU内存读可从12项减少为7项, 写从9项较少为2项, 训练时间减少1/4. 后端与接口PyTorch后端调用示意图, 参考如下: 通常, PyTorch中torch.nn模块使用的接口可传入或返回Tensor, 这些接口通常由C++实现, 执行实际计算的内部库也称ATen(ATen提交计算至GPU后端, 如CuDNN, NNPACK等). 如图所示, PyTorch应用代码, 不管是使用Python实现, 还是C++实现, 基本上”殊途同归”, 均转化为调用底层LibTorch模块或JIT模块. PyTorch JIT提供了一种”软链”计算, 该种”软链”计算实际上为TorchScript中间层代码. PyTorch JIT模块中函数可用于装载, 审视或执行TorchScript模块. (C++代码或Python代码均可访问PyTorch JIT模块) 脚本创建TorchScript有以下两种最直接的方式: 追溯 (Tracing) 脚本化 (Scripting) 当使用Tracing时, 通过样本输入(或随机输入)执行PyTorch模型, PyTorch JIT拥有每个函数对应的钩子(Hook), 用于记录计算. 只有当调用PyTorch中函数时, 才会触发Tracing, 缺点在于没有控制流. 使用Scripting时, PyTorch JIT将Python应用代码编译成TorchScript中间层代码, 缺点在于受限于JIT编译器. 下面, 来看个小例子 123456789101112# 对矩阵中每项列向量中值进行累加(不同列向量不累加), 结果为一行向量def col_sum(x): y = x[0] for i in range(1, x.size(0)): y = y + x[i] return yrdn = torch.randn(5, 5)# 使用Tracing, 运行下面这段代码, 将抛出警告日志# 大意是将Tensor转换成Python Index将导致Trace不准确trace_func = torch.jit.trace(col_sum, rdn)print(trace_func) 如何解决这个问题, 可以考虑使用Scripting, 代码参考如下: 12script_func = torch.jit.script(col_sum)print(script_func.code) 123# 或者打印Scripting后的Graph# 该Graph更接近TorchScript IRprint(script_func.graph) 当然, 最简单的方式, 可以直接使用torch.jit.script装饰器(Decorator) 123456@torch.jit.scriptdef col_sum(x): y = x[0] for i in range(1, x.size(0)): y = y + x[i] return y 尽管TorchScript看起来有些类似于Python子集, 但存在本质区别. 比如PyTorch为TorchScript代码加上了特定类型, 因为TorchScrip代码本质上为静态类型代码, 每种类型受限于TorchScript IR表示. 在程序内部JIT会自动进行类型推断, 不过在使用TorchScript时, 最好注明任意非Tensor类型参数. 使用TorchScript时, 如需暴露对外调用的方法, 可以在类定义时使用@torch.jit.export装饰器. 可追溯性以下代码中, PyTorch JIT将up.shape元组替换成1d 整型Tensor, diff_x, diff_y此类Tensor操作具有可追溯性, 运行以下代码可能产生Tracer警告. 123456789101112131415161718class MNetUpBlock(nn.Module): # 略去部分实现代码 def center_crop(self, layer, target_size): _, _, layer_height, layer_width = layer.size() diff_y = (layer_height - target_size[0]) // 2 diff_x = (layer_width - target_size[1]) // 2 # Tracer警告, 切片中元素为Python中int类型 # 该方法在下面 `forward()` 方法中被调用时, 抛出警告 return layer[:, :, diff_y:(diff_y + target_size[0]), diff_x:(diff_x + target_size[1])] def forward(self, x, bridge): # JIT将`up.shape`元组替换成1d 整型Tensor # 调用 `center_crop` 方法时, 将抛出警告 crop1 = self.center_crop(bridge, up.shape[2:]) # 其它具体实现逻辑略 解决方式, 代码重构, 参考如下: 12345678910111213141516# 使用TorchScript, 使`MNet`模型更具有可追溯性@torch.jit.scriptdef center_crop(layer, target): _, _, layer_height, layer_width = layer.size() diff_y = (layer_height - target_size[0]) // 2 diff_x = (layer_width - target_size[1]) // 2 return layer[:, :, diff_y:(diff_y + target_size[0]), diff_x:(diff_x + target_size[1])]class MNetUpBlock(nn.Module): # 略去部分实现代码 def forward(self, x, bridge): crop1 = center_crop(bridge, up) # 其它具体实现逻辑略 还有一种解决方式, 将非脚本化逻辑(即非TorchScript部分)转换成C++实现的自定义操作, 比如TorchVision库中MaskRCNN模块就是这么干的.]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>PyTorch</tag>
        <tag>PyTorch JIT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Meta-SGD For Deep Learning (Part Two)]]></title>
    <url>%2Fmeta-dl%2Fsgd-code%2F</url>
    <content type="text"><![CDATA[接着上篇博文, 本篇博文主要以Meta-SGD算法代码实战为主. 本文将以经典机器学习算法中常见的二分类任务为例,运用Meta-SGD算法进行模型训练并对超参数进行优化. 为了简单起见,我们随机生成样本数据并使用单层神经网络进行训练, 以找到最优参$\theta$ . 准备样本数据1234567891011import numpy as npdef data_points_sample(k): """ 生成输入数据点(x, y), 参数k表示要取样的数据点数量 """ arr = [0, 1] p = [.5, .5] x = np.random.rand(k, 50) y = np.random.choice(arr, size=k, p=p).reshape([-1, 1]) return x, y 预测输出本例使用单层神经网络预测输出, 通过Meta-SGD算法找到最优参$\theta$、学习率$\alpha$及梯度更新方向, 并在多个任务中生成. 因此对于新任务而言,要训练的梯度少, 学习的数据点少, 花费时间少, 因而学习更加快速. 算法运用步骤回顾下上篇博文Meta-SGD算法步骤, 具体如下: 1. 给定模型$f$,参数$\theta$,Task分布$p(T)$. 首先随机初始化模型参数$\theta$和$\alpha$, 且保证$\alpha$与$\theta$具有相同的Shape. 2. 对满足分布$T_i \sim p(T)$的Task$T_i$, 对其Batch进行采样, 假定对三个Task进行采样 $T=\{T_1, T_2, T_3\}$ 3. 进行内循环遍历, 对于每项Task(假定$T_i$), 采样K个数据点并准备好训练集和测试集. 在$D_i^{train}$上运用监督型算法, 使用梯度下降计算并得到最优参数$\theta_i^{'}$ (注意$\theta_i^{'}=\theta -\alpha o \nabla_\theta L_{T_i} (f_\theta)$), 对于每项Task, 取样K个数据点并在训练集$D_i^{train}$上训练得到最优参数$\theta_i^{'}$ . 如下, 对三个Task进行采样得到三个最优参数$\{\theta_1^{'},\theta_2^{'},\theta_3^{'}\}$ $D_i^{train}=\{(x_1, y_1), (x_2, y_2),(x_3, y_3)\}$ $D_i^{test}=\{ (x_1, y_1), (x_2, y_2)......(x_k, y_k) \}$ 4. 外循环遍历, 在测试集$D_i^{test}$上进行损失优化, 利用上一步得到的最优参数$\theta_i^{'}$进行计算, 使用测试集更新随机初始化参数$\theta$ 以及$\alpha$, 更新规则如下: $\theta=\theta - \beta\nabla_\theta \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ $\alpha=\alpha-\beta\nabla_\alpha \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ 5. 重复步骤2 和步骤4进行N次迭代 MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 代码实现首先, 对Meta-SGD算法运用面向对象建模, 封装为一Python类MetaSGD. 进行算法训练时, 我们需要知道训练迭代的epochs数量、每个batch训练的任务数num_tasks、每项Task取样的数据点数量num_samples、外部梯度更新或外循环超参数beta, 注意theta 和alpha在初始化时保持相同的Shape. 单层神经网络激活函数使用sigmoid函数. 12def sigmoid(self, variable): return 1.0 / (1 + np.exp(-variable)) 训练过程中, 对数据点进行采样准备训练集 1x_train, y_train = data_points_sample(self.num_samples) 使用单层神经网络进行预测 12a = np.matmul(x_train, self.theta)y_hat = self.sigmoid(a) 计算损失和梯度 123456loss = ((np.matmul(- y_train.T, np.log(y_hat)) - np.matmul((1 - y_train.T), np.log(1 - y_hat)) ) / self.num_samples )[0][0]gradient = np.matmul(x_train.T, (y_hat - y_train)) / self.num_samples 更新梯度并为每项任务找到优化参数 $\theta^{‘}$ 1self.theta_.append(self.theta - (np.multiply(self.alpha, gradient))) 采样准备好训练集$D_i^{test}$, 进行meta训练时预测y值 12345x_test, y_test = sample_points(10)# 预测a = np.matmul(x_test, self.theta_[i])y_pred = self.sigmoid(a) 计算meta梯度 1meta_gradient += np.matmul(x_test.T, (y_pred- y_test)) / self.num_samples 更新模型参数 $\theta$ 和 $\alpha$ $\theta=\theta - \beta\nabla_\theta \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ $\alpha=\alpha-\beta\nabla_\alpha \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 最后, 打印损失 详细代码, 请参考这里]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>Meta Machine Learning</tag>
        <tag>Supervised Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch实战Neural Style Transfer]]></title>
    <url>%2Fdl%2Fnst%2F</url>
    <content type="text"><![CDATA[个人在公司内部做的有关Neural Style Transfer的技术分享, 有段时间了, 重新整理下. (本文偏代码实战, 数学理论推导部分较少, 如需深入了解该算法理论, 我再找找理论部分PPT, 或者你也可以自行谷歌或百度) 大家好, 今天要分享的是有关Neural Style Transfer在CV(Computer Vision, 计算机视觉)处理方面的应用, (鄙人精力有限, 还请各位大佬不吝赐教). Neural Style Transfer在CV方面比较实用的技巧在于风格迁移, 比如下图为美丽的晚秋落叶图 然后, 有一张满屏毕加索风格的艺术画 通过Neural Style Transfer, 对晚秋落叶图进行毕加索风格迁移, 可以得到以下一张充满立体主义与印象风格的图片 其中, 晚秋落叶图可称为Content Image, 毕加索风格的艺术画也称Style Image, Neural Style Transfer基本思想在于从Content Image与Style Image中提取各自特征(即内容特征与风格特征), 然后将内容特征与风格特征重新组合成目标图像, 之后不断迭代地重建目标图像, 依据是生成图像与内容和风格图像之间的差异. 下面, 通过一个小例子来看下Neural Style Transfer算法大致迭代过程. 准备数据集首先, 看下Content Image (橘猫图) 12345from PIL import Imagecontent_image_path = './dataset/kt.jpg'content_image = Image.open(content_image_path)content_image.show() 然后, 看下Style Image (经典田园风格山水画) 123style_image_path = './dataset/farm.jpg'style_image = Image.open(style_image_path)style_image.show() 现在要做的是, 通过Neural Style Transfer算法对橘猫图进行风格迁移, 最终生成包含田园风格的抽象水墨图. 代码实战 代码主逻辑参考如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859def main(ctnt_img_path, sty_img_path, output_path): # 为了避免再造"轮子", 可以使用PyTorch已经训练好的VGG-19模型 device, model = vgg_model_init() # 首先, 获取Content Image与 Style Image的Image Tensor content_tensor = img_tensor(ctnt_img_path, device) style_tensor = img_tensor(sty_img_path, device) # 获取Content Image的特征输出 content_features = features_extraction( content_tensor, model, feature_layers) # 获取 Style Image的特征输出 style_features = features_extraction( style_tensor, model, feature_layers) # 基于Content Image抽取的Image Tensor确定输入Tensor input_tensor = content_tensor.clone().requires_grad_(True) # 定义优化器(Optimizer) optimizer = optim.Adam([input_tensor], lr=0.01) # 进行迭代 for epoch in range(num_epochs + 1): optimizer.zero_grad() # 基于Input Tensor获取输入特征 input_features = features_extraction( input_tensor, model, feature_layers) # 计算内容损失 content_loss = check_content_loss( input_features, content_features, content_layer) # 计算风格损失 style_loss = check_style_loss( input_features, style_features, style_layers_dict) # 计算Neural Loss, 即最终损失 c_loss = content_weight * content_loss s_loss = style_weight * style_loss neural_loss = c_loss + s_loss neural_loss.backward(retain_graph=True) optimizer.step() # 打印出内容损失及风格损失 if epoch % 100 == 0: print( 'Epoch &#123;&#125;, Content loss: &#123;:.2&#125;, style loss &#123;:.2&#125;' .format(epoch, content_loss, style_loss)) # 保存生成图片 img_pil = img_tensor_to_pil(input_tensor[0].cpu()) img_pil.save(output_path) 下面给出上述代码中相关方法实现, 完整代码, 请参考这里 提取图片张量其中, 对Conent Image与Style Image进行转换, 得到Image Tensor, 图片转换逻辑参考如下: 123456789101112131415161718def img_tensor(img_path, device, h=H, w=W, mean_rgb=MEAN_RGB, std_rgb=STD_RGB): """ `device`, PyTorch device, 即 Cuda 或 CPU `h`- 高, `w` - 宽, `mean_rgb`, `std_rgb`, 一些RGB设置参数 """ img = Image.open(img_path) transformer = transforms.Compose([ transforms.Resize((h, w)), transforms.ToTensor(), transforms.Normalize(mean_rgb, std_rgb) ]) # 将PIL Image 转换成 Tensor img_tensor = transformer(img) print(img_tensor.shape, img_tensor.requires_grad) img_tensor = img_tensor.unsqueeze(0).to(device) return img_tensor 获取中间层特征获取中间层的特征输出(如抽取Content Image与Style Image特征等), 代码参考如下: 1234567def features_extraction(tensor, model, layers): features = &#123;&#125; for name, layer in enumerate(model.children()): tensor = layer(tensor) if str(name) in layers: features[layers[str(name)]] = tensor return features 计算内容及风格损失 卷积神经网络中浅层卷积往往检测低级特征,深层卷积可以提取更高级的特征, 如果希望G能够与C的内容相似, 可以选择一些层的激活来代表图片表征, 事实上,选择网络的中间层（不是太浅也不要太深）有可能取得令人满意的结果. 假设选择每个特殊隐含层来使用.将C作为输入放入VGG中,并运行前向传播, 设a^{(C)} 为所选中隐含层的激活数, G亦如此,将G作为输入,并进行前向传播,a^{(G)} 为对应隐含层的激活数, 则内容损失函数可以定义为 说简单点, 利用一些新建好的网络的中间层,将其看作图片的编码,内容损失就是编码的差异. 计算内容损失, 代码参考如下: 1234567import torch.nn.functional as Fndef check_content_loss(pred_features, target_features, layer): target = target_features[layer] pred = pred_features[layer] loss = Fn.mse_loss(pred, target) return loss 网络的中间层是H W C,每一个通道其实都是差不多同一种类似的风格,如果两个通道之间的相关性很大,说明图片中要么同时出现或要么同时消失两个通道对应的风格,S(Style)图片和G(generate)图片可以各自计算出一个C * C的矩阵,每个像素是对应通道的相关（对应元素相乘）,然后比较两个矩阵的差异就是风格损失 计算风格损失, 代码参考如下: 123456789101112def check_style_loss(pred_features, target_features, style_layers_dict): loss = 0 for layer in style_layers_dict: pred_ftr = pred_features[layer] pred_gram = get_gram_matrix(pred_ftr) n, c, h, w = pred_ftr.shape target_gram = get_gram_matrix(target_features[layer]) layer_loss = style_layers_dict[layer] \ * Fn.mse_loss(pred_gram, target_gram) loss += layer_loss / (n * c * h * w) return loss 其中计算给定张量的Gram矩阵, 代码参考如下: 12345def get_gram_matrix(tensor): n, c, h, w = tensor.size() tensor = tensor.view(n * c, h * w) gram = torch.mm(tensor, tensor.t()) return gram 保存生成图片12img_pil = img_tensor_to_pil(input_tensor[0].cpu())img_pil.save(output_path) 将Image Tensor重新转换成PIL Image, 代码参考如下: 123456789from torchvision.transforms.functional import to_pil_imagedef img_tensor_to_pil(img_tensor, std_rgb=STD_RGB, mean_rgb=MEAN_RGB): img_tensor_ = img_tensor.clone().detach() img_tensor_ *= torch.tensor(std_rgb).view(3, 1, 1) img_tensor_ += torch.tensor(mean_rgb).view(3, 1, 1) img_tensor_ = img_tensor_.clamp(0, 1) pil_img = to_pil_image(img_tensor_) return pil_img 完整代码 效果检测 绝了, 这生成图比我小侄女画的水彩还抽象 …… 优化建议: 超参数调优, 不断迭代训练; 可能漏了一些参数, 请在生产代码中补上.]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Python</tag>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>PyTorch</tag>
        <tag>Neural Style Transfer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Meta-SGD For Deep Learning (Part One)]]></title>
    <url>%2Fmeta-dl%2Fsgd-math%2F</url>
    <content type="text"><![CDATA[Meta-SGD算法, Meta Learning算法中的一种, 该算法可以快速找到模型最优参数并在多个Task内生成. 当然,该算法不仅能找到最优参, 还能找到最优学习率及更新方向. 本博文要点如下: 首先, 对Meta-SGD算法进行原理剖析 然后, 细聊Meta-SGD算法在监督型机器学习算法中的运用 最后, 聚焦Meta-SGD算法在强化学习中的运用 Meta-SGD 算法原理梯度下降主要组成部分: 参数 $\theta$ 学习率 $\alpha$ 更新方向 算法原理如下, 给定task $T$, 模型$f$, 一些模型参数$\theta$(Task分布为$p(T)$). 通过梯度下降减少模型损失并找到最优参. 还记得梯度下降的更新规则吗？ $\theta=\theta -\alpha\nabla_\theta L_{T_i} (f_\theta)$ 在训练过程中一般给$\theta$设定随机值, 给定较小的$\alpha$值或使其随时间衰退, 更新方向随着梯度变化而改变, 伴随整个训练过程找到最优参.问题是我们可以通过Meta-Machine Learning的方式学习所有梯度下降的主要元素吗？能不能找到最优的初始化参数$\theta$并在多个Task中生成？假如能找到这个最优的初始化参数, 也就意味着更少的梯度迭代训练, 从而提升算法学习效率, 然后再找到最优学习率和更新方向以便能在多个Task内生成. 这样一来的话, 拟合也更快. 假定对于每项$Task_i$对应的最优参$\theta_i^{'}$, 即 $\theta_i^{'}=\theta -\alpha o \nabla_\theta L_{T_i} (f_\theta)$ 这里, 我们随机初始化$\alpha$并使其和$\theta$具有同样的Shape,初始化$\theta$, 以$\alpha o \nabla_\theta L_{T_i} (f_\theta)$ 作为调整期(adaptation term,或适应期). 此时, $\alpha o \nabla_\theta L_{T_i} (f_\theta)$代表着更新方向且以它的length为学习率. 值得注意的是,更新方向和$\alpha o \nabla_\theta L_{T_i} (f_\theta)$一致, 而非梯度方向, 从而隐式学习$\alpha$学习率. 这也意味着Meta-SGD算法并不以很小的Scalar值对学习率$\alpha$进行初始化, 学习率以随机值进行初始化并保证和$\theta$一样的Shape. 然后对Task中的一些Batch进行取样, 每项Task取样K个数据点并通过梯度下降减小损失. 或者说此时的更新等式如下, 更新方向就是调整期方向, 通过$\theta$学习$\alpha$. $\theta_i^{'}=\theta -\alpha o \nabla_\theta L_{T_i} (f_\theta)$ 根据给定最优参数$\theta_i^{'}$计算梯度损失并更新模型参数$\theta$, 整个过程$\theta$和$\alpha$更新如下: $\theta=\theta - \beta\nabla_\theta \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ $\alpha=\alpha-\beta\nabla_\alpha \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ 小节: Meta-SGD算法在调整期内不仅隐式地学习了模型参数$\theta$, 还学习了学习率$\alpha$和更新方向. MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); Meta-SGD 在监督型机器学习算法中的应用可以将Meta-SGD运用于任意使用梯度下降训练的监督性学习中, 如分类或回归. 具体应用步骤如下: 1. 给定模型$f$,参数$\theta$,Task分布$p(T)$. 首先随机初始化模型参数$\theta$和$\alpha$, 且保证$\alpha$与$\theta$具有相同的Shape. 2. 对满足分布$T_i \sim p(T)$的Task$T_i$, 对其Batch进行采样, 假定对三个Task进行采样 $T=\{T_1, T_2, T_3\}$ 3. 进行内循环遍历, 对于每项Task(假定$T_i$), 采样K个数据点并准备好训练集和测试集. 在$D_i^{train}$上运用监督型算法, 使用梯度下降计算并得到最优参数$\theta_i^{'}$ (注意$\theta_i^{'}=\theta -\alpha o \nabla_\theta L_{T_i} (f_\theta)$), 对于每项Task, 取样K个数据点并在训练集$D_i^{train}$上训练得到最优参数$\theta_i^{'}$ . 如下, 对三个Task进行采样得到三个最优参数$\{\theta_1^{'},\theta_2^{'},\theta_3^{'}\}$ $D_i^{train}=\{(x_1, y_1), (x_2, y_2),(x_3, y_3)\}$ $D_i^{test}=\{ (x_1, y_1), (x_2, y_2)......(x_k, y_k) \}$ 4. 外循环遍历, 在测试集$D_i^{test}$上进行损失优化, 利用上一步得到的最优参数$\theta_i^{'}$进行计算, 使用测试集更新随机初始化参数$\theta$ 以及$\alpha$, 更新规则如下: $\theta=\theta - \beta\nabla_\theta \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ $\alpha=\alpha-\beta\nabla_\alpha \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ 5. 重复步骤2 和步骤4进行N次迭代 MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); Meta-SGD 在强化学习中的应用Meta-SGD算法和任意使用梯度下降进行训练的强化学习算法兼容, 应用步骤和上面类似 1. 给定模型$f$,参数$\theta$,Task分布$p(T)$. 首先随机初始化模型参数$\theta$和$\alpha$, 并保证$\alpha$与$\theta$具有相同的Shape. 2. 对满足分布$T_i \sim p(T)$的Task$T_i$, 对其Batch进行采样, 假定对三个Task进行采样 $T=\{T_1, T_2, T_3\}$ 3. 进行内循环遍历, 对于每项Task(假定$T_i$), 在数据集$D_i^{train}$上进行轨迹采样, 通过使用梯度下降计算并得到最优参数$\theta_i^{'}$ (注意$\theta_i^{'}=\theta -\alpha o \nabla_\theta L_{T_i} (f_\theta)$), 如对三个Task进行采样得到三个最优参数$\{\theta_1^{'},\theta_2^{'},\theta_3^{'}\}$, 然后对另一个轨迹数据集$D_i^{test}$进行采样, 以便进行meta更新. 4. 外循环遍历, 在$D_i^{test}$上进行损失优化, 利用上一步得到的最优参数$\theta_i^{'}$进行计算, 并更新随机初始化参数$\theta$ 以及$\alpha$, 更新规则如下: $\theta=\theta - \beta\nabla_\theta \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ $\alpha=\alpha-\beta\nabla_\alpha \sum_{T_i \sim p(T)} L_{T_i}(f_{\theta_i^{'}})$ 5. 重复步骤2 和步骤4进行N次迭代 MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 本篇博文主要以数学和算法理论为主, 下篇博文将带你实战Meta-SGD算法编码.]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>Meta Machine Learning</tag>
        <tag>Supervised Learning</tag>
        <tag>Reinforcement Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swarm Intelligence(集群智能)牛刀小试]]></title>
    <url>%2Fdl%2Fpsi%2F</url>
    <content type="text"><![CDATA[集群智能(Swarm Intelligence, 简称SI), 作为AI中很重要的一部分, 表示自然或人工中去中心化、自组织系统产生的集体智能行为. 在运用集群智能实现一个简单的游戏AI前, 先了解下集群智能相关概念原理. 集群智能一般包括群体中单个Agent或Boid(AI程序)间进行本地交互或与环境交互, 从而产生集体智能行为. 集群智能基本特点 去中心化, 因而具有较强鲁棒性,即不会由于某一个或几个个体出现故障而影响集群对整个问题的求解. 自组织, 通过群体中不同个体间进行本地交互或与环境交互产生智能 可扩充, 由于集群智能可以通过非直接通信的方进行信息的传输与合作,因而随着个体数目的增加,通信开销的增幅较小,拓展性好. 简单性, 集群中每个个体的能力或遵循的行为规则非常简单,因而集群智能的实现比较方便. 集群智能主要原则 稳定性原则(Stability Principle), 集群不应在每次环境变化时都改变自身的行为 多样性反应原则(Principle of Diverse Response), 集群的行动范围不应该太窄 适应性原则(Adaptability Principle), 集群能够在适当的时候改变自身的行为 邻近原则(Proximity Principle), 集群能够进行简单的空间和时间计算 品质原则(Quality Principle), 集群能够响应环境中的品质因子 集群智能应用 集群智能应用主要包括以下几个方面: 蚁群路由(Ant-Based Routing, 或直译为基蚂路由), 可用于处理类似电信通讯问题, 其核心思想还是基于强化学习, 网络本身涉及到很多特定网络包的转发和后馈, 这些网络包也可以称为蚂蚁, 从而导致整个网络洪化. 群体模拟(Crowd Simulations), 在电影产业中可以借助集群智能优化算法进行群体模拟. 人工群体(Human Swarming), 基于集群智能预测答案, 集结民智解决复杂问题. 集群文法(Swarm Grammars), 通过群体中不同个体得到不同结果, 应用如艺术或建筑等. 群体艺术(Swarmic Art), 群体不同个体行为、模式产生”百花齐放”、”百家争鸣”的艺术. 集群优化算法目前,集群智能主要有两种算法模式,分别是蚁群算法(Ant Colony System, 简称ACS)和粒子群优化算法(Particle Swarm Optimization, 简称PSO). 本文暂时不对这俩种算法展开详细阐述, 仅对优化算法中的Rastrigin函数进行说明. 在数学优化问题中, Rastrigin函数作为非凸函数, 在优化算法中常用于性能测试, 其公式如下: $ f(x) = A_n + \sum_{i=1}^n [x_i^2 -Acos(2 \pi x_i)]$ 假定$A=10$ 且$x_i \in [-5.12, 5.12]$, 当$f(x)=0$时在$x=0$拥有全局最小值. MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 集群智能牛刀小试利用PySwarms包可以在Python中很方便地实现集群智能算法, 不用再造轮子. PySwarms也可以更加高效地实现集群智能优化算法, 如粒子群优化算法(PSO), 特别是在以下方面很给力: 星拓扑 环拓扑 安装Pyswarms安装PySwarms很简单, 直接键入以下指令即可 1pip install pyswarms 下面, 我们可以检测下PySwarms是否安装成功, 如图, 检测代码运行无误说明PySwarms包安装成功. 牛刀小试 详细代码, 请参考如下:]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Swarm Intelligence</tag>
        <tag>Deep Learning &amp; Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Frameworks of Microservices In Java]]></title>
    <url>%2Fmicrosrvc%2Fnetflix-whole-sale-packages%2F</url>
    <content type="text"><![CDATA[微服务架构开发相关软件框架有很多, 为了避免重复造”轮子”, 本文将对微服务架构中常用到的软件框架进行小结. 服务注册和发现Eureka, 不仅可以用于服务注册和发现, 还可用于中间层的负载均衡. 服务通信Ribbon, 支持HTTP、TCP和UDP协议, 支持异步通信和响应式模型. Ribbon还具有缓存和批(Batch)特性, Ribbon可与Eureka结合使用进行负载均衡, 与Hystrix结合使用进行容错或熔断器操作. 熔断器Hystrix, 常用于容错和熔断器操作, 可防止错误拓展扩散, 实时监控服务和property变化, 支持并发. 代理服务器Zuul, 作为代理服务器或Edge服务器, 为外部应用提供服务, 如UI客户端、Android/iOS应用或其它第三方服务等. Zuul允许动态路由并监控请求, 支持验证. 构建Nebula, 如果你使用Gradle进行打包编译, Netflix Nebula插件是个不错的选择, Nebula插件允许你快速高效地对微服务进行编译打包, 该插件还可以减少很多Gradle模板代码. 分布式配置管理Archaius, 分布式配置管理工具, 通过Archaius, 你可以: 进行线程安全的配置操作 使用轮询框架检测Property变更 使用动态或静态类型Property 在有序的层级配置中使用回调 使用JConsole对Property进行审查或操作 在分布式环境中配置不同的Property 调度器如果你使用Mesos容器进行微服务部署, 可使用Fenzo作为调度器 部署交付Spinnaker/Aminator, 如果你使用AWS EC2, Animator可以构建AMI镜像, Spinnaker部署AMI镜像至AWS 可用性监控如果你的微服务部署至云端, 如AWS等, 可以考虑使用Simaian Army作为可用性监控工具, Simaian Army使用以下服务进行监控: Chaos Monkey, 该服务区分一组系统并随机中止组内一个系统, 一般运行在可控时间范围内, 如运行在工作时间以便工程师接到警报并响应. Janitor Monkey, 该服务找到没有用的资源并及时清理, 通过一些列给定规则进行资源清理. Conformity Monkey, 该服务调度可配置, 找到没有遵循预定义规则的实例, 发出通知给实例所有者. Security Monkey, 监控账号政策变更或不安全配置, 主要用于安全监控. 运维监控Atlas, 提供近实时监控信息, 可记录多维时序数据, 可拓展, 内存存储因而可以快速呈现大量Metrics报表. 远程主机监控Vector, 可在安装了PCP(Performance Co-Pilot)远程主机上进行性能监控, 便于对性能问题进行排查或更好地理解系统运行. AWS资源监控Edda, 可监控AWS资源动态变化, Edda通过使用AWS API对AWS资源进行轮询并记录结果, Edda主要特征如下: 动态查询, Edda提供了 Rest API, 支持矩阵参数及字段选择器进行数据筛选 历史变更, Edda维护AWS所有资源记录历史, 有助于进行问题排查. 多配制, 支持从多地区多账号轮询信息并行数据汇总, 支持不同的配置项如AWS、Crawler、Elector以及MongoDB等. Why Netflix全家桶?可能你已经发现了, 貌似上面大多数软件框架都是Netflix的. So, Why Netflix全家桶? Well, Netflix虽然是一家以在线流视频为主营业务的科技公司, 但是该公司在响应式编程(Reactive Programming),JVM性能优化方面一直走在前面, 比如大名鼎鼎的RxJava, 最早由Netflix推出并开源, 然后影响了大批JVM攻城狮, 并在Akka几位创始人的推动下组织Reactive Manifesto并发布宣言, Reactive Manifesto宣言无论对于后端开发还是分布式系统开发, 均具有深远影响. The part above should be the end of this post. God, D**N it, sometimes I hate myself. Since this post was on Netflix’s Microservices whole-sale packages, I got my story to be told. The interpreting language of this post usually goes with Chinese (Since this is the offical language of the Dynasty of Heaven (“大天朝”官方语言)), check it below.个人接触Nexflix “全家桶”纯属意外, 曾经比较关注Akka, 然后从Akka CTO Roland Kuhn博士(德国人, 现在自己开公司, 于是便成了Akka前CTO)那里接触到Reactive/Reactive Manifesto, 接着RxJava, 最后Netflix进入眼帘, 自然地, Netflix微服务 “全家桶”必不可少. Since this little story went behind Akka, there’re something you need to know about Akka (Trust me, you should not be biased enough especially if you’re in China). Like, Akka provides多并行、并发原语支持, 如共享内存Agent(类似于Clojure中Agent), 并行数据结构如CRDT(请不要认为Akka只有Actor, Future/Promise)分布式设计模式, 如Event Sourcing/Event Stream/CQRS/Saga 分布式建模设计, 如DDD(领域驱动设计, Domain Driven Design)/DDDD(分布式领域驱动设计, Distributed Domain Driven Design)流式处理, High Watermark(高压水印)、Backpressure并非Apache Flink的”独创”、Flink也并非这方面处理的”集大成者”系统集成, 类似于OSGI/Apache Karaf系统集成模块分布式组件二次开发, 大数据热门组件如Flink(依赖Akka Cluster进行内部通信)、Spark(源码使用Akka Actor进行了很多封装处理, 如使用Akka进行RPC调用等)至今仍给人以震撼. If you used to be a user of Akka, you should be familiar with these patterns: Circuit Breaker, Saga, Event Sourcing, CQRS (These patterns are common in Microservices), even with DDD(Domain Driven Design).The whole text should be in Chinese(the offical language of the Dynasty of Heaven (“大天朝”官方语言)), but this language requires EXTREME SIMPLICITY、POINT-STRIKEN . So, all my points were clear in this language. And this’s it, thank you for reading.]]></content>
      <categories>
        <category>Distributed System</category>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang大法玩转人脸识别]]></title>
    <url>%2Fgo%2Fface-detection%2F</url>
    <content type="text"><![CDATA[本文要点如下: 首先, 简单介绍下人脸识别相关概念 然后以Golang为例, 对人脸识别相关算法进行编码实战. 常见的人脸识别或人脸检测算法, 经典的有以下几种, 本文将以Golang为例, 教你如何玩转人脸识别 以深度学习神经网络为主的CV算法, 如CNN(卷积神经网络) Viola-Jones算法(VJ算法) PICO 算法 在玩转人脸识别算法前, 首先简单了解下人脸检测的一些基本概念. 人脸检测为了检测面部或识别人脸, 首先要了解人脸是什么, 典型的人脸有两只眼睛,一只鼻子和一张嘴. 但拥有这些特性并不足以定义人脸, 狗也有两只眼睛,一只鼻子和一张嘴. 仔细思考下什么是人脸, 我们本能地知道一张脸是什么, 但真正量化一张脸的构成确实有难度. 我们经常在影视上看到侦探利用数据库中数据进行人脸识别, 通常你会看到用点和线绘制的面孔. 这些点和线主要归功于20世纪60年代Woodrow Bledsoe、Helen Chan和Charles Bisson的成果, 他们是第一批研究自动化人脸检测的人. 人脸的标准特征—面部发际线、眉毛、眼睛、鼻梁、嘴巴等都是动态可定义的, 即这些特征是相对可测量的, 但这使得自动化人脸检测更具挑战性. 他们的解决方案很新颖: 使用设备(这些设备相类似于现在的平板电脑绘图)注释眼睛、鼻子、嘴巴和其他脸部特征位置, 然后将这些注释之间距离作为脸部识别的特征, 除了更加自动化外, 与现在的做法没有什么特别大的区别, Bledsoe、Chan和Bisson在量化像素以及如何构造人脸特征方面付出了很多努力. 人脸检测的难点人脸检测复杂而具有挑战性, 其主要的难点有两方面: 人脸内在变化导致： 人脸具有相当复杂的细节变化,不同外貌如脸形、肤色等,不同表情如眼、嘴的开与闭等 人脸的遮挡,如眼镜、头发和头部饰物以及其他外部物体遮挡等； 外在条件变化所引起： 由于成像角度的不同造成人脸多样性,如平面内旋转、深度旋转以及上下旋转,其中深度旋转影响较大 光照的影响,如图像中的亮度、对比度的变化和阴影等. 图像的成像条件,如摄像设备的焦距、成像距离,图像获得的途径等. VJ人脸检测算法21世纪初, Viola和Jones提出了一种非常快速的物体检测方法, Viola-Jones算法比较通用, 可以检测任何物体, 但主要用于人脸检测. Viola-Jones算法核心在于使用了许多小分类器,以分阶段方式对图像区域进行分类, 这些分类器也称级联分类器. 级联分类器由许多小分类器组成, 每个分类器由多个过滤器组成, 为检测面部, 首先从图像的一小部分(或者可称为窗口)开始, 逐个运行分类器. 如果分类器中所有过滤器的结果总和超过分类器预定义阈值, 则认为它是面部的一部分. 然后, 级联分类器移动到下一个分类器进行迭代, 迭代完所有分类器后, 窗口滑动到下一个像素, 然后重新开始该过程. 如果级联分类器中部分分类器不能对某些区域进行人脸识别, 则抛弃对应区域并滑动窗口. 过滤器通过检测人脸的亮区和暗区进行脸部识别, 如眼睛周围区域通常是凹陷的, 是暗区, 如果对该区域使用过滤器, 只会突显眼睛. 用于眼睛的分类器具有多个过滤器, 鼻子的分类器具有针对于鼻子的多个过滤器. 在级联分类器中, 可以自定义优先度, 如可以将眼睛定义为人脸最重要部分(眼睛是灵魂的重要窗户), 级联分类器首先对眼睛区域进行分类, 如果检测到眼睛, 便接着再寻找鼻子、嘴巴等, 否则滑动窗口. Viola-Jones算法另外一个优势在于可以处理图像金字塔(Image Pyramid). So, What’s the image Pyramid? 假如你有一张图片, 1024x768像素, 图片上有两个不同尺度的人脸—有人离镜头近距, 有人远离镜头,你可能会意识到远离镜头的人脸较小, 问题在于如何检测这俩不同尺度的人脸? 可以设计多个过滤器, 如果多次调整图像大小, 则可以重复使用相同的过滤器, 而非增加过滤器, 用于检测小脸的过滤器不会检测到大脸. 基于分辨率,分类器将检测较小的人脸, 然后调整图像大小以使分辨率变低, 如640 x 480, 使大脸很小, 小脸变单点. 总的来说, 分类器会检测到图像中所有人脸, 因为可以直接调整图像大小, 所以即便是较小图像中的坐标也可以轻易转换成原始图像中的坐标, 便于”小脸”检测直接转换为原始比例的人脸检测. 与卷积神经网络(CNN)有些类似, 在CNN算法中, 可将多个过滤器应用于子区域, 从而产生滤镜图像, 然后将过滤图像传给reduction layer(通过max pooling或其他方法). CNN算法优点在于学习过滤器, 实际上每个CNN第一层学习的过滤器与Viola-Jones方法中使用的过滤器非常相似. Viola-Jones算法与CNN, 对比如下: 主要的相似之处在于Viola-Jones基本上使用滑动窗口且对图像部分运用过滤器, 这与CNN中的卷积相当. CNN优势在于能够学习过滤器, 而Viola-Jones方法中需手动创建过滤器. Viola-Jones算法具有级联分类器的好处: 如果其中一个分类器失败, 可以提前终止搜索对应区域, 以便节省计算资源. 受Viola-Jones算法影响, 有人开始使用多任务级联卷积网络进行联合脸部检测, 如使用三个神经网络以层叠方式识别人脸, 具体可以参考商汤科技张展鹏等人于2016发表的Paper. 将图像金字塔与CNN中池化层等同起来, 想法很前卫, 但并不准确, Viola-Jones算法中多尺度检测不失为一种巧妙的技巧, 但CNN中pooling layer池化层可以学习更高阶特征, 如眼睛、鼻子和嘴巴, 而Viola Jones算法并不能. 那是否意味着CNN算法更佳, CNN通过识别眼睛、鼻子和嘴巴作为特征来检测人脸的方式, 而非基于像素的过滤器模式. 使用Viola-Jones算法的理由在于, 算法本身容易理解且可使用的库和包很多(大多数包在算法优化方面做得很不错), 并且比基于深度学习的模型更快(虽然牺牲了灵活性). 缺点在于: 大多数Viola-Jones模型仅支持正面脸部检测 此外, Viola-Jones算法可能无法检测到旋转脸部 具体使用哪种算法更佳, 取决于具体业务应用逻辑, 有时可能无需用到神经网络算法(如CNN). PICO 算法还有一种算法是基于像素强度(或像素亮度)对比的物体检测(PICO, Pixel Intensity Comparison-based Object detection)算法,最初由Markus,Frljak等人于2014年提出. 该算法运用与Viola-Jones方法相同的广义原则, 仅有一个级联分类器. 它们的区别在于, 首先PICO算法不使用滑动窗口; 其次, PICO算法使用的级联分类器与Viola-Jones的分类器并不相同. Viola-Jones算法通过重复应用过滤器, 然后对分类器结果求和, 而PICO算法使用决策树. 决策树中每个节点都是特征, 且特征分支由阈值决定, 决策树适用于照片中的每个像素. 对于每个像素而言, 将强度与其它位置的另一像素强度进行对比, 这些像素位置服从正态分布, 无需使用滑动窗口. PICO方法分类器能够直接检测图像的脸部, 使得算法非常快. 当然, PICO算法依然可以看到Viola-Jones算法的痕迹: 首先, 分阶段应用分类器. PICO使用更简单的分类器, 有助于消除脸部低概率区域. 其次, 缩小搜索区域并使用更复杂分类器. PICO算法重复该过程直到最后一个Stage, 并保留每个分类器结果以便后用. 你可能会意识到人脸区域被更多的分类器搜索, 也正由于此, PICO算法提出者在分类器中引入了聚类步骤. 规则很简单: 如果分类器搜索区域重叠且重叠百分比大于30％, 则认为它是同一聚类中的一部分. 因此, 即便是很小的变更, 鲁棒性依然不错. 编码实战问题来了, 是PICO算法人脸检测效果好呢, 还是以OpenCV为主的算法人脸检测效果好? 可以做个小测试, 下面对PICO算法(采用PIGO包)和GoCV(OpenCV的Golang封装)算法进行Bechmark测试, 代码如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport ( "image" "testing" pigo "github.com/esimov/pigo/core" "gocv.io/x/gocv")func BenchmarkGoCV(b *testing.B) &#123; img := gocv.IMRead("test.png", gocv.IMReadUnchanged) if img.Cols() == 0 || img.Rows() == 0 &#123; b.Fatalf("Unable to read image into file") &#125; classifier := gocv.NewCascadeClassifier() if !classifier.Load(cascadeFile) &#123; b.Fatalf("Error reading cascade file: %v\n", cascadeFile) &#125; var rects []image.Rectangle b.ResetTimer() for i := 0; i &lt; b.N; i++ &#123; rects = classifier.DetectMultiScale(img) &#125; _ = rects&#125;func BenchmarkPIGO(b *testing.B) &#123; img := gocv.IMRead("test.png", gocv.IMReadUnchanged) if img.Cols() == 0 || img.Rows() == 0 &#123; b.Fatalf("Unable to read image into file") &#125; width := img.Cols() height := img.Rows() goImg, grayGoImg, pigoClass, cParams, imgParams := pigoSetup(width, height) var dets []pigo.Detection b.ResetTimer() for i := 0; i &lt; b.N; i++ &#123; grayGoImg = grayScale(grayGoImg, goImg) imgParams.Pixels = grayGoImg dets = pigoClass.RunCascade(imgParams, cParams) dets = pigoClass.ClusterDetections(dets, 0.3) &#125; _ = dets&#125; 效果如下, 从中可以看出, GoCV比PIGO算法慢, 一方面是cgo调用OpenCV影响, 另一方面也表明PICO算法要比最初的VJ算法快. 完整代码, 请参考这里]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Face Detection</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有必要对Java 8中Metaspace进行适当监控吗?]]></title>
    <url>%2Fjvm%2Fmetaspace%2F</url>
    <content type="text"><![CDATA[随着2014年Java 8的发布, JDK 8 HotSpot JVM开始引入Metaspace对类元数据进行内存分配, 这与IBM JVM、Oracle JRockit有些类似.Java 8中Metaspace开始引入了逃逸技术, 以便对JVM更好地进行性能优化. 有关逃逸技术, 本文将不做更多详细介绍, 有兴趣请自行Google或百度. 首先本文将简单介绍下JDK 1.8中Metaspace相关概念, 其次将对比当Java中类元数据对象溢出时Java HotSpot 1.7与1.8在运行时的一些行为差异. MetaspaceJava8引入Metaspace, 意味着持久代空间被完全移除, 若在新版本Java中使用类似于PermSize、MaxPermSize等JVM参数将被忽视并发出警告. Metaspace的引入, 意味着类似于之前持久代空间产生OOM内存溢出问题会相对少些, 但并不能完全排除类或类加载器内存溢出问题. 关于Metaspace内存分配问题, 需要注意的一点是用于描述类元数据的类已被移除. Metaspace容量 默认类元数据内存分配受限于可用Native Memory(影响因素有OS虚拟内存可用性、使用32位JVM还是64位JVM等) 可通过MaxMetaspaceSize参数限制类元数据使用的Native Memory大小, 如果没有指定该参数, Metaspace根据运行时应用需求动态调节 Metaspace 垃圾回收 一旦类的元数据使用达到MaxMetaspaceSize时, 触发对dead classes以及类加载器(Classloader)的垃圾回收 有必要对Metaspace进行适当监控及调优, 以降低GC频率, Metaspace GC频繁可能意味着类或类加载器内存溢出或应用内存不足等 Java堆(Heap)内存影响从旧版Java升级至Java 8时, 可能会注意到Java堆内存明显增大(有部分其它数据被移至Java堆内存所致). 测试下面看个小测试, 模拟Java类元数据内存泄露, 通过以下几个测试用例理解Metaspace在运行时的一些行为特性. Java类元数据内存泄露模拟逻辑如下: 12345678910111213141516171819202122232425262728293031import java.util.Map;import java.util.HashMap;import java.lang.reflect.Proxy;import java.net.URL;import java.net.URLClassLoader;public class ClassMetaDataLeakSimulation &#123; private static Map&lt;String, TestClass&gt; classLeakMap = new HashMap&lt;String, TestClass&gt;(); private final static DEFALUT_ITERATIONS = 5000; public static void main(String[] args) &#123; System.out.println("Class Metadata Leak Simulation"); int numIterations = (args != null &amp;&amp; args.length == 1) ? Integer.parseInt(args[0]) : DEFALUT_ITERATIONS; try &#123; for (int i = 0; i &lt; numIterations; i++) &#123; String classloaderJAR = "file:" + i + ".jar"; URL[] classloaderURL = new URL[] &#123; new URL(classloaderJAR) &#125;; URLClassLoader newClassLoader = new URLClassLoader(classloaderURL); TestClass t = (TestClass) Proxy.newProxyInstance(newClassLoader, new Class&lt;?&gt;[] &#123; TestClass.class &#125;, new TestClassInvocationHandler(new TestClassImpl())); classLeakMap.put(classloaderJAR, t); &#125; &#125; catch (Throwable any) &#123; System.out.println("ERROR: " + any); &#125; System.out.println("Done!"); &#125;&#125; 其中, TestClassInvocationHandler代码如下: 1234567891011121314151617181920212223242526272829import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class TestClassInvocationHandler implements InvocationHandler &#123; private Object testClassImpl; public TestClassInvocationHandler(Object impl) &#123; this.testClassImpl = impl; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; if(Object.class == method.getDeclaringClass()) &#123; String name = method.getName(); if("equals".equals(name)) &#123; return proxy == args[0]; &#125; else if("hashCode".equals(name)) &#123; return System.identityHashCode(proxy); &#125; else if("toString".equals(name)) &#123; return proxy.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(proxy)) + ", with InvocationHandler " + this; &#125; else &#123; throw new IllegalStateException(String.valueOf(method)); &#125; &#125; return method.invoke(testClassImpl, args); &#125;&#125; TestClass、TestClassImpl代码如下: 123456789public interface TestClass &#123; void method(String input);&#125;public class TestClassImpl implements TestClass &#123; public void method(String input) &#123; // 什么也不做 &#125;&#125; 测试一 - JDK 1.7 (64位)Test设定: 主程序5万次迭代, 堆内存设置为1G, PermGen内存设置为128MB( -XX:MaxPermSize=128m). JVisualVM截图如下, 在加载3万个类时, PermGen开始亏损. GC日志输出示意图如下: 测试二 - JDK 1.8 (64位), Metaspace动态调整Test设定: 主程序5万次迭代, 堆内存设置为1G, Metaspace默认. GC日志输出如下, 从中可以看到JVM Metaspace从20MB动态调节至328MB, 注意到程序本身有内存溢出, JVM只能动态拓展Metaspace内存空间. 测试三 - JDK 1.8 (64位), Metaspace大小固定Test设定: 主程序5万次迭代, 堆内存设置为1G, Metaspace设置为128MB( -XX:MaxMetaspaceSize=128m). 从下图可以看到, 当加载至3万个类时Metaspace开始出现损耗, 与JDK1.7测试有些类似. GC日志输出如下, 可以看到Metaspace预留内存(此时为246MB)是指定大小(122MB)的两倍左右, 意味着还存在调优空间. 结论有必要对Metaspace进行适当监控及调优, 避免Metaspace GC频繁或OOM(内存溢出)问题.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxJava中Backpressure处理小结]]></title>
    <url>%2Fjvm%2Frxjava-backpressure%2F</url>
    <content type="text"><![CDATA[RxJava, 作为一高性能异步、非阻塞、响应式框架, 最早由Netflix技术团队推出. 近些年伴随着Reactive(响应式)大热, Event Stream俨然不能解决广大开发者的难题, Reactive Stream开始走向”台前”. RxJava自诞生之日便开始服务于Netflix内部流式处理、后端服务Reactive优化, 经过Netflix内部层层考验, 顺利开源, 服务于广大社区开发者. RxJava支持Reactive Stream, 因而也对Backpressure处理方面有着不错的支持度. Callbacks &amp; ObserveOn当订阅者进行订阅时, 传入的Subscriber一般需实现onNext()、onCompleted()、onError()方法, 点开Subscriber源码, 发现还有一回调方法onStart(), onStart()在任何Event或通知委派至Subscriber前调用, 可以参考下面这段示例代码: 12345678910111213Subscriber&lt;Integer&gt; subscriber = new Subscriber&lt;Integer&gt; &#123; @Override public void onStart() &#123; // 指示上游数据源, 刚开始期望接收的Item数量 request(2); &#125; // onNext, onCompleted, onError 方法实现略&#125;Observable .range(1, 10) .subscribe(subscriber) 其中, 若在onStart()内部调用 request(Long.MAX_VALUE)或跳过调用request方法, 等效于尽可能快地请求事件, 因此在onStart()中尽可能早调用request方法, 否则下游数据开始消费时不能及时变更请求. 假定以Subscriber预先Buffer一定数量的Event, 然后在方便时请求一定的Chunk, Subcriber也可能在接收更多Events时等待一段时间、空闲一会儿(如为减轻下游压力). 但在客户端代码中调用request(N)比较少见, 一般位于Source和最终Subscriber间不同的Operator会充分利用Backpressure机制控制Pipeline中数据流. observeOn()操作符对Backpressure机制友好, 假定observeOn()操作符订阅上游的Observable, 调度接收的Event, 若上游Event生产速率与下游Scheduler及Subscriber消费速率匹配不上, 由于observeOn()操作符创建的Subcriber, 自带Backpressure机制, 仅请求一定数量的值, 而上游的Observable仅在达到一定数量的Events后触发. 当observeOn()发现当前Batch的Event被下游订阅者Subscriber成功处理完成, 会向上游数据源请求更多Events, 通过该种方式, 尽管跨越了线程界限、以及生产者和消费者间异步本质, 消费者并不会因此”泛洪”. ObservableBackpressure机制, 允许订阅者Subscribers及所有临时操作符从生产者请求一定数量的Event, 默认情况下上游的Observable尽可能快地生产Event, 但由于下游请求的出现, 在某种程度上会”拖慢”(Slow down)生产者, 以便生产者生产特定数量Event. 在RxJava中存在某一类操作符(Operator), 如 observeOn(), 使用比较严格, 如果上游Observable由于某些原因推送较多数据, 超出下游消费速率, 可能造成observeOn()内部 buffer溢出. 以下为一段示例代码: 12345678910111213Observable&lt;Integer&gt; customRange(int from, int count) &#123; return Observable.create(subscriber -&gt; &#123; int i = from; while (i &lt; from + count ) &#123; if (!subscriber.isUnsubscribed()) &#123; subscriber.onNext(i++); &#125; else &#123; return; &#125; subscriber.onCompleted(); &#125; &#125;);&#125; 可以通过取消订阅中止上面这段代码, 但现在要求不能取消订阅、可以”降速限流”. 下游操作符可以准确知道想要接收多少Event, 但上游源也可选择忽视请求. 为处理Backpressure问题, 上面的Range实现可改写如下: 12345678910111213141516171819Observable&lt;Integer&gt; customRangeBackPressure(int from, int count) &#123; return Observable.create(new OnSubscribeRange(from, count));&#125;class OnSubscribeRange implements Observable.OnSubscribe&lt;Integer&gt; &#123; // 略去构造器代码 @Override public void call(final Subscriber&lt;? super Integer&gt; child) &#123; child.setProducer(new RangeProducer(child, start, end)); &#125;&#125;// 自定义实现 Producer 具有挑战性 -- 须有状态、线程安全, 而且要快非常快class RangeProducer implements Producer &#123; @Override public void request(long n) &#123; // 在子订阅者上调用 onNext() 方法 &#125;&#125; 实际上, 由range()等其它操作符产生的Observable不再”eagerly”地去推送数据至订阅者Subscribers, 相反会去处理数据请求(如Subscriber内调用的request(N)), 然后开始生产事件, 当然产生的数据量不能远超请求数据量. SyncOnSubscribe通常有多种方式构造Observable支持下游Backpressure请求, 最简单的方式可以使用RxJava自带的工厂方法range() 或 from(Iterable&lt;T&gt;). from(Iterable&lt;T&gt;)方法创建的Iterable自带Backpressure机制, 这意味着Observable不会一次性从Iterable触发所有值. 以下代码, 将具有Backpressure机制的Observable封装JDBC中的ResultSet至一stream, 注意到ResultSet是拉取(Pull)方式, 与Observable有些类似. 123456789101112131415161718192021222324252627public class ResultSetIterator implements Iterator&lt;Object[]&gt; &#123; private final ResultSet rs; public ResultSetIterator(ResultSet rs) &#123; this.rs = rs; &#125; @Override pubic boolean hasNext() &#123; return !rs.isLast(); &#125; @Override public Object[] next() &#123; rs.next(); return toArray(rs); &#125; public static Iterable&lt;Object[]&gt; iterable(final ResultSet rs) &#123; return new Iterable&lt;Object[]&gt;() &#123; @Override public Iterator&lt;Object[]&gt; iterator() &#123; return new ResultSetIterator(rs); &#125; &#125;; &#125;&#125; 使用示例: 123456789101112131415161718Connection connection = // Some DB ConnectionPreparedStatement stm = Connection.prepareStatement("YOUR SQL HERE");stm.setFetchSize(1000);ResultSet rs = stm.executeQuery();Observable&lt;Object[]&gt; result = Observable.from( ResultSetIterator.iterable(rs) ) .doAfterTerminate(() -&gt; &#123; try &#123; rs.close(); statement.close(); connection.close(); &#125; catch (SQLException e) &#123; log.warn("Unable to close", e); &#125; &#125;); 注意到, 支持Backpressure机制Low-level级别可以通过自定义实现生产者(Producer)实现, 可以考虑使用RxJava中的SyncOnSubscribe, 其使用参考如下, 且下面这段代码中Observable.OnSubcribe基于拉取(Pull), 自带Backpressure支持. 12345678import rx.observables.SyncOnSubcribe;Observable.OnSubscribe&lt;Double&gt; onSubscribe = SyncOnSubcribe.createStateless( observer -&gt; observer.onNext(Math.random()) );Observable&lt;Double&gt; rand = Observable.create(onSubscribe); 上面这段代码中rand虽作为一普通的Observable, 但全面支持Backpressure机制, 假如Subscriber或Pipeline中其它Operator请求Events数量有限, Observable准许请求. rand无状态, 如需创建有状态的操作符, 可以参考下面这段代码: 1234567891011// 注意此处状态值不可变, 可以考虑使用BigInteger避免内存溢出Observable.OnSubscribe&lt;Long&gt; onSubscribe = SyncOnSubscribe.createStateful( () -&gt; 0L, (cur, observer) -&gt; &#123; observer.onNext(cur); return cur + 1; &#125; );Observable&lt;Long&gt; naturals = Observable.create(onSubscribe); 但如果想在迭代时使用单个状态变量, 也可以这样做: 1234567891011121314151617181920Observable.onSubscribe&lt;Object[]&gt; onSubscribe = SyncOnSubscribe.createSingleState( () -&gt; resultSet, (rs, observer) -&gt; &#123; try &#123; rs.next(); &#125; catch (SQLException e) &#123; observer.onError(e); &#125; &#125;, rs -&gt; &#123; try &#123; // 关闭Statement, 数据库连接等 rs.close(); statement.close(); connection.close(); &#125; catch (SQLException e) &#123; log.warn("Unable to close", e); &#125; &#125;); 小结 避免Subcriber中分配过多工作量, 可以考虑Off-loading对应的Work至如flatMap()等高阶函数中. 12345678910111213// 如在subscribe()方法中存储Events至数据库中source.subscribe(this::store);// 可以考虑让 Store更加Reactive (如返回存储记录的 Observable&lt;UUID&gt;)// 然后触发订阅并产生副作用source.flatMap(this::store) .subscribe(uuid -&gt; log.debug("Stored: &#123;&#125;", uuid));// 或者考虑使用批量的UUID减少日志输出产生的Overheadsource.flatMap(this::store) .buffer(100) .subscribe( hundredUuids -&gt; log.debug("Stored: &#123;&#125;", hundredUuids) ); 通过避免在subscribe()方法中执行长时间运行的任务, 可以减少Backpressure处理等.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>RxJava</tag>
        <tag>Reactive</tag>
        <tag>Backpressure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫谈云原生设计模式之熔断器、API网关、Service Mesh]]></title>
    <url>%2Fcloud-native%2Fsrvcmesh%2F</url>
    <content type="text"><![CDATA[云原生设计模式之熔断器、API网关、Service Mesh篇, 本文主要侧重客户端与服务端交互中常用的一些设计模式和技巧. 熔断器本文不打算对熔断器相关概念做详细介绍, 关于Circuit Breaker熔断器模式及相关描述请自行Google或百度. 本部分要点如下: 首先, 通过一个简单的Posts Service服务示例了解下熔断器, 接着通过压测了解下熔断器优点 其次, 通过Fallback方法对比, 小结熔断器性能优化建议 熔断器实现以Post和Connection Service为例, 通过使用熔断器对Post Service进行容错, 先创建一个 PostService 类, Post Controller本身还有其它逻辑在里边, 本例为简化,仅展示 PostsService 类中核心业务逻辑, Controller仍然处理请求解析、生成回复、以及一些基本的身份验证、授权逻辑等. PostsService 无需处理HTTP协议,只需关注服务核心逻辑即可,如数据库查询及生成响应对象等. 123456789101112131415161718192021222324// 通过 `HystrixCommand` 注解使用熔断器@HystrixCommand()public Iterable&lt;Post&gt; getPostsByUserId(String userIds, String secret) throws Exception &#123; logger.info(utils.ipTag() + "Attempting getPostsByUserId"); Iterable&lt;Post&gt; posts; if (userIds == null) &#123; logger.info(utils.ipTag() + "getting all posts"); posts = postRepository.findAll(); return posts; &#125; else &#123; ArrayList&lt;Post&gt; postsForUsers = new ArrayList&lt;Post&gt;(); String userId[] = userIds.split(","); for (int i = 0; i &lt; userId.length; i++) &#123; logger.info(utils.ipTag() + "getting posts for userId " + userId[i]); posts = postRepository.findByUserId(Long.parseLong(userId[i])); posts.forEach(post -&gt; postsForUsers.add(post)); &#125; return postsForUsers; &#125;&#125; 下面进行压测, 主要逻辑如上图所示, 客户端通过”重试风暴”直至接收回复, 在Post主服务中使用熔断器, 如果抛出大量错误立即熔断. 首先创建一个Kubernetes集群, 编写Bash脚本运行MySQL、Redis以及SCCS. 如下图所示, 主要设计部分如下: Connections’ Posts服务, 主要执行”重试风暴” Connnections服务, 标准连接实现, 弹性设计 Posts服务, 服务主逻辑与Controller进行分离, PostService中封装了熔断器 使用Jmeter进行负载测试 1234$ ./deploy-apps.sh ## 先部署再压测$ kubectl create configmap jmeter-config \ --from-file=jmeter_run.jmx=loadTesting/ConnectionsPostsLoad.jmx$ kubectl create -f loadTesting/jmeter-deployment.yaml 查看测试日志 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364$ kubectl logs -f &lt;name of the jmeter pod&gt;Waiting for possible Shutdown/StopTestNow/Heapdump message on port 4445summary + 85 in 00:00:10 = 8.1/s Err: 0 (0.00%) Active: 85summary + 538 in 00:00:30 = 18.0/s Err: 0 (0.00%) Active: 332summary = 623 in 00:00:40 = 15.4/s Err: 0 (0.00%)summary + 1033 in 00:00:30 = 34.5/s Err: 0 (0.00%) Active: 579summary = 1656 in 00:01:10 = 23.5/s Err: 0 (0.00%)summary + 1529 in 00:00:30 = 51.0/s Err: 0 (0.00%) Active: 829summary = 3185 in 00:01:40 = 31.7/s Err: 0 (0.00%)summary + 2029 in 00:00:30 = 67.6/s Err: 0 (0.00%) Active: 1077summary = 5214 in 00:02:10 = 40.0/s Err: 0 (0.00%)summary + 2520 in 00:00:30 = 84.1/s Err: 0 (0.00%) Active: 1325summary = 7734 in 00:02:40 = 48.2/s Err: 0 (0.00%)summary + 2893 in 00:00:30 = 96.4/s Err: 0 (0.00%) Active: 1500summary = 10627 in 00:03:10 = 55.8/s Err: 0 (0.00%)summary + 3055 in 00:00:30 = 101.8/s Err: 0 (0.00%) Active: 1500summary = 13682 in 00:03:40 = 62.1/s Err: 0 (0.00%)summary + 3007 in 00:00:30 = 100.2/s Err: 0 (0.00%) Active: 1500summary = 16689 in 00:04:10 = 66.7/s Err: 0 (0.00%)&lt;time marker 1 – I have broken the network between Posts and MySQL&gt;summary + 2510 in 00:00:30 = 83.6/s Err: 2084 (83.03%) Active: 1500summary = 19199 in 00:04:40 = 68.5/s Err: 2084 (10.85%)summary + 3000 in 00:00:30 = 100.0/s Err: 3000 (100.00%) Active: 1500summary = 22199 in 00:05:10 = 71.5/s Err: 5084 (22.90%)summary + 3000 in 00:00:30 = 100.0/s Err: 3000 (100.00%) Active: 1500summary = 25199 in 00:05:40 = 74.0/s Err: 8084 (32.08%)summary + 2953 in 00:00:30 = 98.4/s Err: 2953 (100.00%) Active: 1500summary = 28152 in 00:06:10 = 76.0/s Err: 11037 (39.21%)summary + 2916 in 00:00:30 = 96.9/s Err: 2916 (100.00%) Active: 1500summary = 31068 in 00:06:40 = 77.6/s Err: 13953 (44.91%)summary + 3046 in 00:00:30 = 101.7/s Err: 3046 (100.00%) Active: 1500summary = 34114 in 00:07:10 = 79.3/s Err: 16999 (49.83%)summary + 3019 in 00:00:30 = 100.7/s Err: 3019 (100.00%) Active: 1500summary = 37133 in 00:07:40 = 80.7/s Err: 20018 (53.91%)&lt;time marker 2 – I have repaired the network between Posts and MySQL&gt;summary + 2980 in 00:00:30 = 99.3/s Err: 2980 (100.00%) Active: 1500summary = 40113 in 00:08:10 = 81.8/s Err: 22998 (57.33%)summary + 3015 in 00:00:30 = 100.5/s Err: 3015 (100.00%) Active: 1500summary = 43128 in 00:08:40 = 82.9/s Err: 26013 (60.32%)summary + 3020 in 00:00:30 = 100.7/s Err: 3020 (100.00%) Active: 1500summary = 46148 in 00:09:10 = 83.8/s Err: 29033 (62.91%)summary + 3075 in 00:00:30 = 102.5/s Err: 3072 (99.90%) Active: 1500summary = 49223 in 00:09:40 = 84.8/s Err: 32105 (65.22%)summary + 3049 in 00:00:30 = 101.6/s Err: 2395 (78.55%) Active: 1500summary = 52272 in 00:10:10 = 85.6/s Err: 34500 (66.00%)summary + 3191 in 00:00:30 = 106.4/s Err: 2263 (70.92%) Active: 1500summary = 55463 in 00:10:40 = 86.6/s Err: 36763 (66.28%)summary + 2995 in 00:00:30 = 99.7/s Err: 1203 (40.17%) Active: 1500summary = 58458 in 00:11:10 = 87.2/s Err: 37966 (64.95%)summary + 3031 in 00:00:30 = 101.1/s Err: 1193 (39.36%) Active: 1500summary = 61489 in 00:11:40 = 87.8/s Err: 39159 (63.68%)summary + 3009 in 00:00:30 = 100.3/s Err: 1182 (39.28%) Active: 1500summary = 64498 in 00:12:10 = 88.3/s Err: 40341 (62.55%)summary + 3083 in 00:00:30 = 102.8/s Err: 859 (27.86%) Active: 1500summary = 67581 in 00:12:40 = 88.9/s Err: 41200 (60.96%)summary + 3110 in 00:00:30 = 103.7/s Err: 597 (19.20%) Active: 1500summary = 70691 in 00:13:10 = 89.4/s Err: 41797 (59.13%)summary + 2999 in 00:00:30 = 99.9/s Err: 0 (0.00%) Active: 1500summary = 73690 in 00:13:40 = 89.8/s Err: 41797 (56.72%)summary + 3001 in 00:00:30 = 100.1/s Err: 0 (0.00%) Active: 1500summary = 76691 in 00:14:10 = 90.2/s Err: 41797 (54.50%) 如图所示, Connections’Posts所有请求均失败, 通过日志输出,可以看到大约1分钟后出现第一个恢复迹象,完全恢复可能需要3到4分钟. 以上是含有熔断器的例子, 下面去掉熔断器, 主要实现和测试逻辑与上面类似, 作为对照组, 实验组和对照组结果对比如下: 组别 初次恢复耗时 完全恢复耗时 无熔断器 9 min 12-13 min 有熔断器 1-2 min 4-5 min Impressive? 但包含熔断器的实验组恢复时间为何这么快? 可以参考下图, 熔断器打开后, 并非每次重试连接都会超时,Connections’ Posts服务可快速收到Posts服务响应,状态码500清楚地表明存在问题. 对于对照组没有熔断器而言, 如果Posts服务面临故障, 客户端白白浪费时间等待回复;对于实验组而言, 当熔断器处于开着状态时, 若Posts服务面临故障, 客户端立即知晓将不会产生回复, 迫使等待时间最小化, 以增加整个系统的健康程度及可用性; 当实验组熔断器处于关闭状态时, 若Posts服务面临故障, 如果没有检测到故障,熔断器在关闭比前可以继续运行, 客户端可能会等待一段时间, 如果这种现象偶尔发生, 对整个系统影响较小, 如果经常发生则对整个系统影响较大. Fallback Or Not ?如下图所示, 很明显Fallback有助于弹性模式设计, 每种Fallback方法的上下文均不同, 如下图所示,对于客户端Connections’ Post服务而言, 多次重试失败可调用Fallback方法; 对于服务端交互而言, 重复多次失败后当熔断器开启时也可调用Fallback方法. 再来做个小测试, Hystrix对于熔断器提供了Fallback支持, 下面对熔断器中是否使用Fallback方法进行压测对比. 在 PostService 中对熔断器中增加Fallback支持, 代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041/** * Hystrix Fallback方法可以链起来(chained)使用, 例如主方法失败了, 可以调用fallbackMethodOne; * 如果fallbackMethodOne方法失败了, 可以将控制权给fallbackMethodTwo等, 依此类推. * 每次当Hystrix-protected Command返回错误时调用Fallback方法, 即使熔断器已经关闭. */@HystrixCommand(fallbackMethod = "getSponsoredPosts")public Iterable&lt;Post&gt; getPostsByUserId(String userIds, String secret) throws Exception &#123; logger.info(utils.ipTag() + "Attempting getPostsByUserId"); Iterable&lt;Post&gt; posts; if (userIds == null) &#123; logger.info(utils.ipTag() + "getting all posts"); posts = postRepository.findAll(); return posts; &#125; else &#123; ArrayList&lt;Post&gt; postsForUsers = new ArrayList&lt;Post&gt;(); String userId[] = userIds.split(","); for (int i = 0; i &lt; userId.length; i++) &#123; logger.info(utils.ipTag() + "getting posts for userId " + userId[i]); posts = postRepository.findByUserId(Long.parseLong(userId[i])); posts.forEach(post -&gt; postsForUsers.add(post)); &#125; return postsForUsers; &#125;&#125;public Iterable&lt;Post&gt; getSponsoredPosts(String userIds, String secret) &#123; logger.info(utils.ipTag() + "Accessing Hystrix fallback getSponsoredPosts"); ArrayList&lt;Post&gt; posts = new ArrayList&lt;Post&gt;(); posts.add(new Post(999L, "Some catchy title", "Some great sponsored content")); posts.add(new Post(999L, "Another catchy title", "Some more great sponsored content")); return posts;&#125; 重新压测 123$ # 停掉之前运行的压测, 重新部署并进行压测$ kubectl delete deploy jmeter-deployment &amp;&amp; ./deployApps.sh $ kubectl create -f loadTesting/jmeter-deployment.yaml 查看日志 1234567891011121314151617181920212223242526272829303132333435363738$ kubectl logs -f &lt;name of the jmeter pod&gt;Waiting for possible Shutdown/StopTestNow/Heapdump message on port 4445summary + 217 in 00:00:21 = 10.4/s Err: 0 (0.00%) Active: 171summary + 712 in 00:00:30 = 23.7/s Err: 0 (0.00%) Active: 419summary = 929 in 00:00:51 = 18.3/s Err: 0 (0.00%)summary + 1209 in 00:00:30 = 40.3/s Err: 0 (0.00%) Active: 667summary = 2138 in 00:01:21 = 26.4/s Err: 0 (0.00%)summary + 1706 in 00:00:30 = 57.0/s Err: 0 (0.00%) Active: 916summary = 3844 in 00:01:51 = 34.7/s Err: 0 (0.00%)summary + 2205 in 00:00:30 = 73.5/s Err: 0 (0.00%) Active: 1166summary = 6049 in 00:02:21 = 43.0/s Err: 0 (0.00%)summary + 2705 in 00:00:30 = 90.2/s Err: 0 (0.00%) Active: 1415summary = 8754 in 00:02:51 = 51.2/s Err: 0 (0.00%)summary + 2998 in 00:00:30 = 99.9/s Err: 0 (0.00%) Active: 1500summary = 11752 in 00:03:21 = 58.5/s Err: 0 (0.00%)&lt;time marker 1 – I have broken the network between Posts and MySQL&gt;summary + 3004 in 00:00:30 = 100.0/s Err: 0 (0.00%) Active: 1500summary = 14756 in 00:03:51 = 63.9/s Err: 0 (0.00%)summary + 2997 in 00:00:30 = 99.9/s Err: 0 (0.00%) Active: 1500summary = 17753 in 00:04:21 = 68.1/s Err: 0 (0.00%)summary + 3001 in 00:00:30 = 100.1/s Err: 0 (0.00%) Active: 1500summary = 20754 in 00:04:51 = 71.4/s Err: 0 (0.00%)summary + 3000 in 00:00:30 = 100.0/s Err: 0 (0.00%) Active: 1500summary = 23754 in 00:05:21 = 74.0/s Err: 0 (0.00%)summary + 3000 in 00:00:30 = 100.0/s Err: 0 (0.00%) Active: 1500summary = 26754 in 00:05:51 = 76.3/s Err: 0 (0.00%)summary + 3000 in 00:00:30 = 100.0/s Err: 0 (0.00%) Active: 1500summary = 29754 in 00:06:21 = 78.1/s Err: 0 (0.00%)summary + 2995 in 00:00:30 = 99.9/s Err: 0 (0.00%) Active: 1500summary = 32749 in 00:06:51 = 79.7/s Err: 0 (0.00%)&lt;time marker 2 – I have repaired the network between Posts and MySQL&gt;summary + 3005 in 00:00:30 = 100.2/s Err: 0 (0.00%) Active: 1500summary = 35754 in 00:07:21 = 81.1/s Err: 0 (0.00%)summary + 2997 in 00:00:30 = 99.9/s Err: 0 (0.00%) Active: 1500summary = 38751 in 00:07:51 = 82.3/s Err: 0 (0.00%) 其中, Time Marker 1表明了Posts服务与MySQL数据库断开时间, Time Marker 2表示重新连接, 如上所示, 即使在网络中断期间,对Connections’Posts的调用也从未失败过, 主要由于熔断器Fallback方法在Posts服务面临任意故障时的辅助作用. 比较有意思的一点是, 重建网络连接后实时返回内容的时间: 不到5秒.主要由于sleepWindowMilliseconds默认设置是5000,意味着熔断器由Half-Open状态转变为Open状态, 耗时5秒,此时,允许通过Post服务逻辑的试用请求成功,熔断器关闭,应用程序重新变为稳定状态.可以在其中一个Posts服务实例日志输出中看到此类转换: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545520:59:03.084 getting posts for userId 220:59:03.148 Attempting getPostsByUserId20:59:03.148 getting posts for userId 220:59:03.167 Attempting getPostsByUserId20:59:03.167 getting posts for userId 2&lt;time marker 1 – I have broken the network between Posts and MySQL&gt;20:59:03.213 Accessing Hystrix fallback getSponsoredPosts20:59:03.237 Accessing Hystrix fallback getSponsoredPosts20:59:03.243 Accessing Hystrix fallback getSponsoredPosts20:59:03.313 Accessing Hystrix fallback getSponsoredPosts20:59:03.351 Accessing Hystrix fallback getSponsoredPosts20:59:03.357 Accessing Hystrix fallback getSponsoredPosts20:59:03.394 Accessing Hystrix fallback getSponsoredPosts... (there are many more of these log lines)&lt;time marker 2 – I have repaired the network between Posts and MySQL&gt;... (another 5 seconds or so of Hystrix mentioning messages)(then, ...)21:02:33.705 Accessing Hystrix fallback getSponsoredPosts21:02:33.717 Accessing Hystrix fallback getSponsoredPosts21:02:33.717 Accessing Hystrix fallback getSponsoredPosts21:02:33.898 getting posts for userId 321:02:33.898 getting posts for userId 321:02:33.899 getting posts for userId 321:02:33.899 getting posts for userId 321:02:33.900 getting posts for userId 321:02:33.905 Accessing Hystrix fallback getSponsoredPosts21:02:33.911 Accessing Hystrix fallback getSponsoredPosts21:02:33.943 Accessing Hystrix fallback getSponsoredPosts21:02:34.080 Accessing Hystrix fallback getSponsoredPosts21:02:34.100 Accessing Hystrix fallback getSponsoredPosts21:02:34.113 Accessing Hystrix fallback getSponsoredPosts21:02:34.216 Accessing Hystrix fallback getSponsoredPosts21:02:34.225 Accessing Hystrix fallback getSponsoredPosts21:02:34.300 Accessing Hystrix fallback getSponsoredPosts21:02:34.368 Accessing Hystrix fallback getSponsoredPosts21:02:34.398 Attempting getPostsByUserId21:02:34.398 getting posts for userId 221:02:34.400 getting posts for userId 321:02:34.433 Attempting getPostsByUserId21:02:34.433 getting posts for userId 221:02:34.434 Attempting getPostsByUserId21:02:34.434 getting posts for userId 221:02:34.435 getting posts for userId 321:02:34.437 getting posts for userId 321:02:34.472 Attempting getPostsByUserId21:02:34.472 getting posts for userId 221:02:34.475 getting posts for userId 321:02:34.556 Attempting getPostsByUserId21:02:34.556 getting posts for userId 221:02:34.559 getting posts for userId 321:02:34.622 Attempting getPostsByUserId(and operation has returned to normal) 测试结果如下: 组别 初次恢复耗时 完全恢复耗时 网络中断时错误率 熔断器不含Fallback方法 1-2 min 4-5 min 100% 熔断器含Fallback方法 N/A—即使网络中断仍无故障 &lt;5s 0% 结论: “人生苦短”, 能用Fallback方法时尽量别犹豫, 毕竟在熔断器中多加层容错性保证, 有何不可. API网关开源以及商业API网关可用性早于微服务和云计算架构, 如早期Apigee(被谷歌收购)和Mashery(被英特尔收购后再出售给TIBCO)等公司均专注于API网关.API网关在软件架构设计上可以减少一些不必要的应用耦合, 提升开发效率, 以便开发人员可以更好地专注于业务逻辑. 另一方面, API网关在设计上, 便于中心化、统一管理, 便于维护. API网关可通过与其他服务交互执行具体职责, 如API网关本身无需存储需要进行身份验证和授权的用户, 但取决于身份识别、访问管理及ID存储等服务. 通常API网关设计上包含的服务有: 身份验证和授权, 通过API网关控制对服务的访问, 访问控制机制有多种, 如基于秘钥: 通过使用密码或Token信令; 或基于网络, 如服务集成或实现了防火墙. 数据加密, API网关可以处理解密,管理认证. 防止服务过载, 如果配置合理, 客户端只能通过API网关访问服务, 当然也可以通过节流进行保护 日志访问, 由于所有客户端请求均需通过API网关访问服务, 因此可以记录所有访问,便于后续日志排查、审计等. 如图, 该业务场景下的API网关包含验证授权、身份识别访问管理以及日志审计,客户端与服务通过API网关进行交互, 所有访问及政策变更可通过API网关记录, 以便进行验证、审计等. 云原生下API网关面临挑战虽然API网关已有多年历史, 但云原生架构的发展对API网关提出了新的要求, 如: 首先微服务数量级剧增, 如当拥有成千上万个服务实例时, 很难管理. 在突发事故以及定期升级时对服务实例进行频繁变更,在没有其他辅助软件帮助下, 很难对事件进行追踪并处理. 高度分布式系统中弹性模式应用,如重试机制,可能带来不同的服务负载,有些负载可能难以预测, 此时需要避免服务受一些极端请求影响或产生意外, 如可以通过熔断器进行容错等. 如云原生架构中基于计费的服务消费业务, API网关须支持必要的计量工作,有时还可能需要节流. 并行部署, 通过API网关可以很方便地实现路由逻辑, 对于后续安全升级具有重大影响 API网关部署拓扑一个中心化的网关在云原生有点反模式. 以前API网关通常进行中心化、集群化、组件式部署,但在云原生架构中已经发生了改变. 比如API网关分布式实现问题, 如下图所示, 由于管理需要,可以将网关视为单个逻辑实体. 注意到图中具有更多的服务实例, 倘若使用中心化API网关, 意味着所有服务交互均需通过API网关进行, 意味着可能需要处理流量过载问题; 若通过分布式处理,每个网关实例单独处理其服务负载, 便于追踪和排查. 常见的开源API网关, 如Netflix Zuul, 官方描述为”提供动态路由、监控、弹性、安全等服务.” Zuul可与Netflix微服务框架中其他组件结合使用, 如Hystrix(熔断器),Ribbon(负载平衡),Turbine(指标)等. Zuul,主要由Java编写, 常见配置项如URL配置等, 如为Posts服务配置网关, 需指定URL和端口等: 12zuul.routes.connectionPosts.url = http://localhost:8090/connectionPostsserver.port = 8080 如何在API网关拓扑中使用Zuul, 通常部署方式如下: 高度分布式环境中,建议部署方式如下: 实际上Spring Cloud为Zuul提供了一种嵌入服务的方式,类似于嵌入熔断器一样, 便于实现如上图所示的拓扑部署. 将网关嵌入到服务中具有一些明显的优点:网关和服务本身之间没有网络跳跃, 配置中可以不需要主机名,只需提供路径即可, 没有跨域资源共享问题(Cross Origin Resource Sharing, CORS)等. 但也存在一些缺点,如: 首先,灵活性问题, 比如配置文件application.properties中更改配置需要重新编译, 当然属性值也可以通过后续环境变量注入, 但仍需重启JVM(或至少刷新下应用上下文); 其次, 如果应用中需嵌入Java组件, 服务实现语言必须使用Java或其它JVM语言, 当然具体使用何种语言实现, 取决于项目团队及具体业务逻辑等; 最后, API网关模式的目的之一是将服务开发人员与运维人员的侧重点分离, 如为运维人员或运营人员提供控服务管理等, 嵌入意味着耦合. Service Mesh由于服务交互跨进程,甚至跨越网络边界,因此在分布式、云部署环境中需利用各种模式提供更加鲁棒性的软件实现, 以适应不断地需求变更. 常见措施有: 客户端重试及服务端熔断器实现,当然熔断器实现也可概括为网关模式, 值得注意的是,服务网格(Service Mesh)的兴起, 俨然成为了运行云原生应用程序平台中的重要组成部分. Service Mesh原语之Sidecar如何在分布式环境中实现API网关功能, 并避免嵌入Java组件带来的缺点, 解决方案可以考虑引入Sidecar(边车). 简而言之, 边车可与主要服务一起运行.网关服务可与其它服务一起运行, 但不一定是嵌入服务中,为了避免其被编译到二进制文件中, 网关边车须运行于另一独立进程中, 与运行的主服务进程分离. Kubernetes提供了一种抽象Kubernetes Pod, Pod是Kubernetes中最小部署单元, 可以包含一个或多个容器. 可以将主服务托管在一个容器中, 将网关服务托管在另一个容器中, 两者均运行于同一Pod中. 如图, 对于每项服务而言, 分布式网关作为边车运行, 在Kubernetes中一般通过在同一个pod中运行两个容器来实现, 一个运行主服务, 另一个运行网关边车. 每个容器均有自己的运行时环境, 因此主服务可以在JVM中运行, 而网关边车可以由C++实现. 但现在网关和主服务之间通信是进程间通信,甚至是跨容器通信, 这意味着网络跃点. 值得注意的一点是, 在Kubernetes Pod中运行的所有服务都托管于同一IP地址, 这意味着它们可以通过localhost寻址,因此网络跃点很小. 目前比较流行的Sidecar边车框架有Envoy, Envoy最初由Lyft公司开发,采用C语言编写, 分布式代理非常高效, 可以在各种部署拓扑中使用. 这里将Envoy描述为代理,而非网关, 因为Envoy不仅可以充当网关, 也可以充当客户端代理. 通过Sidecar编程交互, Envoy在交互实现了提供了很多便利, 如重试、熔断器、限流、负载平衡、服务发现、服务观测等. Control Plane如下图所示, Envoy代理通交互的通道相连, 看起来像一个网格,Service Mesh由此得名, 服务网格(Service Mesh)包含一系列互连的Sidebar,并由控制平面(Control Plane)管理这些代理. 目前Service Mesh使用广泛的框架有Istio,该项目由谷歌,IBM和Lyft孵化并开源, 对Kubernetes组件进行了拓展,使用pod原语作为Envoy Sidecars的部署机制. Istio自标”连接、安全、控制及观测服务”,通过支持自动边车注入并提供支持Envoy代理配置、验证处理及策略实施组件.]]></content>
      <categories>
        <category>Cloud Native</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Containers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rust大法试水NLP之命名实体识别]]></title>
    <url>%2Frust%2Fcrf-ner%2F</url>
    <content type="text"><![CDATA[命名实体识别作为自然语言处理(NLP)中重要一环, 有助于后续语义感知与语义知识库构建. 实体存在于文本中, 可以基于预定义范畴(通常这些范畴基于上下文语境或特定场景)进行分类. 目前比较流行的NLP相关算法思想, 主要分为以下两大流派:概率图模型(基于概率论和图论)基于人工神经网络的深度学习算法理论常见的概率图模型主要有:朴素贝叶斯模型隐式马科夫模型条件随机场模型最大熵模型 CRF(条件随机场, Conditional Random Fields)算法, 作为概率图模型中的一种, 可用于NLP语言模型设计, CRF算法也可用于命名实体识别. CRF算法基于历史标签的上下文信息进行分类, 标签中上文信息越丰富, 预测效果越佳. 有关CRF算法理论部分, 请自行谷歌或百度, 本文不再展开讨论. 为提高CRF算法效率, 通常需要对输入文本进行词性标注, 如将语句中的名词、动词、副词、介词等短语进行序列化标注, 这些序列化标注工作以前全靠人工手动标注, 但伴随着深度学习大热, 开始涌现一批自动化文本标注工具. 常见的开源文本标注工具, 参考如下: GATE, General Architecture and Text Engineering(通用架构与文本引擎), 老牌文本标注工具, 免费且开源 Brat, 基于在线环境的快速标注工具, 支持协作式文本标注 Anafora，免费, 开源, 基于Web的文本标注工具 准备数据集本文将使用Kaggle网站提供的一实体标记语料数据集进行CFR算法训练与预测, 该数据集包含以下等25项字段(由于字段太多, 仅挑出几个说明): lemma, 语句词元或词根 next-lemma, 语句下一词元 next-next-lemma, 基于上一词元接着出现的词元 word, 也称Token, 单词 tag, 当前Token的IOB标注 该实体标记语料数据样本参考如下: 代码实战代码主逻辑参考如下: 123456789101112131415161718pub fn main() &#123; let args: Vec&lt;String&gt; = env::args().collect(); let data_path = &amp;args[1]; // 首先, 进行数据解析与抽取 let data = extract_data(&amp;data_path).unwrap(); // 然后, 按照经典的Cross Validation思想进行迭代训练, // 对语料数据集进行分割, 主要分割为训练集与测试集 // 指定特征矩阵以及标签向量 let (test_data, train_data) = dataset_splitter(&amp;data, 0.2); let (xseq_train, yseq_train) = create_xseq_yseq(&amp;train_data); let (xseq_test, yseq_test) = create_xseq_yseq(&amp;test_data); // 进行CRF算法训练与预测, 并输出该算法主要评估指标--准确率 crfmodel_training(xseq_train, yseq_train, "model.crfsuite").unwrap(); let preds = model_prediction(xseq_test, "model.crfsuite").unwrap(); check_accuracy(&amp;preds, &amp;yseq_test);&#125; 完整代码, 请参考这里. 下面细分步骤进行说明, 对代码进行分解. 添加依赖首先新建一Rust项目, 参考指令如下: 1$ cargo new crf-named-entity-recognition --bin 进入该项目主目录, 在Cargo.toml中添加以下依赖: 123456[dependencies]csv = "1.0.7"serde = "1"serde_derive = "1"rand = "0.6.5"crfsuite = "0.2.6" 以上Crates中, crfsuite主要用于CRF算法训练与预测, serde与serde_derive处理数据序列化与反序列化, csv用于抽取语料样本数据, rand主要用于数据混排. 数据抽取由于语料数据集为CSV格式, 数据抽取方法参考如下: 123456789101112131415161718192021// 定义结构体`NER`, 该ADT(抽象数据类型或代数数据类型)主要用于描述语料数据集上每一行需要抽取的数据// 包括: 词根(或词元), 下一词元, 单词, 标签 (可以选取更多特征, 本文为了说明仅选用较少特征)#[derive(Debug, Deserialize, Clone)]pub struct NER &#123; //命名实体识别(Named Entity Recognition, NER) lemma: String, #[serde(rename="next-lemma")] next_lemma: String, word: String, tag: String&#125;fn extract_data(path: &amp;String) -&gt; Result&lt;Vec&lt;NER&gt;, Box&lt;Error&gt;&gt; &#123; let mut rdr = csv::Reader::from_path(path)?; let mut data = Vec::new(); for result in rdr.deserialize() &#123; let r: NER = result?; data.push(r); &#125; data.shuffle(&amp;mut thread_rng()); Ok(data)&#125; 数据集切分语料数据抽取完毕, 下面进行数据集分割, 主要分为语料训练集与语料测试集(在训练集上算法训练, 在测试集上进行算法预测), 代码参考如下: 123456fn dataset_splitter(data: &amp;[NER], test_size: f32) -&gt; (Vec&lt;NER&gt;, Vec&lt;NER&gt;) &#123; let test_size: f32 = data.len() as f32 * test_size; let test_size = test_size.round() as usize; let (test_data, train_data) = data.split_at(test_size); (test_data.to_vec(), train_data.to_vec())&#125; 指定CFR算法训练的Attribute(本例为词元及下一词元)矩阵与预测标签(本例为语料中的Tag, 标注字段)向量, 代码参考如下: 12345678910111213use crfsuite::Attribute;fn create_xseq_yseq(data: &amp;[NER]) -&gt; (Vec&lt;Vec&lt;Attribute&gt;&gt;, Vec&lt;String&gt;) &#123; let mut xseq = vec![]; let mut yseq = vec![]; for item in data &#123; let seq = vec![Attribute::new(item.lemma.clone(), 1.0), Attribute::new(item.next_lemma.clone(), 0.5)]; xseq.push(seq); yseq.push(item.tag.clone()); &#125; (xseq, yseq) &#125; 算法训练进行CRF算法训练, 代码参考如下: 123456789101112131415use crfsuite::&#123;Attribute, CrfError&#125;;use crfsuite::&#123;Trainer, Algorithm, GraphicalModel&#125;;fn crfmodel_training(xseq: Vec&lt;Vec&lt;Attribute&gt;&gt;, yseq: Vec&lt;String&gt;, model_name: &amp;str) -&gt; Result&lt;(), Box&lt;CrfError&gt;&gt;&#123; let mut trainer = Trainer::new(true); // AROW(权重向量自适应归一化, Adaptive Regularization of Weight Vector) trainer.select(Algorithm::AROW, GraphicalModel::CRF1D)?; trainer.append(&amp;xseq, &amp;yseq, 0i32)?; trainer.train(model_name, -1i32)?; Ok(())&#125; 上述方法中, 对权重向量使用Adaptive regularization(自适应归一化)算法, 除了该算法外, 其它备选算法参考如下: 基于L-BFGS方法的梯度下降算法, 可用于查找对象函数局部最小值, 充分利用对象函数值及梯度值 基于L2系数归一化的SGD, 结合了梯度下降及拥有L2系数的损失函数, 可避免数据过拟合 感知机均值法(Averaged Perceptron), 二分类方法, 使用包含权重均值及Bias的标准感知机算法 Passive Aggressive, 防止分类错误导致权重变更(Aggressive风格) 算法预测CRF算法预测, 参考代码如下: 123456789use crfsuite::&#123;Model, Attribute, CrfError&#125;;fn model_prediction(xtest: Vec&lt;Vec&lt;Attribute&gt;&gt;, model_name: &amp;str) -&gt; Result&lt;Vec&lt;String&gt;, Box&lt;CrfError&gt;&gt;&#123; let model = Model::from_file(model_name)?; let mut tagger = model.tagger()?; let preds = tagger.tag(&amp;xtest)?; Ok(preds) &#125; 算法评估算法评估, 打印准确率: 123456789101112131415161718fn check_accuracy(predicted: &amp;[String], actual: &amp;[String]) &#123; let mut hits = 0; let mut correct_hits = 0; for (pred, actl) in predicted.iter().zip(actual) &#123; if actl != "0" &#123; if pred == actl &amp;&amp; actl != "0" &#123; correct_hits += 1; &#125; hits += 1; &#125; &#125; println!("accuracy=&#123;&#125; (&#123;&#125;/&#123;&#125;) correct", correct_hits as f32 / hits as f32, correct_hits, hits);&#125; 效果检测运行上面代码, 进行CRF算法训练与预测, 迭代效果如下: 可以看到算法准确率为80.9%, 该算法还存在改进空间, 由于本例训练的数据集较小(大概1-2千项Record, 为了算法选型目的最开始使用小批量数据查看效果), 后续可以适当增大数据集, 改善算法质量.]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>Rust</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rust大法试水NLP之语义推断引擎构建篇]]></title>
    <url>%2Frust%2Finference%2F</url>
    <content type="text"><![CDATA[自然语言处理(NLP, Natural Language Processing)中, 意图识别与意图推断, 是语义识别模型训练中的重要一环. 本文将使用Rust语言构建一意图推断(语义推断)引擎, 考虑到迭代原因, 本文将使用Python进行意图模型训练, 然后通过Rust构建引擎, 调用训练好的模型进行意图推断. 意图模型为避免对已安装好的Python环境造成影响, 建议使用Python虚拟环境. 创建Python虚拟环境, 参考指令如下: 123$ virtualenv --python=python3 engine_env$ # 启用Python虚拟环境$ source engine_env/bin/activate 安装包依赖本文将使用snips-nlu包进行意图训练, 该依赖包安装指令参考如下: 1(engine_env) $ pip install snips-nlu 准备数据集下载对应的自然语言包(本文仅以英语为例)进行训练: 123(engine_env) $ snips_nlu download en(engine_env) $ # 或者下载所有支持的自然语言包(engine_env) $ python -m snips_nlu download en 准备语料样本(即样本语句与包含实体和意图的语义环境), 本文将以家居环境中灯控与温控为例, 进行意图训练与推断. 以下语料样本包含房间实体、灯控(开关灯)意图、温控(温度控制)意图及相关语句样本: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 开灯意图---type: intentname: TurnLightOnslots: - name: room entity: roomutterances: - Turn on the lights in the [room](kitchen) - give me some light in the [room](bathroom) please - Can you light up the [room](living room) ? - switch the [room](bedroom)'s lights on please# 关灯意图---type: intentname: TurnLightOffslots: - name: room entity: roomutterances: - Turn off the lights in the [room](entrance) - turn the [room](bathroom)'s light out please - switch off the light the [room](kitchen), will you? - Switch the [room](bedroom)'s lights off please# 温控意图---type: intentname: SetTemperatureslots: - name: room entity: room - name: roomTemperature entity: snips/temperatureutterances: - Set the temperature to [roomTemperature](19 degrees) in the [room](bedroom) - please set the [room](living room)'s temperature to [roomTemperature](twenty two degrees celsius) - I want [roomTemperature](75 degrees fahrenheit) in the [room](bathroom) please - Can you increase the temperature to [roomTemperature](22 degrees) ?# 家居(房间)实体---type: entityname: roomautomatically_extensible: novalues:- bedroom- [living room, main room, lounge]- [garden, yard, backyard] 假定上面的语料样本名为sample.yaml, 下面进行意图模型训练: 12(engine_env) $ # 生成训练数据集, 并适当转换数据格式(engine_env) $ snips-nlu generate-dataset en sample.yaml &gt;dataset-inference.json 模型训练进行意图模型训练, 参考指令如下: 1(engine_env) $ snips-nlu train dataset-inference.json snips.model -v 模型训练日志输出参考如下: 123456Create and train the engine...[INFO][23:16:51.091]][snips_nlu.intent_parser.deterministic_intent_parser]: Fitting deterministic parser......[INFO][23:16:57.294][snips_nlu.nlu_engine.nlu_engine]: Fitted NLU engine in 0:00:07.315197Persisting the engine...Saved the trained engine 构建引擎本节将使用Rust构建意图推断引擎, 可以通过snips-nlu-lib进行意图解析, 然后调用上文中已训练好的模型, 基于给定的语句输入进行意图推断. 本文将使用Rocket进行接口封装, 基于输入语句, 进行意图判定与预测并返回相关置信度. 添加依赖首先新建一Rust项目, 指令参考如下: 1$ cargo new reference_engine --bin 进入该项目主目录(reference_engine目录), 在Cargo.toml中添加以下依赖: 1234567[dependencies]snips-nlu-lib = &#123; git = "https://github.com/snipsco/snips-nlu-rs", branch = "master" &#125;rocket = "0.4.0"rocket_contrib = "0.4.0"serde = "1.0"serde_json = "1.0"serde_derive = "1.0" 接口封装本文接口调用的返回结果为JSON文本, 代码主逻辑参考如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// reference_engine/main.rs#![feature(proc_macro_hygiene, decl_macro)]#[macro_use] extern crate rocket;#[macro_use] extern crate rocket_contrib;#[macro_use] extern crate serde_derive;extern crate snips_nlu_lib;use std::sync::Mutex;use snips_nlu_lib::SnipsNluEngine;use rocket::&#123;Rocket, State&#125;;use rocket_contrib::json::Json;#[derive(Serialize, Deserialize)]struct Message &#123; contents: Stirng&#125;type Engine = Mutex&lt;SnipsNluEngine&gt;;fn main() &#123; rocket().launch();&#125;fn rocket() -&gt; Rocket &#123; let engine = init_engine(); rocket::ignite() .manage(Mutex::new(engine)) .mount("/", reoutes![bonjour, infer]);&#125;fn init_engine() -&gt; SnipsNluEngine &#123; let engine_path = "/path/to/snips.model"; println!("\nLoading The NLU Model..."); let engine = SnipsNluEngine::from_path(engine_path).unwrap(); engine&#125;#[post("/infer", format="json", data="&lt;message&gt;")]fn infer(message: Json&lt;Message&gt;, engine: State&lt;Engine&gt;) -&gt; String &#123; let query = message.0.contents; let engine = engine.lock().unwrap(); let result = engine.get_intents(query.trim()).unwrap(); let result_json = serder_json::to_string_pretty(&amp;result).unwrap(); result_json;&#125;#[get("/")]fn bonjour() -&gt; &amp;'static str &#123; "Bonjour, From Snips Model Inference!"&#125; 效果测试运行上面的Rust代码, 指令参考如下: 123456789101112$ cd reference_engine &amp;&amp; cargo run --release Compiling reference_engine v1.1.0 (...) Finished dev [optimized + debuginfo] target(s) in 39s Running `target/debug/reference_engine` Loading the nlu engine... ... Mounting /: =&gt; GET / (bonjour) =&gt; POST /infer application/json (infer) Rocket has launched from http://localhost:8000 接口测试: 12345$ curl --header "Content-Type: application/json" \ --request POST \ --data '&#123;"contents": "Please set the temperature to 25 degrees in the bedroom"&#125;' \ localhost:8000/infer$ 返回: 123456789101112131415161718[ &#123; "intentName": "SetTemperature", "confidenceScore": 1.0 &#125;, &#123; "intentName": "TurnLightOn", "confidenceScore": 0.08828778 &#125;, &#123; "intentName": "TurnLightOff", "confidenceScore": 0.070788406 &#125;, &#123; "intentName": null, "confidenceScore": 0.291604 &#125;,] 意图推断正常.]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>Rust</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rust大法试水NLP之语句分类与预测]]></title>
    <url>%2Frust%2Ffasttext%2F</url>
    <content type="text"><![CDATA[本文将使用Rust进行语句分类与预测. 准备数据集本文将使用Kaggle网站提供的惊悚小说作者鉴定文本数据集, 该数据集包含三大文豪(爱伦坡-Edgar Allan Poe-简称EAP, 洛夫克拉夫特-HP Lovecraft-简称HPL, 玛丽·雪莱-Mary W. Shelley-简称MWS)所著恐怖小说文本, 其中待训练数据集样本参考如下, 字段为: ID,文本及对应作者. 代码实战本节将使用Facebook开源的FastText进行模型模型训练与预测, FastText可用于学习语句分类与单词表征. 有关FastText安装, 请参考官方文档. 本文代码主逻辑参考如下: 12345678910111213141516171819202122232425262728293031// TRAIN_FILE: 训练集路径, 字符串常量// TEST_FILE: 测试集路径, 字符串常量// MODEL: 算法模型保存路径, 字符串常量// 以上参数也可考虑作为程序运行的传入参数传入const TRAIN_FILE: &amp;str = "./dataset/train.data";const TEST_FILE: &amp;str = "./dataset/test.data";const MODEL: &amp;str = "./dataset/model.bin";fn main() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; &#123; let args: Vec&lt;String&gt; = env::args().collect(); // 数据集输入路径 let path = &amp;args[1]; // 首先, 进行数据解析与抽取 let data = extract_data(&amp;path).unwrap(); // 然后, 按照经典的Cross Validation思想进行迭代训练 // 对数据集进行分割, 主要分割为训练集与测试集 let (test_data, train_data) = data_splitter(&amp;data, 0.2); // 建议将训练集与测试集写文件(或者使用缓存), 一为容错, 二是方便后续迭代 write_training_data(&amp;train_data.to_owned(), TRAIN_FILE)?; write_test_data(&amp;test_data.to_owned(), TEST_FILE)?; // 利用FastText进行算法训练 let mut ftxt_model = FastText::new(); model_training(TRAIN_FILE, &amp;mut ftxt_model); // 算法效果评估, 打印准确率(主要评估指标) check_accuracy(&amp;test_data, &amp;ftxt_model); ftxt_model.save_model(MODEL)?; Ok(())&#125; 完整代码, 请参考这里. 下面细分步骤进行说明, 对代码进行分解. 添加依赖首先新建一Rust项目, 参考指令如下: 1$ cargo new fbtext --bin 进入该项目主目录, 在Cargo.toml中添加以下依赖: 12345678910[dependencies]csv = "1.0.7"serde = "1"serde_derive = "1"rand = "0.6.5"fasttext = "0.4.1"stopwords = "0.1.0"vtext = "0.1.0-alpha.1"rust-stemmers = "1.1.0"itertools = "0.8.0" 以上Crates中, fasttext为Facebook开源FastText的Rust封装, serde与serde_derive处理数据序列化与反序列化, csv用于解析文本数据集, rand主要用于数据混排, vtext用于进行分词, stopwords主要用于移除停词(Stop Words), rust-stemmers主要用于对单词进行Stemming. 数据抽取数据解析与抽取代码, 参考如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465fn extract_data(path: &amp;String) -&gt; Result&lt;Vec&lt;SpookyAuthor&gt;, Box&lt;Error&gt;&gt; &#123; let mut rdr = csv::Reader::from_path(path)?; let mut data = Vec::new(); for record in rdr.deserialize() &#123; let rec: SpookyAuthor = record?; data.push(rec); &#125; // 对数据进行混排 data.shuffle(&amp;mut thread_rng()); Ok(data)&#125;//定义结构体`SpookyAuthor`, 该ADT(抽象数据类型或代数数据类型)主要对待训练数据集进行封装// 字段包括: ID, 文本, 对应小说作者#[derive(Debug, Deserialize, Clone)]struct SpookyAuthor &#123; id: String, text: String, author: String&#125;impl SpookyAuthor &#123; // 抽取标签(本例为对应小说作者) fn extract_labels(&amp;self) -&gt; String &#123; match self.author.as_str() &#123; "EAP" =&gt; "__label__EAP".to_owned(), "HPL" =&gt; "__label__HPL".to_owned(), "MWS" =&gt; "__label__MWS".to_owned(), l =&gt; panic!( "Not able to parse the target string. \ Got something else: &#123;:?&#125;", l) &#125; &#125; // 抽取Token文本, 即对文本进行分词、Stem、移除停词 pub fn extract_tokens(&amp;self) -&gt; String &#123; let text_lowercase = self.text.to_lowercase(); // Tokenize 分词 let tokenizer = VTextTokenizerParams::default().lang("en").build().unwrap(); let tokens: Vec&lt;&amp;str&gt; = tokenizer.tokenize(text_lowercase.as_str()) .collect(); // Stemming let stemmer = Stemmer::create(Algorithm::English); let tokens: Vec&lt;String&gt; = tokens.iter() .map(|tok| stemmer.stem(tok).into_owned()) .collect(); let mut tokens: Vec&lt;&amp;str&gt; = tokens.iter() .map(|tok| tok.as_str()) .collect(); // 移除停词(Stop Words) let stop_words: HashSet&lt;_&gt; = Spark::stopwords(Language::English) .unwrap() .iter() .collect(); tokens.retain(|tok| !stop_words.contains(tok)); tokens.iter().join(" ") &#125;&#125; 数据集切分数据抽取完毕, 下面进行数据集分割, 主要分为训练集与测试集,代码参考如下: 1234567fn data_splitter(data: &amp;[SpookyAuthor], test_size: f32) -&gt; (Vec&lt;SpookyAuthor&gt;, Vec&lt;SpookyAuthor&gt;) &#123; let test_size: f32 = data.len() as f32 * test_size; let test_size = test_size.round() as usize; let (test_data, train_data) = data.split_at(test_size); (test_data.to_vec(), train_data.to_vec())&#125; 将训练集与测试集写文件(或者使用缓存), 主要有两点: 一是为了容错, 二是方便后续迭代训练, 代码参考如下: 12345678910111213141516171819// 将标签和文本写入训练集fn write_training_data(train_data: &amp;[SpookyAuthor], file_name: &amp;str) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; &#123; let mut file = File::create(file_name)?; for item in train_data &#123; writeln!(file, "&#123;&#125; &#123;&#125;", item.extract_labels(), item.extract_tokens())?; &#125; Ok(())&#125;// 将文本写入测试集fn write_test_data(test_data: &amp;[SpookyAuthor], file_name: &amp;str) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; &#123; let mut file = File::create(file_name)?; for item in test_data &#123; writeln!(file, "&#123;&#125;", item.extract_tokens())?; &#125; Ok(())&#125; 训练集, 样本数据参考如下: 测试集, 样本数据参考如下: 模型训练利用FastText进行模型训练, 用于语句分类, 代码主逻辑参考如下: 12345678910fn model_training(train_file: &amp;str, ftxt_model: &amp;mut FastText) &#123; // 算法参数设置 let mut args = Args::new(); args.set_input(train_file); args.set_model(ModelName::SUP); // 设置损失函数, 本例为Softmax args.set_loss(LossName::SOFTMAX); // 算法训练 ftxt_model.train(&amp;args).unwrap();&#125; 算法评估对训练模型进行算法评估, 打印出准确率(主要评估指标), 代码参考如下: 123456789101112131415161718192021222324252627fn check_accuracy(data: &amp;[SpookyAuthor], model: &amp;FastText) &#123; let total_hits = data.len(); let mut predictions = vec![]; let mut labels = vec![]; for td in data &#123; let label = td.extract_labels(); let pred: Result&lt;Vec&lt;Prediction&gt;, String&gt; = model.predict(td.text.as_str(), 1, 0.0); predictions.push(pred.unwrap()); labels.push(label); &#125; let mut hits = 0; let mut correct_hits = 0; for (pred, lbl) in predictions.iter().zip(labels) &#123; let pred = &amp;pred[0]; if pred.clone().label == lbl &#123; correct_hits += 1; &#125; hits += 1; &#125; println!("accuracy=&#123;&#125; (&#123;&#125;/&#123;&#125;) correct", correct_hits as f32 / hits as f32, correct_hits, total_hits );&#125; 效果检测运行上面代码, 效果参考如下: 可以看到算法准确率为仅为50%左右, 存在改进空间, 主要原因在于数据集太小(整项数据集才4-5MB左右), 可学习的特征太少. 可以考虑扩充数据集, 适当增加文本特征, 提高算法质量. 下面查看下预测效果, 利用训练好的模型, 基于输入文本预测作者. (注意下面的Binary fasttext, 需编译安装, 具体步骤, 请参考Facebook FastText官方文档) 123$ ./fasttext predict ./dataset/model.bin - $ # 进入交互式文本输入, 文本输入完成后, 回车, 于下一行返回预测作者$ # 效果如下图所示, 基本预测准确]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning &amp; Machine Learning</tag>
        <tag>Rust</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lightweight Rust Microservices Framework]]></title>
    <url>%2Frust%2Fmicrosrv%2F</url>
    <content type="text"><![CDATA[轻量级Rust微服务框架介绍与小结. Hyper Crate在Rust开发中比较常见, 特别是Rust微服务开发中, 本文将介绍以下几种轻量级的Rust微服务Crates: Rouille Nickle Rocket Gotham 其中, Rouille、Nickel和Rocket均为同步框架, Gotham为异步微服务框架, 常见的异步微服务Crates有: Hyper Actix/Actix-web Gotham (内部使用Hyper和Tokio俩大Crate进行开发) Gotham简单看个例子, 使用Gotham创建一个简单的HTTP Route服务, 首先看下HTTP句柄Handler, 主逻辑如下: 123456789101112131415161718192021222324252627282930use gotham::handler::IntoResponse;use gotham::state::State;macro_rules! generic_handler &#123; ($($t:ident),*) =&gt; &#123; $( pub fn $t(state: State) -&gt; (State, impl IntoResponse) &#123; (state, stringify!($t)) &#125; )+ &#125;&#125;generic_handler!(index);pub mod products &#123; use super::*; generic_handler!(index);&#125;pub mod bag &#123; use super::*; generic_handler!(index);&#125;pub mod checkout &#123; use super::*; pub mod address &#123; use super::*; generic_handler!(create, update, delete); &#125;&#125; HTTP Route主逻辑如下: 12345678910111213141516171819202122232425262728// HTTP对应Route// / --&gt; GET, HEAD// products --&gt; GET, HEAD// bag --&gt; GET// checkout/address --&gt; POST, PUT, PATCH, DELETEfn router() -&gt; Router &#123; build_simple_router(|route| &#123; route .request(vec![Method::GET, Method::HEAD], "/") .to(index); route.get_or_head("/products").to(products::index); route.get("/bag").to(bag::index); route .post("/checkout/address") .to(checkout::address::create); route.put("/checkout/address").to(checkout::address::update); route .patch("/checkout/address") .to(checkout::address::update); route .delete("/checkout/address") .to(checkout::address::delete); &#125;)&#125; 开启Route服务: 12345pub fn main() &#123; let addr = "127.0.0.1:7878"; println!("Listening for requests at http://&#123;&#125;", addr); gotham::start(addr, router())&#125; 服务效果检测如下: RouilleRouille框架主要围绕router!该Macros构建, 路径和方法声明简单、实用, 其Routing声明与Hyper有些类似, 但更加简洁. Routile本身提够了很多实用的同步API, 每个请求均由线程池中线程处理. 同样看个简单例子, 编写一个简单的WebSocket服务, 将用户输入打印并在服务端记录, 代码如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#[macro_use]extern crate rouille;use std::thread;use rouille::websocket;use rouille::Response;fn main() &#123; println!("Now listening on localhost:8000"); rouille::start_server("localhost:8000", move |request| &#123; router!(request, (GET) (/) =&gt; &#123; // 本例仅为示例代码, 实际生产环境中需自行设计好Render页面逻辑 Response::html("&lt;script type=\"text/javascript\"&gt; var socket = new WebSocket(\"ws://localhost:8000/ws\", \"echo\"); function send(data) &#123;&#123; socket.send(data); &#125;&#125; socket.onmessage = function(event) &#123;&#123; document.getElementById('result').innerHTML += event.data + '&lt;br /&gt;'; &#125;&#125; &lt;/script&gt; &lt;p&gt;This example sends back everything you send to the server.&lt;/p&gt; &lt;p&gt;&lt;form onsubmit=\"send(document.getElementById('msg').value); return false;\"&gt; &lt;input type=\"text\" id=\"msg\" /&gt; &lt;button type=\"submit\"&gt;Send&lt;/button&gt; &lt;/form&gt;&lt;/p&gt; &lt;p&gt;Received: &lt;/p&gt; &lt;p id=\"result\"&gt;&lt;/p&gt;") &#125;, (GET) (/ws) =&gt; &#123; let (response, websocket) = try_or_400!(websocket::start(&amp;request, Some("echo"))); thread::spawn(move || &#123; let ws = websocket.recv().unwrap(); websocket_handling_thread(ws); &#125;); response &#125;, _ =&gt; rouille::Response::empty_404() ) &#125;);&#125;fn websocket_handling_thread(mut websocket: websocket::Websocket) &#123; while let Some(message) = websocket.next() &#123; match message &#123; websocket::Message::Text(txt) =&gt; &#123; println!("received &#123;:?&#125; from a websocket", txt); websocket.send_text(&amp;txt).unwrap(); &#125;, websocket::Message::Binary(_) =&gt; &#123; println!("received binary from a websocket"); &#125;, &#125; &#125;&#125; 服务效果检测如下: NickelNickel使用简单, 该框架主要受JS框架Express的影响, 非异步框架. 看个简单例子, 使用Nickel构建一个简单的模板渲染服务, 假定需要Rendering的模板如下: 1234567&lt;html&gt; &lt;body&gt; &lt;h1&gt; Bonjour &#123;&#123; name &#125;&#125;! &lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; Rendering服务逻辑如下: 1234567891011121314151617#[macro_use] extern crate nickel;use std::collections::HashMap;use nickel::&#123;Nickel, HttpRouter&#125;;fn main() &#123; let mut server = Nickel::new(); server.get("/", middleware! &#123; |_, response| let mut data = HashMap::new(); data.insert("name", "Deep Insight"); return response.render("assets/template.tpl", &amp;data); &#125;); server.listen("127.0.0.1:6767");&#125; 服务效果检测如下: RocketRocket充分利用Nightly Rust编译器特性, 将一系列Rust函数转变为一个完备的Web服务框架. Rocket通过环境变量和日志充当应用配置, 好处在于下次迭代时可以免去日志和配置代码编写, 坏处在于使后期调优和维护变得困难. Rocket在Rust社区曝光度较高, 以下是一段有关Rocket中MsgPack使用的示例代码: 1234567891011121314151617181920212223242526272829303132#![feature(proc_macro_hygiene)]#[macro_use] extern crate rocket;#[macro_use] extern crate serde_derive;#[cfg(test)] mod tests;use rocket_contrib::msgpack::MsgPack;#[derive(Serialize, Deserialize)]struct Message&lt;'r&gt; &#123; id: usize, contents: &amp;'r str&#125;#[get("/&lt;id&gt;", format = "msgpack")]fn get(id: usize) -&gt; MsgPack&lt;Message&lt;'static&gt;&gt; &#123; MsgPack(Message &#123; id: id, contents: "Hello, world!", &#125;)&#125;#[post("/", data = "&lt;data&gt;", format = "msgpack")]fn create(data: MsgPack&lt;Message&lt;'_&gt;&gt;) -&gt; String &#123; data.contents.to_string()&#125;fn rocket() -&gt; rocket::Rocket &#123; rocket::ignite().mount("/message", routes![get, create])&#125;fn main() &#123; rocket().launch();&#125; 测试代码如下: 12345678910111213141516171819202122232425262728293031323334use crate::rocket;use rocket::local::Client;use rocket::http::&#123;Status, ContentType&#125;;#[derive(Serialize, Deserialize)]struct Message &#123; id: usize, contents: String&#125;#[test]fn msgpack_get() &#123; let client = Client::new(rocket()).unwrap(); let mut res = client.get("/message/1").header(ContentType::MsgPack).dispatch(); assert_eq!(res.status(), Status::Ok); assert_eq!(res.content_type(), Some(ContentType::MsgPack)); // 消息为 `[1, "Hello, world!"]` assert_eq!(&amp;res.body_bytes().unwrap(), &amp;[146, 1, 173, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]);&#125;#[test]fn msgpack_post() &#123; // 消息为 `[2, "Goodbye, world!"]`. let client = Client::new(rocket()).unwrap(); let mut res = client.post("/message") .header(ContentType::MsgPack) .body(&amp;[146, 2, 175, 71, 111, 111, 100, 98, 121, 101, 44, 32, 119, 111, 114, 108, 100, 33]) .dispatch(); assert_eq!(res.status(), Status::Ok); assert_eq!(res.body_string(), Some("Goodbye, world!".into()));&#125; 如下图所示, 测试通过:]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Rust语言对Python加速]]></title>
    <url>%2Frust%2Fpyo3%2F</url>
    <content type="text"><![CDATA[本文将教你如何使用Rust语言对Python加速. 一直以来, Python都是LLVM生态的重度依赖者, 比如高性能的Numpy、OpenCV、甚至是Tensorflow等, 底层实现为均为C或C++, Python Binding在手, 代码”瞬间溜得飞起”. Why Rust问题来了, 为何不Pythonic点, 使用C或C++语言对Python加速即可. 而且Python本身有个CPython版本, 再不济也可考虑使用CPython, 当然也可考虑Pypy. 但是, CPython存在GIL(全局解释锁), 在并行性实现方面存在困难; Pypy虽好, 但生态方面比不及CPython, 有些Python包可能需要重写, 并不能直接使用. 至于C或C++语言加Python binding, 很不错, 毕竟Python社区也是这么过来的. 话说, 有没有考虑过以下几点: 系统安全性问题, Unsafe一直是C或C++语言”广为诟病”的问题, 毕竟有很多底层漏洞就是由于C或C++语言Unsafe导致 内存管理, C或C++语言没有自动垃圾回收机制, 需要手动进行内存管理, 作为C++或C语言开发者, 无疑是件很痛苦的事儿 面向过程、指令式思考, 面向过程思考问题很痛苦, 所以才有了OOP面向对象的兴起, 虽然C++也有OOP, 但C++复杂的语法一直”令人诟病” Rust语言, 类型安全、效率高, 一直是不少攻城狮心中完美的”C++”. So, Why not Rust ? PyO3简介PyO3开始作为rust-cpython的fork出现, 后来由于rust-cpython缺乏维护, PyO3开始在Rust社区流行, 现在PyO3与rust-cpython差别逐步扩大. 通过PyO3, 可以使用Rust语言对Python加速, 或者说可自行开发高性能的Rust程序, 然后通过PyO3导出, 以包的形式与其他Python代码交互, 由于导出包使用Rust语言开发, 在运行效率及性能上基本”完爆”同等Python实现模块. PyO3实战小测试下面, 看个小例子, 假定有这样一个需求: 有一堆字符串(假定可以逗号分割, 如”Letter,Kelly,Hope”等), 从中找出与给定前缀(如”Le”)匹配的单词列表. 很简单, 对不? 几行Python就可以搞定: 1234567def find_prefix_matched_words(text, prefix): ret = [] for w in text.split(","): w = w.strip() if w.startswith(prefix): ret.append(w) return ret 添加依赖以此为例, 说明如何使用PyO3. 首先, 新建测试项目并创建Python虚拟环境(建议使用Python虚拟环境, 对正常开发的Python环境影响少; 或者将Rust源码编译后的.so包放到Python模块中) 123456$ # 新建Rust测试项目$ cargo new prefix_case --lib$ # 创建Python虚拟环境$ virtualenv -p /usr/bin/python3.6 prefix_test$ # 启用Python虚拟环境$ source prefix_test/bin/activate 添加PyO3依赖, 在测试项目目录下的Cargo.toml中添加以下代码(PyO3版本可自行选择, lib中name可随意): 1234567[dependencies.pyo3]version = "0.8.1"features = ["extension-module"][lib]name = "words_prefix"crate-type = ["cdylib"] Rust编码实战对prefix_case/src/lib.rs进行Rust编码, 实现上面需求主逻辑: 12345678910111213141516171819202122232425262728use pyo3::prelude::*;use pyo3::wrap_pyfunction;#[pymodule]fn words_prefix(_py: Python, module: &amp;PyModule) -&gt; PyResult&lt;()&gt; &#123; module.add_wrapped(wrap_pyfunction!(find_prefix))?; Ok(())&#125;#[pyfunction]fn find_prefix(src: &amp;str, prefix: &amp;str) -&gt; PyResult&lt;Vec&lt;String&gt;&gt; &#123; let mut v = vec![]; let matched = src.split(",").filter_map(|s| &#123; let trimmed = s.trim(); if trimmed.starts_with(&amp;prefix) &#123; Some(trimmed.to_owned()) &#125; else &#123; None &#125; &#125;); for s in matched &#123; v.push(s); &#125; Ok(v) &#125; 逻辑很简单, 接下来要做的是将上述Rust代码导出为Python模块. 导出这里使用Maturin(旧称为pyo3-pack, 可以将PyO3、rust-cpython、CFFI binding或者含Rust binary的Crates编译打包并发布为Python包), 利用该工具将编译好的Rust代码发布至PyPI(Python Package Index), 安装Maturin命令如下: 1$ cargo install maturin 使用Maturin将上述Rust源码编译导出为Python模块, 1$ cd prefix_case &amp;&amp; maturin develop 脚本测试现在可以使用 words_prefix 模块了, 可在prefix_case目录下新建一个Python测试脚本, 测试脚本内容如下: 12345678910import words_prefix as pdef main(): words = "Letter,Kelly,Let,Hope,Leisly,Lopez" prefix = "Le" words_matched = p.find_prefix(words, prefix) print('The list of words: &#123;&#125; match the prefix - &#123;&#125;'.format(words_matched, prefix))if __name__ == '__main__': main() 效果 测试脚本运行无误, 导出模块能与Python代码正常交互.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Rust</tag>
        <tag>PyO3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二十行代码轻松搞定人脸识别]]></title>
    <url>%2Fdl%2Ffrecg%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX18veZpsqZR3Muy9b285IxGgyxgd8TOoVfnIZuWxG7LcqB2XAPb8Oh8kOGNMUzP6z5OXq6k5lQ96TbfM6rrI3MGtTSOt3isp6ZSYyWPRZygpn8A9oBFwjiF+zo1lIkDp2+wihGeYuY4orKQICQc/VrKRN90AQDafqMZGqVdz1tDyIITQG2mjrMXA5W+aRNple6cEeQHWN5UkjRL260xRFJJFVl2PEziArNbwc3onfbNCVgb7qnvxTkYcil+ysBPHvJZGxgxtQbWeL6m+RFf8mEAB8E+qDQOBmBbxyWahQnoNDBvXVm2DIcTXjQEG/TSeMu8kZP9hDUSJAF1Bpwj8wpcnJalz2OUaZ+vKCoXhskT3Pd2aQ4QCCLb3TsnOMd3X8X55vBRzrZt0+OS3X1hirAemBSjPLoKP+RDERIKQwuHYmJ23mW/ey2AwjTuDRvHO5HZX9DhRWqJ/nSF9YkrlcR2BBsjDqM1usx08M2O15AZNaSlqvLP6KU2BpasntNCy1S2XNirSbd3jlQ0seDGWazPhxaq/EQZctOoRjiqZXYcUIL5cD6HE4XUby0yzZvW2n8cRp8bBMPUSNWFcb3L3PJC2mGmayoYnKu88oVrHDig+2wv0ZdGmmp0DeWDFzEQwb01dvZ21GVnAxJJpOy8M5W6UdBlIk/kZEM8KRU2MouUNx+bkk9j7IH0DwmoqL/UHjT50UHdVxJisJ0/5Z5iiewONXJZLkKhZAau8N2TSdmh8SvOY9dSrgXGICExsgYjE/gaNR7T9nXtrtMGoTQHSbPqjuhAV9XLt2N7YXJhqEgBohe3ujkXXGNPqseImUGLfJ+FuMZro+OfExZwwg6flTXmpzS7fI6RCQhN0CV06B21NujRlD14B5etYmxiikNuvniuu8vRHUcBNgYpxEt9qF8qIQoDl6FrhRE6SOCYa5JiyvuRMol8N23qHOk5XJfu9jtGGCteonDd4zTDf5BGE5J48hgDWb4n50dWaqyvn74EPKIIZ1Kj4U1qlv4Qp0u/B3/x1LOTOFmk3YYJLIm/AVmfdE2wC9E7qas1LqhYq00Xr1hLC9Sn8QYg+SVTiB8we4FkDChQMu57WB9QGJdITn1MxDca0kWjpizu9OK4/FB6nLpwh/av9DEXJjTp6BN4AVkk5swZyNCn6nqGO2Kjq/2vPNWhFk+zZI85QFgBaXvdD8264inRmpSdIT8qnioMPNoASU6SEfReAraCfpWzO3xt/6oe7KmtRgq1p9Htdp3pujeYwrS8tQrbGyuFhpmbQ0KtZUiyjreFcMojT/mgO2Lnz3iw65clP6ybYy3lSp97uIyKWXXYpzKHWnvIyWw9xGrAg+kRN0SZBXZenDn6p3EzwUxARbP+gENFUA41QXhBGXsAjJvKxI4U9zZ9agXycrqn9C8tyxKjgqS3+OpDGA6bGI1yp6wmQLzCYoG2uzPzzumdCJabUSRXxdefiQmbGPJhXKJR+jT6FXtef2HFWQNmEeRc3Dyk4jGUUNIXb9PKvLb255H6RCNOGgtPOR1ECmxQ+sXY7kJSjwctFzjLlyfHgfXV1fHqcw4u/howwN+LToVGZebm8dO+0uCu41qo8TcPKEjU0aUfQN65LK8fF46ij+Iip92xJzRgtbejGcZBhOtLJocnNMOGGcvowHLygPzk9iezoz3fPxAf6u0bdiC/erLXFb4L/SE1ZZjDdnzeSfwvcFZ2Y2Dx1WyEYmlJc6CQ/p+LTZSsMTk+Bbr32FgC/SwQre4Fo+AoQ9z9vgrvy+fbiaEaXQ28bj4kjHJ+7et6ZSJY3rnNJO1EpITTZBMdJQKJA9p4tjqF6i751rQZMg8Cv/HUx52izC1CZZJ40aQOE15FDPbM2CENyXenjejs1Gumv0/8aW5/ZzOIKZeHIowNqFj/V1mmaj784q3D4VuTpUFrqEee0eJCsa12bbvvDirjvBzDnw78ccAhncb3yiBRW7wUXo6xOFwLFJ/aIDAek9+cCsKdoSVKlFuXZDbwV2iS6LRb+SUQbEAIqZnqOAB+O+vQ+rZre3JEWjJdNH3CJffn3g6f1EaHmCxX2nS1dm8JPPFkhC1sUHyo1TYomA60xNp26n8p+QyWcYAV03rWuQvhJNk81aRoEZvvR4X2RHXaNLHUiruqRPxv8nDb8RgVSfIcETYlZawG7b0pTP8g8xj2O9gj126sjD70nHun2GjavjzsZwVYk7Car5UDiDSlseS2n3DgOPqsVWA7vH+Y7hPtzJeA2DKtYmRnlp18/UPIeb42dAlF/9mgery6NOOqI43HE0AG5pwOcqHAcVNvQQCbBxGNWTnVfm6RpKfffFTlOSn+HBDY9XEW0lATPbWUx7uoQZHUOm+40CD/C8JoqQ7CKkd9m1YO425UY0Ww0IgdbUBl9AryAVSHBPQ05ws2R8mWYB4+4sWVl/0vIexiqrjhfoPUwsJPcR+cme8TdXxls5XxMtb5tXH1Yotg9LSxXS7CIaFA+nIauyOnNoXkeC97bh+qFAGUZpb84YrqnXSSWuW/A+cc8yo7EdeONzfZvB9GLOzqCd8bWAbw+daWVNOrvUktOEgVlZXklqjAHm/RrTw/7hI1YquFns/lAhu4qv2b8akYtTOUypz/jTmoFDge9keBt3buSuXVleyJU5h9cJqobloWYpQu1uM25sgmIBZjgmaEEuNNUeuWXbUODOC8O/AH4DOgvwAjxEzmxrEYPDXiE+GhME/qdic1gtZFgM5Bh+KnQ4TWouYhN+tKkYMvouiS5wA4uSb8cjARmuybcLO+eZTok85aS0SAXicXKesTeQkScW9+9UV71q/a8M8xR7Upe2SydouuybfyBQ09kXYgLZ1r3J+8l9yjD0m3Or3Wn9mT0MMjIBBP6loQ8Bi2GDJJy8M1Ajrm/o4vERWqM2KxFAKDykGLwG5auvU97k+dBf9+3KXDRmGU46SPincl7/EpgrmrqH6kbp0PvxCz8YUqxtkRG+qYV9igwqg7/UHQEMGtkVdGPc7x9wdUU+xaZiAMpxgzrXpHt7n60S1/d9MnyyRYR+gUMxh399dTzMCjve1r8OkjXEGbsxABvqmoDMO9cJMT6dXwFteHUL2rSARmp0ZMVVyumuBFCk6r6msu1slQZV04I8ajNqzxvdXXUccww0sA1s70en9VBq23EipzBb0wfIl6D9AKQBAp/RfwokRbKSOx+I/Lez8EtVoll6gpV8c5/LOqVeFbu+VwXPV2aeGDdRIfwsadO5+Qv0VcQHNxr1pB8xcneDCLqHoG8XX/66mFjfDR7HfIQ6SMr4p0a6WLG+PNH7+w3vKKqEg/NTktwAp7QUn3wT37RZzxzSJQeaul7lShiHkW5GnrsQk3mSt3JqveXP/KxxoS52iw+PlGZbDSfQxhbMoavrsRtr9FYmEHAWoW9qt7nM6FKd7WmAv6QnZ32rlH6tWpuUegrI/lSfAt7++jpABhjt09RFxn/kddvk9wu2N3LOqltm7SG2/7E4FAdAax/pxmzVMooqacYDfFyNC8/BEv77Xw+GcJJRJ+29C9LCR+29BWyQbRfD9CTVS3G6rZ/0uq7EHulRZvVbQKmR/HcPtOkFlc1OVw63tN2KZHt9iz+gamUjU3hoMsEaTAq10WlmWOET3VMFBNeD3mwhCU9zQn+Pol3qiJ1pGPqrccdE/+73WDI2Fvy9l+doYZZCU1aKZ7jBn+i/p8pA+wGVnRw79aEMpX0hJEk7UIZUvZNPr7TZKvJ5MkrRAjoXA9I7WFgjhj0Jmine0T238T8uEP2z08qs8+lYZAZbpGgraa3Nbx7kaVYFkmaEN+eU/NvB0bGpGuD+YNqHWHRzVmdFEA3MejfrhgtCuz8X5pOtad9GQNJQBZitb4IMC2xsk/fBEJ0ZMLrC7T3OIpsBlbHyml0zbrS7lyoQZLP+Q32h1ILKOESSoabkfHvTujvwKpd+GCdg2L5SIfukIh1p86VVUcYoaybpfIiAQs5BADajctxgX4wRrZgURDwFcuAMkSNbjIoCMjAnNMBlYP2SceI7BvYhufj9wRF5bcvoZHKe/u4mTIaLvxkkpKxijOtZEvtAGY29DkCtPQfJ7CKx7wcniGhOELMzYIbQcqg8EwYExaMdWUlKdqnYqP2NG5357htTSkm6c6WWTg2HEEgotuXnUaOH+7uulyyqj1alehmr69UXya40/G+w+7VLLncERzhdIfPqWX0Pe/gAjKJBL3lwBSZCSWBKjK85e4qI6KigCMxaLt0wwCQw0hVdgsd+CK7VD4QVCITe1egR5d5lFw7ATCEYrG3z7BfzhDycigHXXv4hWOY5Ru0NDKSR6872ghjpGzf5EWuSq99lFcXdyhUaoS3cTBjeNNrqev0YsaDy/LANf+htHg3qP1fAvQjvXgPZUmsgvolD1ZAF+ZsnIt5sEPI7MhKGWTWkIuj2wW+TLprzM4OumLlY/tNHi6IPOLNerJL5co2e8Zm/CCClLlMaP71B3ooQV2zlhvmSW7Rz1/hbPzj7Dsv8238TdDEKXHPxVXHAHndnnynwIub743so6Vi+e7CZkzz/dX5Kt/HEdNWUMJgyw20XBIjyQgGdt2qetmF/OUPS/UF5UeareHY8XihEHQHjCHRDlrsMeZafBbc4h1ORK9APiG8IWE8Wd1QGaM6OvvfDfAZOs3yYm+3wxW4NqTgJNLAridNEXEUQSR8owHfBEWGkX6/e3kz0xi14XLO2qBxBcS5Srjcv8/L60mqVeFWJARA301/Bm9Awj6qB/0KDLnQ3Ya2Oz0r4wlAcWAmsXXwzBFCfVOexONSB6HMhW4UDV77CTK39V1SVe0SuG0d1k3YeoEYsMLuK2nrLx6/x9UhuJjqoicnsM3c3S1oKXs2ehMlWpXfVKpb4qg8lw1wqMnY0K3XUbVCBr7f4M5NC5xqTKQOS3WlzLPwIJHx8CXmS3GpOJBKpKbAfnCDxC0SAc+DEurN47TDSZBtUHiZQBeGdC33AmreOfk+sKWk/8AjXxatbz55a9Am8It1e1y3yeNcgk9y6kJv6rffsgBV4Mxa7wN9qLYCf+nZonMfA/ZwPqv8MoveAgpSg7Vb0qtlc676Tx1dHK0mQeRRl+Tuvfz5gQjATMFRfb6SNG0rtdnKF5o0wASVvgUOlfGlXCyR7XVx4zvLM+ARcTtwSsZ2c9GyeBDLx848Pf7V+piYWF0yZolL+pz9ysxNUnvuONL8P1XQXssSjC1xpUkPBaEXRyN/3azqpWodJ6ScwwUGT9gyRfu0JFCuIOWdVwYukPDT6JZe1ViKfkdIiHGuCfett5nVnQoesN+60QIMU5fez5jSt9jRgsNiw8J9UTxMy/ZcYUqwLK4X/xMCfUX5ITqHx0bhbTziFkktRo91AH1k0BgyeLVkrg73oc+iKJ50uaeD0fsv2/zzZa0UZ813dwGq+WgmlF0jBnjBe48Ipock9f3y7hto1zza+qckjEbAGRA9S0bD1WKiI25QsSxojC5IxYdJHsdww9LOw7DIG6jeHbw8P4HW8JIN8j2i4uOS552+aqwRwzVSHRlqmElT0SMSD+p2wp7TiznULrYYF/MTG2K72026VyICr8sKE5fzi8JqKkQWIuKaTZ/ADIBOyoOISLaQhx8heEHPQUWTj7bqO1WakKTIRQiGlWCmBF/P38ixxerjQx9Y39GwtW6T043s6Zs5xI3EcrJSWw47H874wdThwI7VsFUP+Nz0SdlnnfvatRGlas8S7QNDA3yrEvJnKH9eFUYok2Z94uESpiJrECEXx3qL2X2tUlVziC6JBRyAdAwiwaLvbZ9/3NcjoCPbIN4V8MvVHV6HnmB4XrxQEikivQx/rLF3bFKrYT0UTpNiprSEVXhvmxLywNRrC8sHYD0NUZqL6PJ45Bpo9zrwbKGgryVOj8iv9Pl4gw9l3BCn9lY4ChZZBwcxVL5I/5xkBvBUHNKPyQrfa3myD8OV/G2aVI+4FPNUgqqAGOi1TzxgglX6IJIyCHef+epZZl0bQjqO84tr155OEExcQV1UdtOeNkvK5UD4SpK50ebC34qSQvdqoDp6UiLKmIMH7mLpv9UDf1t9dO7LDMvC1btdeZ2ukPO0XrQOc51eC0ydFFMjdhIKVh8ndglhvd5JeiWtgRW4QHfGA5LFDiNQ2Zn51KKGn9dum/xcCvRbFoua2KDNYezbGmGsT3eTyTlJncrYfShmqTGdEhImr/Y1FPWcDb7Bb1jmJ5lN5bb39Uf5XrtCBI5ljVkaDySO+lsUbBMZXDIan77zp9kE7paBPx6NDJgdgC6/LlobIBR33rOgI5Y9f5oITLrxvwtF6F2a1DGNAZxCEL0T7BL/nQWxjqk2UwM7J5j6xxAXMTmLAJLUonGi36hrGSjSR0HEd4p+Ve9nGVou1i/+3koa2eSu6KhYEKSS2kyta21+/bjLZnHzJCfFgL81cFSvpSOUsKUWD/xKAxk7pLJVARD5iHwmX6U17SHG1eSjIfyby64Gh/ug4Mx95pUqwuFz6bjBbqvuoDuYIl+IUXEZM+izsxoxM2mD5Ib8XxHNmyxKZO3gSa6lBjjm1UEd1L9ilaI4btMc2OkUtaubcai801ZVyTk2LIDU1HxYvNjpe4MSuQCF4F4Z66PrY7T254zMBHutL3FLPwMOSqEgJ90RAvMREuaVNPv7pTsTd7I1+sm4OUal+1OpJd5N3ljRdBVES08kGt7MuMQZC+iV076PWbIszNtR+ndCxtrkjV0MIkG3VHwIwN2c9jAuJwCPBg9OUCSmur2KqWxsPEee6Lzn0s8nPnvBaFh5UtGt8csxeTk0SkyyNNur0sHYPsdyEtlrRUkXds/rH41Jggcj7WUKDA4D+91gA5uUepH829OF7ZBJKllCaIyueWt61iLACxYB7XQIpDjHlblek3WsffN/5OwGBp+NdV1U+cWm64j6zsQL7VW5vOOP65kWkMeAMmihciR3FO70uC2+2Hj2ytyuJawq7TuaNmCHVi8bqsjJt0RpyqR7K2Q2PQoP3acwxwMoQkjmbJjpS8qFiZh2Cvkzgy9J0n99HK6EkfuZEp8GuDNPentrEjeKz3+KnH5TFIZgFlT80ttFEh48x/+RqcAnNaBgJVgE0g/aOddbdSyiWbf+MHEmyrk8GZ7djgBMgIlC9BKYSVTl1p86Ct7Q4hP7am0+0xZ19BiyIYujIipuEyv9JHIWghh5Brb3bW7PHb9Dp5ylR5JUOeg4AzZ04dQ6Y+bY var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Python</tag>
        <tag>Face Recognition</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang构造器注入初体验]]></title>
    <url>%2Fgo%2Fdependency-injection%2F</url>
    <content type="text"><![CDATA[依赖注入的目的是为了更好地进行解耦, 减少各模块间的耦合. 构造器注入作为依赖注入的一种表现方式, 有助于提升Golang代码的简洁性. 本文将简单介绍Golang中的构造器注入. 构造器注入问题来了, 什么是构造器注入? 假定存在以下一段业务代码: 123456789101112131415161718192021222324type WelcomeSender struct &#123; mailer *Mailer&#125;func (w *WelcomeSender) Send(to string) error &#123; body := w.buildMessage() return w.mailer.Send(to, body)&#125;func NewWelcomeSender(in *Mailer) (*WelcomeSender, error) &#123; if in = nil &#123; return nil, errors.New("We've encountered an error: mailer must be provided") &#125; sender := &amp;WelcomeSender&#123; mailer: in, &#125; return sender, nil&#125;func NewWelcomeSenderNoGuard(in *Mailer) *WelcomeSender &#123; return &amp;WelcomeSender&#123; mailer: in, &#125;&#125; 现在使用依赖注入进行解耦, 代码参考如下: 12345678910111213141516type Mailer struct &#123; Host string Port string Username string Password string&#125;func (m *Mailer) Send(to string, body string) error &#123; // Do Some Work Here return nil&#125;func (m *Mailer) Receive(address string) (string, error) &#123; // Do Some Work Here return "", nil&#125; 或者使用接口封装 1234567891011121314type MailerInterface interface &#123; Send(to string, body string) error Receive(address string) (string, error)&#125;// 如果只需发送邮件, 可以封装为发送接口type Sender interface &#123; Send(to string, body string) error&#125;func NewWelcomeSenderVersionTwo(in Sender) *WelcomeSenderVersionTwo &#123; return &amp;WelcomeSenderVersionTwo &#123; sender: in, &#125;&#125; 这样做的好处有: 代码自包含, 意味着如果代码存在任何Bug或其他变更仅影响该包 不再绑定于Mailer结构, 如果想更改Welcome Email为SMS, 只需将输入参数改为不同的Sender即可 方便测试, 无需工作邮箱服务器进行测试 结构类型Golang可支持鸭子类型(Duck Type), 但也存在以下几点问题: 对于鸭子类型(Duck Type), Runtime的兼容性是确定的; 但Golang在编译时进行检测. 对于鸭子类型(Duck Type)而言, 适用性基于被访问对象. 对于Golang而言, 这种类似于Duck Typing的注入也称结构类型(比如Scala, JavaScript等语言均支持结构类型). 结构类型作为一种动态类型系统, 基于类型结构在编译时确定适用性. 构造器注入好处 简洁可预测, 通过将依赖分配移到构造器, 可确保依赖在方法中可用. 比如将守卫(Guard)放到构造器中, 如果没有构造器, 每项方法不得不包含守卫(Guard), 否则将抛出空指针异常, 比如下面这段代码 123456789101112131415161718192021type Vehicle struct &#123; Engine Engine&#125;func (v *Vehicle) Run() error &#123; if v.Engine == nil &#123; return errors.New("Engine must be supplied") &#125; v.Engine.Start() v.Engine.MaximizePower() return nil&#125;func (v *Vehicle) Stop() error &#123; if v.Engine == nil &#123; return errors.New("Engine must be supplied") &#125; v.Engine.MinimizePower() v.Engine.Stop() return nil&#125; 将守卫(Guard)置于构造器中, 代码更简洁 123456789101112131415161718192021222324type Vehicle struct &#123; engine Engine&#125;func NewVehicle(engine Engine) (*Vehicle, error) &#123; if engine == nil &#123; return nil, errors.New("No Engine Supplied") &#125; return &amp;Vehicle&#123; engine: engine &#125;, nil&#125;func (v *Vehicle) Run() error &#123; v.Engine.Start() v.Engine.MaximizePower() return nil&#125;func (v *Vehicle) Stop() error &#123; v.Engine.MinimizePower() v.Engine.Stop() return nil&#125; 此外, 还有一个好处在于访问构造器依赖时没有数据争用(Data Race)问题. 因为构造器在构造阶段已经设定好,并不会变更. 封装, 简单举个例子, 假定存在以下方法 12345678// 不使用构造器注入, 实现机车加油方法func (v *Vehicle) FillIn(engine Engine) error &#123; if engine.IsRunning() &#123; return errors.New("Can't fill the tank while the engine is running") &#125; // 具体加油逻辑 return v.fill()&#125; 该方法暴露了实现细节, 如要求提供Engine参数. 可以通过构造器依赖进行封装 1234567func (v *Vehicle) FillIn() error &#123; if v.engine.IsRunning() &#123; return errors.New("Can't fill the tank while the engine is running") &#125; // 具体加油逻辑 return v.fill()&#125; 解耦, 有助于模块解耦 有助于进行代码质量检测, 根据单一责任链原则, 宜将对象或接口分解成足够细小部分. 如果单个对象或接口的依赖或责任链太多, 代码日趋复杂, 假定构造器中依赖过多, 容易产生代码质量问题. 易于实现]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Dependency Injection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang负载测试手札]]></title>
    <url>%2Fgo%2Fprofile%2F</url>
    <content type="text"><![CDATA[本文将使用pprof及开源的Benchmark工具Apache Bench对Golang进行Http服务负载测试. 工具包安装测试前需安装Apache Bench, 安装指令, 参考如下: 1$ apt-get install apache2-utils 测试代码Http服务负载测试代码, 参考如下: 12345678910111213141516171819202122232425// 假定源代码名为 prof.goimport ( "fmt" "io" "net/http" _ "net/http/pprof" "time")func main() &#123; Handler := func(w http.ResponseWriter, req *http.Request) &#123; waitForSomeWork(5) waitForSomeWork(10) io.WriteString(w, "Memory Management Test") &#125; http.HandleFunc("/", Handler) http.ListenAndServe(":1234", nil)&#125;func waitForSomeWork(timeDuration int) &#123; // 以休眠模拟需要等待的业务逻辑 time.Sleep(time.Duration(timeDuration) * time.Millisecond) fmt.Println("Sleep for ", timeDuration, "Milliseconds")&#125; 运行首先, 运行代码: 12$ # 假定以上代码, 文件名为 prof.go$ go run prof.go &amp; 生成Profile所需的Dump文件 1$ curl -s "localhost:1234/debug/pprof/profile?seconds=10" &gt; out.dump 使用Apache Bench进行负载测试(5000次请求, 并发度为10) 1ab -n 5000 -c 10 http://localhost:1234/ 利用生成的Dump文件, 进行Profile 12345$ go tool pprof out.dump$ # pprof(pprof) top10 # 查看TopN 样本(pprof) top10 -cum # 以累计值降序(pprof) ## 更多指令略]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSD与ResNet大法实战人脸检测]]></title>
    <url>%2Fdl%2Ffdtct%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19wY6E/xdk5+dXnTckE7U71YEHXEr/6Gbr7pynpOl1jHZXvix+EGObsiPrcVQJl5bPYwWcRZKQederHOZ5+xnSGEWQbGdOIWoZ9MjiNlFwfhto4r8KvS5Dwrucpsjozcilms65NnJMjAXJCWIPQR0yDHg2wDi/XMlaGxWgsK7mZwmDzE+Zhit6cJaqgVv+xNDIFUTXoL+s05U2D8ZtDEGhey3Qlex1hbGFSqw5IydF+BfN1YDFvUat6KUTUVXiJUSUhpS6OLYAAR3EjhOZpVTDNPKcQh5EYlBHb0Q8MdITMQRh2U1SV2wvONCTJS/SjqNV2JaxsCYKe1oOqpZ68eXXd7CmlW1FwXZrGk0wcu9CUr/SZyV02nCgBeNImVPB2SvM9jCRzYDpKkRSGUuNjlZTBxKmREai7YOp1QMkGGnDObEOsCB1Om8HjUZ1792V4wBue1qynwMJb4KZVipw71xqriGd4HhSmJx644JmfBwlGmYK1SRPwvaupUuPgCCRB/PXySmY/vr6U+JCJ3qt53FJ1zf1asfiDCerw7Z7Ne/26Uke2aOy2gBWytdaTpopEMjao4KqM2wosTqXwxz/Oe8HC6L2dXEZw5i5wnnTRBCopr9MBXIF/gvl7bpNu3XbIYp3G+EvVH4y+n9mW0Ww5NKjm/ChAEDNkgrgTRNGYmqQOcu79Z+C1pkwkKl+SwdYMMkrvxmuG0xzG39rs7pyvM08RHyubtrWiQdUXKVHPQ84ySd1+NL7GOrrG8kpfSf953VxmXnpduIR2mtX5b/XvtmZVzJPjpq1wyh0zI5OlLAjgNdcwEma9zapDC8nAYAylktpG3mlAFr+CPaVEle6IzDgZP0I9F839oNNWF515IsukJHBcewir3y5xfZ8fPBBBn+NAgToVaJSxaCd4azN/IOWL2awWOvnCHk8VIEakq4k4S9MqDHzmgcc5LSJiexQ5eVix8LLi/ZSsT8EHElcAokpoJoRKc80zeVYk8s0CYvH05izQ2bphQgM+NBWLO0+HQHFTKm2Rr3+ofrT0cHStdwfpiwF2+AacoHCIBk55r/6lFJXdGkF7QrEN6ItIJImW7TeSpajeWvWtk/VNdErS3n/KpCTUN0P93yLxrVfTFySSYbNkixcLbRDishVfj62iFknm2mGRMZaHJwaKmK4UutxGl/4WxHuJkiPi8JxJnfymS61vTqAJ7mBAB327N3ObXMYXVYTL9UrHlmKrcBk0EiQ8DAVr1RMIOlWKOsrrw51z32yULGldJS3+J5FKd9nneMe6KNpOtyDx2URQNF/ahH+mVrBul/BZ65nlboMpePfxvSB949Bflqi43z3Vixpz0GxGxBc4FTtvYJMgJ/vx05YlKtWrEbQZvP2WxYKssxxKXWnBZxz9olBxFRhCKPaZIwYYmSWnZ3sp2fmkZsv67hfs0vBlqK5TIvNPm8xaRG50LNwCIvf/CFtiBCw1Ie0qFvdFxujywlchaWNq9UZ8y9jlNfHoWCbFeshW+U0GGuT4CWufjbTluWmACKAP66hExfqfx/7a8AXFlFNTZkPkrc00xQ2Y/wUWncP6pdrBoW9qFOIX617AiM+Sl2nagEf6iv1Up9kA86OtRyLwD+1amR8jfDNSIDTrd5og8QCRicRWNOMI8Ki2oRpJVSNR+CPv7n2cAn8OtyqEa9Vgvgf0iNDO8teG1j7V1XcU0YmKdPIemOM1oY1kB5BcI2bcHJ5OEZzuKVDxvK7pn9wMYi4ukzYy+dW+ps848TkI6s33ep9aZ8ycXuXDZaf0Vgwn8inYP/u5i1CRxHVFwFS50EpWUQpzNIFGOHFTU6oj67eFgVzIkh1x2PYZbOeBN1DWpD3paDyGUz8LQnyv+xf//mFnoUwh/N7HtCHeF25clTuUlndskVUK2nr7yLX9e0X5PxvDxqommhz7c4lNezShPhG1LexvqkVVC6IxrM/gxSYFllxRGkF7X/vvT/iJRmNgV9NmsRTXOR7ZlV+TJlLmv+cwyLW56L4fXGNpObjdTqU5ukqEK9TzWWDLzHououRr3kkkkQ2kSdZxV6i3r1m94W+T+9cxX+4qPtNIznrFwXLBOJ3/I/v4bJ9w5CJCxibffclI5XEBslFW9990EPvYlxmlN1CyMYPxtoRp5p2hTSJmFeGkrlyH+BDXRvG3lvIfzRW6KO8SVcSB4PBYXpidVaUFAbaAXX3AfLCkTjgzuCYwBgeJZv24GmPZU8xzYtz3dDskPDjI5sSskCUspIZZ/U8l30yBOLY/alOcAdeOY/gbtJ7O2jWrViVAw2VOMVDjEw1pC2ZdKKQrJxqRE15t2CNmQVNyDUdCHd8FkJ9noIjvXK3VRVBmbPm3jnNMVrJHEPjUFazuqBQr8ZPva6F5SmNdWMpeid1E2SFbnRzADecghQjLfOb3y60IYFxq7Flcx4NwiEFJRBtQ5ERSNfy0o/48Wp+HTC9/WvXMLEnhWYUTgHM4fBTx3QeV9ZZKJHEZviJQDlo2LaihYvLlzTTB+yvfLZZnAu84sPu9kA3sgQ0f1vbi4YDEckWVxD7jKNp8vGeYlW1Mfd8ZFX9kf4JSy/57TP9KHwStanMmIm2PC0Pa6c/7xqaQFNBLM6HhbNLZ10OSbk/TQbe5C5yPsc1EfmyG6KJoAwMFH/fesDSR4KzboB+f9fByi1UqGUZ7DbFCNQn4JgslyCwYZNhiS7IM02B2S/NHj9e8XLGrumTrTAsZ58H7KqEEcjtJ8k/u7l9dLOZhKOysNJw6cZaCin/uPzu6tSV2UFlrAd/S36hJH7IVh9CTH42fzvre6SYQm4JCcD9/uxhYZOtOfeb81vU3iDBs4sCnKbLBM9Ogeapz9iBcnrjBgL1nWo9GaSCRFqCmKhSMZkGcgLEqmXTReeI26xVABcCryvd0SBGpFBeiYUzmHgyfDrdmtrxLsMYNxq9sBbTDuiPGjirITLhnA05LGJrFlK04Hik1d+Febrl9QQQfwMfy+gwz/hOdwIoaIXV+3yxU3EzyJGveurZhzhxOqelW7xmLbNRqllE+kxlcVOlTlOD4PEglV0/EA3/GGBtkWOT0/zBTKTClQcOgjWN6XgGXs+ad4RRNjr7PRD+Z9tdR6yhIBUPTk6XGdo1wmLLh5TR7/RPoVrEyWBzI7g6RhmCN31gzYxk7/nnmkQkUtDoCALRt8czHOtyF5vH9j957K9Q1NUU62PAkV88uIK5JcpQmXRkYW4iycDZTyWMuym7eN5IgMODow71DHMtqStKjPPoAFZ/CbHzpxzBaF9FBpPdEP8SAsOCIuudgw6y0MbqBbWA91UGyee1rbJHpgdLHThfx60cthZLNFcIIAVE8pbnjIrZqNNax1IovRjFIY21nfM8DZNJuyDV1f80kkLC52AYA+Ci9R+IFuuZuwDYe1g8b9qce1703o+8rQy7DIi6gMnZ5QpoGqIJxWYW+K1i7qSxBvX3+otPN5UtuxfNQaxVkRRmhSxGfCvKNQ1BDKy6Ag/5Cxe7iTQ5fJZi3uIrHlJD4sOMZzgwtCom6a74anBIBlOcwb3rEh9yInfnBqafzaOjhi7CZIIYTragmSlNw897+s5bWMSQSuYjrgkSTF0mvsJ/CRZApWihCecgfAwv+CzIlCTUgrXGJ1wxvs9hlL4OKu+DoeiHt6luAAPgM7/nr29JSQnYbg9Au4hJ0DH8N/FVxxQYrxrDhKsdLCOIewVC0en0UgQ78YsuHIBV9TDoXbX643nv4qsM4kqb1GTjEQUGwgi/q2tHcY4b2kGNj7PgS3oXM+Tce+1Ac4q8FGQ48kBnC8v8bH9Q9vzPaZU9DPrOaFbtOAhYi65qyZOHjZyCYyh+7jBf/2kwon4AsJStAIy2aaPuntjaSGerD8cOugW6IUmWqEcinz4W7o4edu+NRB38MMaFSfMpTIcuYcS+jIiGTVMqi6Skf4S/UXc897WQXcjDulok6M3JahhUz0xe3iHbLVZULOfjpaC4ia3a3SuZOuG3WYKmlfclr9sV86LW9YE+NfkeB5TKjnzur+yIkPg2jkOorMI71ZXJBW7vCYJ/e6jIZJbEdwh7ioeHInI8HBOHQuNtjafGBxmuN7/f5TplBU2XDFQWsaLgkv+Du8fPzvi3aEh7eH5h22xVwd4pTkZ3/use0Hle3Rhl9CYH2QqnBl7qylpI2XYCYkNUUUSMQfflay3LFTPncUFEad53a1LbE4knDgSpD1TMQbZDMMicj6sGxXSfdOcUkl3yOw9e3lS0V9IW42uvYxfwaRTSktNTSHDdFbaSLeQk4vQ8528/Z+suKnzXDybebNgzlGgt4WBX+fy3a3j0GZWF4VII3XWQIE0MQiv3z/B/370HcuUZkYcPgQUu/pmgANsYx4cBFamTOF542zTY4+NPhgzZEejwoBIVPF+7L+2YVZyLKS3SfvxFQt5MDHuktrlOLSYxuYzgqB+bHYzrU8qzbOg174FoC5vnYmcOumLtQT0LQT/r67TxbhR0EJTj6zOaknpvtb3M6mM1aYi6uBXZGTO/cK76J/ZFs6PF+JpZSEIhW0pIDOztnIQT9NJoQBhAJCeVEtuvwrKOTbNgue5/5up6teyO41kgXebh6VV0iTTP3AuyrpvwSEh5n7ry91cgVk3h4WlS5P4E36zYge6TLg0AdXK0e3yWETks46o/Rre0laMr7uQoetI4pGG5E4D1hqF+mij1PM+Ugy3tH1H1m5o4QyYdNA9/BTaVgJbCBN03h95iVf6LWvDYQZCXXpgRu3FcKPNLKmc66SnDtIeBruSKtwRKBTPlTRx8mLugGo97r0zp46MHc6t2xx5uF4ocCVE/5Al28+ANFO/JgZsZAOGCHFYd7uTeNFuEi+SYNeKTpjyaiREEP3bNs3Pwwk6AvFYP0d1pemL53du7BbFzYIwFYKE7jEJWAO5t9dXXyb9xdI4Z3HoBbgMLN14hGWLfntnvd4eYTXBq3qIskegR1SMB5e1Ev/cXgFTl1twCTIoGDye431t4ZGTJQ/npUt27fbXPJXce8hnXjRhCsP/B6L/E+PHtku+LY3jJvIXB8R7cQj6sj/cbGvEJKjVIqo/VCBMKU++Ns0oy7FPYkW/6qxNqEk1sz6Naimm0hImLWpDfFM72eJcMizKtoTIjDLW9pctQL/ctAXFRj9nLlEgnErzZlQY71DVxdi6nVUoFNMAJWUoNlSkgVHBvatwLRdA6pBsHAI/8dUZIarLv7AYknLoVlZqRpxS62YeRMB8wSbRg8IQOdmW9iElzs+eUUwqUu++QWcRmv7wWGK54KYeFrPF+RMR1rAACWsMg4EDd6cJM9ye2NLSPpE0qM8TDFWhdlEgYhM04iNzvA464zRuctOzWoMvdg+9z2WLbN3vPqNezIiWa8LH81yovynkbAB50d4Vi6R8CMvEySP/1WJUdvpqem4jvYngmdAdWjbV1qNDXDYyn7RTRK5ddtuMs8nQnlli2IADf19Ld6fTrcJoEcQS+9nevzzGzPRJS0MulBxauSuhm8FjPt1U/0pvORJmcfwNkj8yJ/TSNSSI0NGyR7ZUXZiBOmehi0+2vvIOekarRh1cyXtTmV3bThZ3cgL8y5Wf/uBgYqHjsf0L74mFW6aBcXrAeecr777rufBxgdPFXymaG7F7idOKzCECQjNnUQS8SCnJ5CyxPDzJX3biUZlUz2RmGgfTqaNe/HV5y7DtWWiRSzkvjIsOLvRFXRsIeltECpcrGJDuz4FfEYRWzsUOJs4Rz/a+BfOxew1hL0HK2kkMlqAgruWvGQcjlVLSX0GEec9DLLF6WTtcbcTT2xwtGJsYhj3DS5nqBNjTcEhhuyHvUkiAtiNcz+7Qtq0zx6jkszOZSqkP666q888RWV+LH5XU3qbzyM7mcI/sDZpXW4L7yPQbqtQKXYvleC1VciDAT+2Xw12194+jf+XZgKK/o3pVq49hoVS5MWxKL3aHqA6HXpgb/H8ejOdR+fLekMubKY6tZLq941g1iFyB0BpHKsh+YbgsiOvhhetWKGMj3V/20kqzNmaIDnkuUdYu5nJxWEdK5iM5gwdBBI4HM6Ek4xQk2xLSdDlc/GRcLFg1CIHmNoJrvJ4K6tbLuFOONLXGax8nVlZ0fdN9SC6fK9B9DeBaao8ToqayokIPFqSE7r0RvZZQ9AUn7nmMOtlknH95NEaw8lqmVal0eu3lSSjZO+67A8SzTpGRw7ldizc8l+s93dAS4b+wKvfkg6PEe5wtEnQTb0CXus+qPzYSnkSJ4Hs38ajGPzIuUcULdPI1mzex3vNuulhmQNnEf4sVKKDmHJ7FjeZSa6/k/WH8VNOhUWLHHbpgUKC7KDABc3bObVgwntiWTu/X2BbiLGkn+dCJeHAgBzELlE0W5RzE6GixaR+Uz43WtYueHKpIOgRb/6AdI0CU5vfjxyJgrBQUYxpRTgYR4dsCBkXyim7BOL6MxHlVYsRdnu2yVIbCpsUxfehO1njpy/PJq8V+lYNNYVobJ+EMCSqeLmXRwxf6fCyU4pXJf0v5wzosNYMlAaWHj5X/TEAUj316czUWufa2blozlZ7yDE/rB2b7WG9MIp3gditxha+hENKjPCf7rz3mkv54KEs97whlFzvW9poq9K1L8mKhs9EOfNSEPMkpNdbo30FFkf3YpdyT3O6t4kd/7TJn3S8W8Go53iiL6SQty5GcoBhOMsbmWiVEmT76GMgp63m3hPFDppkOEvlqsdGOKOa197ZS/Q4HkfjMsMsFxi8ocomuJU05ibDcCx7259jILJB8mmd2QOIn+hfL4c4uWg7t8/iktsV6LWp0uSve2PEGPbjqJwDKaPKUEPLInUEKmnJJZLSIdflxtUkL6XDQyHqeBb1SXQO8qSoOHkBflUIzxi1WsrqJVbf8fp/F81KIVeVhHU/vCdC7arSZZ5Wy9RGxm4F3LQQ2MLSfZpM05zYW8bgATB/ORsSBb6IE07kO6X2ubjZ9WAsdi0laH/338Ybb2djwl+k746fz8fb1Y79uN1jUB2uGV1cc/apVRzImCWZOvRKKlexQr4QPFh++6pneRNoQQprURk0h+sEpAdDETGu7E1UHCxWxPWBpD1LebNjCbEhP/eKs4VlMzivZuQqGPOnaV7WS5+bbFNvLKbFr/MlmOT/6hK9UH1emgoGo6DVTSSk+A2NuyuadL/kv4H+mwt+n6P4LSKsrcB9hIJHEB2j3LIowTh4MfTq2xwLiObcj52tKoVH22XfMeCzAKxxvTEwHSeKZdt7PAAQGqiqFXGoSgLXnEd979JpRt/ArSvkH10O5BAC4w9XWVcq4DrarP7QgZU7ntJWvnGF/Ws8hu43R2GVy8azO1AFIdvsG6ZKDon3SSRw3PN769OrBV8wbOynYp807hF0kHGmg195+T6WU519OIc3z9l9sGBE3Iu2HB5302e0aCU8D2iSHV8syz85Dn79ySVUYXINnRKclD2NXSBaDTsli3OLTPrj/btKyU+ijN2xvMT30/eiaezbsS1xSxmwDjdWMGjMxiLpdo7HpxJJKWAA9XCiFC5HJh8OcCuD3z9u5oMYdq/ZLcvRMI5Fi0Eg3H/gfFrb1hrnVIhuDTCkeGkGK+bWdm7f++c2UvHULy/mO30YrWVduLen+kTOynnUNs6Rbg+mhTYp5Sn2+1OLbx64njkMLDHhG63Vh5Rlq/irj+NhgizO14jbqR7Xfecz3uJ7yjob3R18S3Nv3UzR8kBEQaIWpxv+7Hue8TjN1Y+RKRvL9ScYmv1W06Alr2YYgOOrqWmZQ7urTCBM/hDvwMIeXkSWXEKsPGrNPl2KrwQFpMqItjmFHrnNiQF0nD0+Q4T6RJy9eGy+gyhBUKwnKrohBWpWnyFKBjrmlwhi0vJ4RYVPEeez3aGfQgPdqIzWr8A90uOif3jOX8qItg5k7QPP5oHcB7kdX3piNq8ByxqpA0bO+J1AfifVxuT17V7pHTxfhTchCAvAG6ZgrZkhYiNHMK0kL7TSXlPrMsvcTVzUgbqdjiyLyhB+CTfrVubCRkesbgvSjXPw73ZysWRqKr0W+bhfdSuF3vH1u2YqvK81Leo+oabjlzr1FXBRIQzyoBOEsWvEb3elE8RpNeZL17A1GeYNYTrhKuvXrrOUv4GahSR0eYnL/h6CF/OnzcLxYqOBfspj29MMjKlzMLezaMUfZigckV2ajsDaYdMK0almyPx71we815EGmSdA4hTzZlgNIqq4cloaGG8PBtGtcIbwLk6t5LQrt2qOUZsZaILzcDrlGqIbKV/t2jRZtuGy3WRJWWHpbP/JDvezziPcKA0PQdoUZYMvP0bf5KjKtAG43ShahlUSXg0nnyEDZuxDeVyuhPjL0QM8/ezjDI25okzFpElKgEPaXrrsXzPFKRMbr19w4y8cSxJHbR8nK82cERuNqb9nvuF9ddZvkuDnBlzuROXur0Te/rk+w5cqiHf4NmRZZy+BPVr9PWDkBPoDd30tJlGm6KKkKEa9jt/GwTheX8vbj0kKrDIWiHU1wbI5K5FtyqzQydGw7bueOotuBbzxd0a8zHWxDlhmpXhQlmuooxAqc4i5KdZWzShzgMSDC3L+Wr8aTv95hB97M0dcPUVKKT7h4DEcCeAML4XbFudLjONtvgHmFl1JeTZefp1O2GxS/6kqxjjW7Mre5YbQvrYiUdtbPaKTdM191tIfMn9WYnlsHPMkMq9mxm1EnaSgRrdNxvhNM9PBpH785FNMxO50OiXS3YJcwk705x6GuKlMtw64Q6LxnE8WdQulNaeCk6cpuSub/UO1GnMMLrgCqwH12+Vyjm9Xpo/cmonOorcWEXQPZDNK+vcOsFyuDU6huTNjSIylOeFTwSG0kYxHCGAfySCxWGRVTfE8vrXWaFjn53NMGour1MYkn70OJBpJMax4lJLmuc5qtj4GpbmpK6hAOMk80efJ+tVUut2z0RtyOOq65mV32dE5fnZIExp+mhvoi+84gWHekYTBIKeSoWaawKRUdbuW+pCdNHaRsMQ41UphkLmtY7C219zHjuK7b0Pd8Jr8EsRN4m4GZmV/nGh7+CbIx4s1CbIIbZDotsKWFSDckcbt4ScdNKRGLJvINaLLjolkrXdUge94sbioyYoJzTCqr7F+OEbNKbq1eE7VjMC6zxVb/DJSI/ejUtIwsdsHzOuz7CtXsUJi90/k6jIByotFGuJp4TU7Jo3N5sPZXMC0bCzVNVGM5XmzpO3EN0mkn97s6DH02/w6zBzieM6fZ1alX/q0syRgD2m5i8nLqKy6VqlqRgm2/pOLqaVHn2q6hXQOemBVNPnrW3Al2bg3KVPhpJOI0Fi283o1iV0nRRIsgw3sP51abbgqLQB6vY6l6H7+lYeXeonJK44f4bXvlThYnbzRRd3Kvj+FLKXb+vN6g1DcsLmf2e8rjG8kf0Vs0Hl1nDNTNzqoO+tgzuAGGvIqU9S3w1t073BPCarkzla/jAQG7KyT04WLNranaXLq4YUagRunmI+HpbCLgKjhEBGLOUOox8jN3o4qCMp9hu0q3opUxNYVgauvuVgcNuD/Z22D5r8fHYT50CE991tW6KRfNMCC01u4BJIfPzo5aRiiw9LvKssqtDVV922+dzEMZ7Us9OzDLlBNcXr9P9oTJFAitag/3vnIXg+Qggbg8rnyz9Sn1zjZzzVhgCeg5rRB2xxp+79Emo7IDkK9hMlNseZNs7SX1CzCbG60e2mYfApwnDMt+0o6226Sr5mIwO70rPYMiJ49pMs136xzTCsG0K3ayv8titkjk2XxZjomEAOvBb+rv5JWggxYQDGGXbDM++NAXo+crH2bjAn9z61sM8cxR9aqULjSuyPybKMxGE= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Face Detection</tag>
        <tag>Computer Vision</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSD大法实战车辆检测]]></title>
    <url>%2Fdl%2Fvdtct%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Python</tag>
        <tag>Vehicle Detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes API初探(二)]]></title>
    <url>%2Fcontainer%2Fk8s%2Fapisrv%2F</url>
    <content type="text"><![CDATA[Kubernetes API初探, Kubernetes API相关概念、API Server内部工作机制、如何通过命令行与API进行交互等. API Server如下图所示, Kubernetes主要由不同节点、不同角色组成: 主节点控制平面包含API Server、控制管理器及调度器, API Server作为控制管理实体, 可与分布式存储组件etcd直接交互. API Server主要负责Kubernetes API状态变更、读取, 如处理Worker节点、Kubernetes Native应用或外部客户端状态请求等; API Server也可充当集群代理组件, 如充当Kubernetes Dashboard、流式日志、服务端口代理或服务kubectl exec回话等. 通常, 状态通过etcd进行持久化, API Server充当Kubernetes核心部分. HTTP 接口API Server通过JSON或Protobuf暴露RESTFUL HTTP服务, JSON或Protobuf主要进行集群内部通信, 可通过以下HTTP谓词查询或修改Kubernetes资源: HTTP GET, 获取特定资源(如特定Pod)数据或资源列表集(如某个命令空间下的所有Pod) HTTP POST, 创建资源, 如部署服务 HTTP PUT, 更新已有资源, 如改变Pod容器镜像 HTTP DELETE, 销毁资源, 不可恢复 HTTP PATCH, 部分更新已有资源 示例如下: 12$ kubectl -n NAMESPACE get pods ## NAMESPACE替换具体命名空间$ GET /api/v1/namespaces/&#123;YOUR-NAMESPACE&#125;/pods ## 与上面指令等效, 注意替换YOUR-NAMESPACE为具体命名空间 Kubernetes API版本控制Kubernetes支持API多版本控制, 以不同API路径形式如/api/v1 或/apis/extensions/v1beta2等, 便于拓展, 不同的API版本意味着不同级别的稳定性支持: Alpha级别, (如v1alpha2), 默认禁用, 适用于短期测试群集中使用, 适用于可能在任意时候删除的特征 Beta级别, (如v2beta3), 默认启用, 意味着代码经过了充分测试, 但对象的语义可能会在后续版本中发生改变, 可能会出现不兼容情况 Stable级别, (如v1), 存在于后续发布的软件版本 当然, API Server也存在其它类型的HTTP路径, 如非资源对齐的路径：群集范围实体, 如/metrics,/logs或/healthz. 此外, API Server支持监视, 如可以通过在某些请求中添加?watch=true将API Server改为监视模式, 而非按设定时间间隔进行资源轮询. 声明式状态管理大多数API对象区分了所需的资源状态规范和当前时对象的状态,状态规范是对资源期望状态的完整描述,且通常持久于稳定存储如etcd中. 值得注意的一点是, 某些Kubernetes发行版产品,如k3s或微软的AKS,已经取代了etcd或考虑使用其他存储替换etcd. 下面简单聊下Kubernetes声明式状态管理—即声明期望状态, 并让Kubernetes处理其余一切(Handle the rest). 状态规范描述了期望的资源状态,可通过命令行工具(如kubectl)或通过Golang代码实现.Status描述了资源的观测状态或实际状态,并由控制平面管理,可由核心组件(如控制器管理器)或自定义控制器管理.例如,在部署中,指定期望运行20个应用程序副本.部署控制器作为控制平面中控制器管理器的一部分,可读取部署规范并创建一个副本集,然后负责管理副本：通过创建相应数量的Pod,最终(通过kubelet)在工作节点上启动容器.如果任一副本失败,部署控制器反馈状态. API Terminology回顾下上篇博文, Kubernetes API Server上下文Context经常看到Kind、API Group、版本Version及Resources资源等相关数据, 下面简单聊下这些Context数据. 如下图所示, Resources通常作为GroupVersionResouce(GVR)中的一部分, 集群范围资源如节点或命名空间本身路径中没有$NAMESPACE部分, 如节点(nodes)GVR: /api/v1/nodes; 与GVR类似, Kind存在于每项API Group,是GroupVersionKind(GVK)中的一部分. GVK与GVR存在关联, GVK通过GVR标识的HTTP路径进行识别, 通过REST映射将GVK映射成GVR. Kind实体类型, Kind对应于Golang中type, 每个对象都有一个字段Kind(JSON中的小写,Golang中大写),该字段代表一个Pod.Kind有以下三种: 系统中持久实体对象,如Pod或Endpoints端点, 这些对象具有名称,存在于命名空间中. 一种或多种实体集合列表, 这些列表具有有限的公共元数据集. 示例如PodLists或NodeLists. 对对象和非持久实体(如/binding或/scale)进行特定操作的特殊目的类型. 如Kubernetes使用APIGroup和APIResource进行Discovery; 对于错误结果, 使用Status. 同名的Kind不仅可以在不同版本中共存,还可以在不同的API Group中共存, 如Deployment, 刚开始在扩展组中为alpha kind,最终在apps.k8s.io组中升级为稳定版本, 这种现象称之为同居(Cohabitation). 虽然在Kubernetes中不常见,但也存在, 如: extensions和networking.k8s.io中的Ingress和NetworkPolicy apps和extensions中的DaemonSet,ReplicaSet 核心组和events.k8s.io中的Event API GroupKinds集合通常逻辑相关, 所有batch对象如Job或ScheduledJob均存在于Batch API组中. Version每个API组可以存在多个版本,如一组API首先存在于v1alpha1,然后v1beta1,最后v1, 可以在每个支持的版本中检索在给定版本中创建的对象. API Server执行无损转换并返回所请求版本中的对象. 从集群用户的角度来看,版本只是相同对象的不同表示. Resources通常由一系列HTTP端点(或路径)暴露CRUD(Create/Read/Update/Delete)操作语义, 通常路径包含: root, 如…/pods, 列出该类型的所有实例 各个命名资源的路径,例如…/pods/nginx 通常,这些端点中的每一个都返回并接收一Kind(第一种情况下为PodList,第二种情况下为Pod).但在其他情况下(如errors),将返回Status Kind.除了具有完整CRUD语义外,资源还可以由其他端点来执行特定操作(如…/pod/nginx/port-forward, …/pod/nginx/exec, 或…/pod/nginx/logs).这些也称子资源,通常实现自定义协议而非REST, 如通过WebSockets或指令式API进行流式连接等. Resources(资源)与Kinds(类别)区别如下: Resources对应HTTP路径 Kinds通常由端点或etcd中返回或接收的类型对象 API SPACE]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Kubernetes API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes API初探(一)]]></title>
    <url>%2Fcontainer%2Fk8s%2Fapi-intro%2F</url>
    <content type="text"><![CDATA[Kubernetes API初探, Kubernetes API相关概念、API Server内部工作机制、如何通过命令行与API进行交互等. 命令行初探一般从接触Kubernetes开始, 最先上手的毫无疑问, CLI命令行工具, 从最初的Docker CLI到Kubernetes CLI, “键入指令, 字符跳动”. 1234567891011121314151617181920212223$ # 获取 CoreDNS相关状态信息$ kubectl -n kube-system get deploy/coredns -o=yamlapiVersion: apps/v1kind: Deploymentmetadata: name: coredns namespace: kube-system # 其它细节略spec: # 容器镜像等特性 template: spec: containers: - name: coredns image: SPECIFIC-ECR-HOST.amazonaws.com/PATH-NAME/coredns:VERSION-NUMBER # 其它细节略status: replicas: 2 # 并行运行副本数 conditions: - type: Available status: "True" lastUpdateTime: "2016-01-21T20:42:10Z" # 其它细节略 以下CLI在本机8080端口开启代理并处理验证, 允许通过HTTP直接发出请求并接收返回的JSON负载 12345678910111213141516171819202122232425262728293031323334353637383940414243$ kubectl proxy --port=8080Starting to serve on 127.0.0.1:8080$ # 开启另一终端, 键入以下指令 或 kubectl get --raw /apis/batch/v1$ curl http://127.0.0.1:8080/apis/batch/v1# 返回Kind、API版本、Group版本及Resources&#123; "kind": "APIResourceList", "apiVersion": "v1", "groupVersion": "batch/v1", "resources": [ &#123; "name": "jobs", "singularName": "", "namespaced": true, "kind": "Job", "verbs": [ "create", "delete", "deletecollection", "get", "list", "patch", "update", "watch" ], "categories": [ "all" ] &#125;, &#123; "name": "jobs/status", "singularName": "", "namespaced": true, "kind": "Job", "verbs": [ "get", "patch", "update" ] &#125; ]&#125; 查看集群支持的API资源, 如Kind、命令空间、API组别、缩略(ShortNames)等, 如下: 1234567891011121314151617181920212223$ kubectl api-resourcesNAME SHORTNAMES APIGROUP NAMESPACED KINDbindings true Bindingcomponentstatuses cs false ComponentStatusconfigmaps cm true ConfigMapendpoints ep true Endpointsevents ev true Eventlimitranges limits true LimitRangenamespaces ns false Namespacenodes no false Nodepersistentvolumeclaims pvc true PersistentVolumeClaimpersistentvolumes pv false PersistentVolumepods po true Podpodtemplates true PodTemplatereplicationcontrollers rc true ReplicationControllerresourcequotas quota true ResourceQuotasecrets true Secretserviceaccounts sa true ServiceAccountservices svc true Servicecontrollerrevisions apps true ControllerRevisiondaemonsets ds apps true DaemonSetdeployments deploy apps true Deployment 查看集群中不同资源版本 123456789101112131415161718192021222324252627282930313233$ kubectl api-versionsadmissionregistration.k8s.io/v1beta1apiextensions.k8s.io/v1beta1apiregistration.k8s.io/v1apiregistration.k8s.io/v1beta1appmesh.k8s.aws/v1alpha1appmesh.k8s.aws/v1beta1apps/v1apps/v1beta1apps/v1beta2authentication.k8s.io/v1authentication.k8s.io/v1beta1authorization.k8s.io/v1authorization.k8s.io/v1beta1autoscaling/v1autoscaling/v2beta1autoscaling/v2beta2batch/v1batch/v1beta1certificates.k8s.io/v1beta1coordination.k8s.io/v1beta1crd.k8s.amazonaws.com/v1alpha1events.k8s.io/v1beta1extensions/v1beta1networking.k8s.io/v1policy/v1beta1rbac.authorization.k8s.io/v1rbac.authorization.k8s.io/v1beta1scheduling.k8s.io/v1beta1storage.k8s.io/v1storage.k8s.io/v1beta1v1 API Server内部工作机制如下图所示, Kubernetes API Server处理请求过程如下: 首先, HTTP请求由一些列Filter处理, 这些Filter均向DefalutBuildHandlerChain()注册, 这些链起来的Filter详见k8s.io/apiserver/pkg/server/config.go. 对给定请求一些列Filter操作, 若请求通过则绑定对应上下文信息, 如ctx.RequestInfo; 若没通过Filter, 返回HTTP响应码表明原因 然后, 基于HTTP路径, 由k8s.io/apiserver/pkg/server/handler.go路由HTTP请求至对应的HTTP句柄(Handler) HTTP句柄Handler向API Group注册(详见k8s.io/apiserver/pkg/endpoints/groupversion.go及k8s.io/apiserver/pkg/endpoints/installer.go),需传入HTTP请求及上下文参数,从ectd存储中获取并传递请求对象. 传递通用的Handler Chain后, 开始处理实际请求, 执行请求句柄语义: 直接处理, 如处理/apis, /version, /healthz等其它非REST请求 REST资源请求, 传递给请求管道, 请求管道包含: 准入逻辑, 传入对象需经过admission chain, 该准入链允许存在多个准入插件, 每个准入插件既可以包含上图中的Mutating更改阶段, 也可以包含验证Validating阶段, 或俩者均有. 对于Mutating阶段, 可以改变传入的请求负载, 如基于准入配置图片拉取策略可以设置为Always、IfNotPresent或Never; 验证阶段, 如Pod安全验证、命令空间是否存在等. 验证逻辑, 检测传入对象, 如检测字符串格式是否符合服务命名规范, pod中容器名是否唯一等. 基于ectd的CRUD逻辑, 如更新逻辑: 从etcd读取对象, 检测到没有其它用户更改对象时, 执行写入请求对象至etcd. 源码剖析, DefalutBuildHandlerChain()中Filter Chain如下: 123456789101112131415func DefaultBuildHandlerChain(apiHandler http.Handler, c *Config) http.Handler &#123; h := WithAuthorization(apiHandler, c.Authorization.Authorizer, c.Serializer) h = WithMaxInFlightLimit(h, c.MaxRequestsInFlight, c.MaxMutatingRequestsInFlight, c.LongRunningFunc) h = WithImpersonation(h, c.Authorization.Authorizer, c.Serializer) h = WithAudit(h, c.AuditBackend, c.AuditPolicyChecker, LongRunningFunc) // 略去部分实现 ... h = WithAuthentication(h, c.Authentication.Authenticator, failed, ...) h = WithCORS(h, c.CorsAllowedOriginList, nil, nil, nil, "true") h = WithTimeoutForNonLongRunningRequests(h, LongRunningFunc, RequestTimeout) h = WithWaitGroup(h, c.LongRunningFunc, c.HandlerChainWaitGroup) h = WithRequestInfo(h, c.RequestInfoResolver) h = WithPanicRecovery(h) return h&#125; 所有相关包代码, 详见k8s.io/apiserver/pkg 方法 描述 WithPanicRecovery() 处理恢复及日志Panic, 详见server/filters/wrap.go WithRequestInfo() 绑定RequestInfo至Context, 详见endpoints/filters/requestinfo.go WithWaitGroup() Graceful shutdown, 增加非长时间运行请求至等待组, 详见server/filters/waitgroup.go WithCORS() 提供CORS跨域资源共享实现, 详见server/filters/cors.go WithAudit() 对所有传入请求进行日志审计,封装Handler, 审计日志包含请求源IP、用户操作调用、命令空间等, 详见admission/audit.go WithMaxInFlightLimit() In-flight Requests数量限制, 详见server/filters/maxinflight.go WithImpersonation() 通过检测请求处理用户假冒, 详见endpoints/filters/impersonation.go WithTimeoutForNonLongRunningRequests() 对于非长时间运行请求(如GET,PUT,POST,DELETE等请求)超时, 详见server/filters/timeout.go WithAuthentication() 验证用户请求并存储用户信息, 若验证成功移除Authorization HTTP头部, 若验证失败防护404HTTP状态码, 详见endpoints/filters/authentication.go WithAuthorization() 调用验证模块检测并将所有授权请求传递给多路复用器, 若用户权限不够返回403HTTP状态码, 详见endpoints/filters/authorization.go, 当然Kubernetes现在基于角色进行访问控制(Role-based Access Control)]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Kubernetes API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于CSP与Actor的几点思考]]></title>
    <url>%2Flife%2Fcsp-actor%2F</url>
    <content type="text"><![CDATA[个人关于CSP和Actor的几点感想. Disclaimer 2019 - Update: 写这篇博文的初衷在于记录曾经的点滴感想, 本文的主要目的并非让你铭记”四大并行原语”, 也不是让你得出”问题解决方案的多样性, 答案并不唯一”(或许你上小学时就明白这个哲理)这种”无聊”的结论; 只是希望你看完后, 你能Get到:CSP与Actor模型的异同点Actor模型与CSP对比有何优点为何Golang语言可以绕过CSP的某些短板 (参考方式不限于文中所提三点, 比如某些Golang老手会告诉你Linux中的cgroup是个好东西) 四大并行原语, Actor与CSP的”前世今生”以下四大并行原语基本源自数学推导 π Calculus Actor原语 Join Calculus Ambient Calculus 具体可以参考这本书: π Calculus应用模型有CSP(顺序化通信进程, 本质上是个数学抽象, 表示多进程或单进程中多线程间通过消息传递进行通信), Actor原语对应Actor模型、Join Calculus对应Join算子模型. 目前, 这三大并行模型(CSP、Actor模型、Join算子模型)中, CSP是工业界最实用、最成功的模型(虽然CSP设计并不完美, 至少相对于Actor而言); Actor模型比较小众, Join算子模型(目前比较常见的实现语言有JoCaml, JoCaml是OCaml语言的一种方言, 从名称上可以看出其特点 Join Calculus + OCaml)、Ambient Calculus逐步边缘化. CSP模型常见于如Golang中的Go协程、管道Channel, Clojure语言中的core.async; Actor模型常见于如Erlang Pid/Process、JVM生态如Akka Actor等. Actor模型与CSP对比鉴于Join算子模型和Ambient Calculus已经边缘化, 仅对Actor模型和CSP模型进行对比, 如下: 相同点: 异步非阻塞、支持消息传递不同点: CSP中进行通信的进程或线程并不需要完全知晓对方, 意味着发送方和接收方解耦、但通过传递的值进行耦合. 消息传递方式存在区别, CSP中消息发送方和接收方对于消息什么时候发送、什么时候接收存在一种共识, 而非通过堆积消息队列进行读取方式. 这种消息通信方式也称Rendezvous Messaging, 消息聚会或会合消息. 与Actor相比, CSP容错性不佳. Actor具有灵活的Supervise监督机制、容错性好, 而CSP需要开发人员手动添加容错处理逻辑. 与Actor相比, CSP分布式拓展能力不强. 由于CSP使用Rendezvous Messaging, 意味着接收消息需要在Process间同步, 也正由于此限制了CSP的分布式拓展能力. CSP存在推断(Reasoning)难点，由于每个阶段, 每个线程(或进程)均有可能与其他线程(或进程)进行交互, 存在诊断难点; 而Actor模型存在Supervisor Tree(监督树), 诊断性、侦测性相对容易. Actor优点 分布式拓展能力佳，举个简单例子, Facebook的WhatsApp内核源码主要由Erlang Actor实现，而这款App日活已经过亿，由于Actor本身的拓展能力出色，该App后端核心服务运行于集群多个节点，轻松运行无压力. 具体可以参考WhatsApp核心开发人员在Youtube上做的技术分享. 高可用, 分布式系统本身涉及的问题复杂, 比如如何保证多节点数据一致性、如何进行异构节点通信、如何避免单点故障等. 而Actor模型天然的高可用特性使分布式设计变得简单, 比如工业界有关Erlang Actor大名鼎鼎的99.9999%(六个九)高可用定论. Actor模型高可用特性本质在于Actor本身比较灵活的Supervise监督机制, 当一个Actor Crash(崩溃)时, 可推选出一个新的Actor继续进行未完成的任务. 容错性好，在分布式系统中故障不可避免，当分布式应用Crash时，首先要解决的问题是恢复上线，其次才是进行日志排查、问题定位. Actor模型允许当其中一个Actor奔溃时自定义解决方案, 如禁止故障Escalate(扩散)呢, 还是推选新的Actor继续执行任务. 这一点有别于主流编程语言中的try-catch异常处理机制, 因为发生问题时应该考虑的是服务可用性而非打印出一堆异常日志. 增量迭代、持续交付性好, 你可能不希望更改一个产品功能时停止服务直到新代码部署成功, 这样很影响用户体验. 好的解决方案是服务解耦, 你希望这种迭代变化对用户的影响最小化. Actor模型允许你这样做, 老版本代码继续运行，直到新的服务代码成功部署, 而这种增量迭代对用户不明显,因为服务一直在运行没有中断过. 开发友好, Actor模型允许你以开发单机代码方式进行分布式系统开发, 大大降低了分布式系统开发难度. 与线程、同步、锁等Low-level并发模型相比, 更容易上手、便于理解. 生态, Rabbit MQ、CouchBase、Redis内核代码基本基于Erlang Actor, JVM生态方面如Apache Flink、Spark底层代码采用了Actor模型封装(这两大大数据组件均基于Akka进行二次开发, 如Flink依赖Akka Cluster进行通信、Spark利用Akka Actor进行主要逻辑抽象封装. Akka在JVM Actor模型应用方面一直做得很不错). 2018 - Update: Spark 2.X系列由于兼容性问题正式移除了Akka Actor依赖. Anyway, Spark也曾站在Akka的肩膀上”眺望过”. 成功==不完美?CSP大获成功, 意味着什么? 这个问题耐人寻味, 是因为CSP实用吗? 还是因为早期Actor模型(如Erlang Actor)与FP(函数式编程)深度捆绑, 从而限制了推广? 是工业早期硬件架构(如CPU设计)特别适合π Calculus与线程建模, 还是Actor原语本身比较超前? 工业生产与技术理论革新, 对立与统一, 很难评判哪个在前、哪个在后. Golang的成功, 有其本身语言特性(如比C简单、容易上手, 支持GC垃圾回收等)的因素, 也有CSP的功劳(如大大简化了Golang的并发编程). 至于CSP的分布式拓展痛点, 在Golang中已变得不再明显, 主要原因在于Docker(使用Golang开发)、Kubernetes等容器化技术的兴起. 可以换一种角度解读这种现象, 原本用于资源隔离、提高资源利用率的容器化技术, 俨然成为了一种分布式环境或云环境下的一种基础设施服务、一种”标配”, 如果这种基础设施不能解决分布式拓展问题, 分布式系统的意义在哪? 请勿曲解我的观点, 并不是说Golang应用无法分布式拓展, 但Golang仅靠CSP是无法成功的. 离开了类似于cgo等Golang与其它LLVM语言交互工具、仅靠Golang CSP是无法做到”成千上万”节点拓展(CSP分布式拓展能力不佳是不争的事实). 但, 这又怎样? 对Golang的流行有什么影响吗, 或者对Golang的分布式开发有什么影响吗? 没什么影响, 喜欢Golang的人照样喜欢, 特别是那些被C++虐惨的攻城狮. So, What’s The Point? 成功等于不完美? 问题解决方案的多样性, 特别是对于开发人员而言, 答案并不唯一. 不完美的CSP并没有限制Golang的流行, 相反, 正是由于CSP的简单实用, 大大助推了Golang的流行. 至于CSP分布式拓展能力不佳, 解决方案有多种: 第一, 可以通过Docker、Kubernetes等容器化技术, 充当基础设施服务, 转化问题; 第二, 与LLVM生态交互, 毕竟”再造轮子”是件痛苦的事情, 特别是面临快速开发迭代时; 第三, 自主开发, 如果操作系统底层开发经验丰富, CSP这点问题还是有解决方案的. 再比如Apache Storm, 主要核心代码采用Clojure开发, 早期的Storm吞吐量不高(与Spark等对比), 有人认为受限于Clojure函数式编程等一些特性, 其实主要原因还是受限于Clojure中的CSP模型. 后期, Nathan Marz(Storm作者), 采取了折中方式—采用JVM生态中大名鼎鼎的Disruptor框架提高吞吐量, 好处在于吞吐量确实上去了、缺点在于要牺牲一半内核提高吞吐. 阿里巴巴攻城狮们用Java重写了遍Storm源码, 于是才有了JStorm—国产Micro Batch微批流式处理组件. Clojure并不完美, 但JVM多年工业生态可以弥补其些许不足, 至少Apache Storm是个鲜活的例子. 换种角度看问题, 你将收获整个世界!]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>CSP</tag>
        <tag>Actor</tag>
        <tag>Join Calculus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reptile算法初探]]></title>
    <url>%2Fdl%2Frptl%2F</url>
    <content type="text"><![CDATA[本文主要介绍Reptile相关概念及算法原理. Reptile算法简介OpenAI团队为改进MAML(Model Agnostic Meta Learning)算法,进而提出了Reptile算法, 与MAML算法相比, 该算法易于实现. 在MAML算法中,需求二阶导, 即梯度的梯度, 但这样一来的话任务计算效率很低, 为改进MAML算法, OpenAI团队提出了Reptile算法, 该算法对N个任务进行采样,并在每个采样任务上运行随机梯度下降(SGD)算法减少迭代次数,然后按照所有任务共有的方向更新模型参数.由于对每个任务执行的SGD迭代次数较少,因此不会直接计算损失的二阶导数. Reptile算法思想大体如下, 从满足分布 $T$ ~ $p(T)$ 任务中取样, 如T1、T2, 给定随机初始化参数 $\theta$ , 首先在任务T1上执行SGD算法、迭代n次得到最优参$\theta_1^{‘}$ , 在任务T2上同样执行SGD算法、迭代n次得到优化参数 $\theta_2^{‘}$ , 此时得到优化参数集: \theta^{'} = \{ \theta_1^{'}, \theta_2^{'} \} , 现在只需将模型参数 $\theta$ 朝着接近这些优化参数的方向移动即可, 如下: 具体做法, 首先计算随机初始化模型参数 $\theta$ 与优化参数集 $\theta^{'}$ 间距离 $D$ (该距离可使用欧式距离或其它距离指标), 求距离最小值或求解距离最小化问题: $Minimize_{\theta}E[\frac{1}{2} D(\theta, \theta^{'})^2]$ . 如何距离最小化, 可以考虑在距离 $\nabla_{\theta} E[\frac{1}{2} D(\theta, \theta^{'})^2]$ 上计算梯度, 即: $\theta = \theta - \epsilon \nabla_{\theta} E[\frac{1}{2} D(\theta, \theta^{'})^2]$ 计算完梯度后, 最终等式变成: $\theta = \theta + \epsilon (\theta^{'} - \theta) $ 小结下该算法, 首先在采样任务上执行SGD算法、迭代n次得到优化参数集$\theta^{'}$, 然后利用上面等式更新模型参数. MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); Reptile算法原理Reptile算法可以线性化形式实现, 也可以以Batch形式实现, 对于线性化版本, 只需从任务分布中采样一个任务即可; 对于Batch版本而言, 需对批量任务采样以便找到最优参数. Reptile算法线性版本原理如下: 1. 给定任务T满足分布 $T$ ~ $p(T)$, 随机初始化模型参数 $\theta$ 2. 从满足分布的 $T$ ~ $p(T)$ 任务中进行取样 3. 对任务T取样K个数据点作为数据集D, 即 $D = \{ (x_1, y_1), (x_2, y_2)......(x_k, y_k) \}$, 注意D中包含 $x$ 个特征、$y$ 个标签; 然后在数据集上运行SGD(随机梯度下降)算法, 迭代n次以减小损失, 假定此时得到的最优参数为 $\theta^{'}$ 4. 以靠近最优参数 $\theta^{'}$ 方向更新初随机始化参数 $\theta$ : $\theta = \theta + \epsilon (\theta^{'} - \theta) $ 5. 重复步骤2至步骤4, 直到最大迭代次数 MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } });]]></content>
      <categories>
        <category>Deep Learning &amp; Machine Learning</category>
      </categories>
      <tags>
        <tag>Reptile</tag>
        <tag>MAML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫谈Golang软件架构 (三) -- 数据建模]]></title>
    <url>%2Fgo%2Fdata-modeling%2F</url>
    <content type="text"><![CDATA[Golang软件架构漫谈之数据建模篇, 本文将对后端数据建模进行阐述. 实体与关系在需求早期阶段, 实体和关系处于概念层面, 伴随开发过程不断推进, 实体与关系建模逐渐转变为使用特定存储引擎的数据库、运用不同模式及多种数据结构等. 随着业务逻辑的频繁变更, 最初的数据设计也面临频繁迭代, 如: 实体建模层面, 构建数据实体层次结构, 描述各种相关实体 规范化层面, 如删除建模实体中的冗余数据等 非规范化层面, 如利用数据副本进行拓展等 约束层面或业务规则方面, 实体属性及实体之间关系治理 对象关系映射(ORM)层面, 对象与久存化实体间关系映射 关系型数据建模 第一范式 第二范式 第三范式 Boyce-Codd范式 第四范式 数据拓展性能模式分片(Sharding)单例数据库虽然很强大,但在存储空间和计算资源方面存在局限性.单个服务器在可用性方面不佳, 有些NoSQL数据库, 如Cassandra通过非透明方式进行数据分区以分发数据.但是,大多数据库系统(如大多数RDBMS数据库)不会在内部对数据进行分区.解决方案可以考虑分片, 通过将数据存储划分为一系列水平分区或分片集.每个分片都具有相同的Shema,但拥有一系列不同的数据行.每个分片本身相当于一个数据库, 应用程序将特定数据的请求路由到某些分片, 优点如下： 拓展性好, 可以通过添加额外的分片/节点方式拓展系统 分片之间负载均衡,可减少资源争用 数据访问高效, 可以利用智能安置策略定位或逼近计算所需数据 特别是在云计算环境下,可以将物理上离用户近的分片数据返回, 加快用户数据访问, 改善用户体验. 分片技术的运用, 在存储和访问大量数据时可扩展性强.数据分发方面,挑战在于拓扑发生变化时数据的重新定位,解决该问题主要有以下三种方式: 运用一致性哈希算法 基于客户端路由, 客户端查找映射,确定哪个分片(节点)承载特定密钥(哈希).每当拓扑发生变化时,客户端及时更新并获取最新映射. 典型例子, 如Redis Cluster以该种方式进行分片. 基于代理路由, 存在一中心服务接收IO请求并根据具体拓扑路由到合适的分片. 典型例子, 如MongoDB中的Sharding(分片)遵循该方式 事件溯源 和 物化视图当多计数器进行并发读取, 对读性能有什么影响? 通过更新多个非规范化表, 会使写入事务更加臃肿,增加开销, 影响性能. 此外, 数据所需的计数器或视图可能面临业务逻辑的频繁变更. 若更新所有视图, 有悖于责任分离原则. 处理这种问题,可以考虑的一种模式是事件溯源(Event Sourcing)以及物化视图.在事件溯源中,具体业务服务在执行过程中会触发事件变更, 通过回溯或追踪这一些列事件变更, Voilà, 你得到了不同版本的事件. Event Sourcing, 事件溯源, 本质上是分布式环境中对不同事件的”版本控制系统”. 物化视图, 利用事件进行视图聚合或固化,为特定用例提供必要支持, 换句话说,数据以特定的最佳视图方式进行物化.比如在预订系统中,获取计费的常见方式可以通过调用单独的计费API或视图,并根据预订事件为每个经销商计算费用, 假如有新的需求,如获取过去10分钟内完成的预订单, 可以通过使用相同的Booking预定事件实现新的API.物化视图与非规范化之间的考量在于最终一致性,当然,好处在于解决方案可扩展. 反规范化 (Denormalization)规范化过程旨在消除数据建模中的冗余, 使数据更新更加高效, 如写入无需在多个地方进行数据更新以保持数据一致性和数据完整性. 但也存在限制, 如存在性能瓶颈, 比如读取特定数据时可能需要执行多项数据库操作(连接、扫描等), 容易造成计算瓶颈. 以旅行网站上代理商数据为例, 用户预订旅游服务时, 预订数据建模如下： Bookings (预订数据表): BookingId (预定ID) Date (日期) SKU (标准产品单位) ResellerId (代理商ID) Amount (数量) Fee (费用) Resellers (代理商数据表): ResellerId (代理商ID) Name (代理商名称) Address (代理商联系地址) 其中预订表Bookings中的ResellerID作为外键关联Resellers表.无论何时进行预订, ResellerId及对应费用均由预订DB交易填充. 现在,新增需求—计算代理商当月营收, 可以通过在Bookings表上以ResellerID进行分组, 对日期月份进行筛选, 然后对费用进行求和. 但这种设计在多任务计算密集型环境中容易造成性能瓶颈, 解决思路之一, 可以在Resellers表中保留当前月份的费用计数(新增字段), 如下: ResellerId Name Address Fees due (新增字段) 每次进行预订时, 交易数据库将当前预订费用添加到费用计数列中; 获取当前费用直接通过简单查询即可, 无需每次对全表进行聚合, 缺点在于维护该聚合纬度数据时存在写入开销, 但这种以”IO换CPU”做法可行. 没有最完美的数据建模设计模式, 只有最适合的数据模型设计方式. 非规范化设计, 还有一点在于方便维护变更历史, 规范化模式仅保留系统的当前状态, 无法做到对历史状态进行Tracking回溯. 数据一致性保证 ACID, 关系型数据库中ACID(Atomicity原子性, Consistency一致性, Isolation隔离性, Durability持久性)语义 BASE理论, Basically Available(基本可用)、Soft state(软状态) 及 Eventual Consistency(最终一致性) 三个短语缩略. 其核心思想是即使无法做到强一致性(Strong Consistency,CAP的一致性就是强一致性), 但应用可以采用适合的方式达到最终一致性(Eventual Consitency). 数据存储KV键值对数据存储在分布式系统中应用广泛, 如Redis、ES、Hbase、Cassandra、Scylladb、Codis、Pika等 列式数据存储列式数据存储, 每个数据块Block拥有相似类型数据, 数据压缩更加高效, 从而减少IO及磁盘存储, 其它特性如Predicate Pushdown谓词下压, 可以减少部分无必要数据读取, 加速数据访问. 常见列式存储NoSQL数据库有 Apache HBase Apache Cassandra Apache Accumulo Apache Druid Apache Kudu Clickhouse (已开源, 由俄罗斯搜索引擎巨头Yandex推出) 百度Palo]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Software Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[领域驱动设计之CQRS实战篇]]></title>
    <url>%2Fmicrosrvc%2Faxon-cqrs%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Distributed System</category>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
        <tag>CQRS</tag>
        <tag>JVM</tag>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Bahmani Sketch Algorithm]]></title>
    <url>%2Fbigdata%2Fmahout%2Fdata-sketch%2F</url>
    <content type="text"><![CDATA[Data Sketches技巧, 常用于获取某种特定问题的低解析度表征, 或为获取更好地稳定性在某些非确定算法进行Seed操作. 本文中Bahmani Sketch算法实际上由Bahmani等人于2012年提出的”K-Means II(k, l)初始化”算法II, 该算法相对简单, 但在分布式环境中实现存在一定难度, 本文将探究该算法的分布式实现. 算法原理 Bahmani Sketch算法, 可以视为通过采样方式逼近K-Means算法. 在分布式环境中, 采样算法相对容易实现. 假定输入数据集 $D = \{ x_i \in R^n : i=1, ...m \}$, Data Sketch尺寸为$k$, 其中 $\phi_D$ 计算方式为: $\phi_D(c) = \sum_{x \in D} min_{c \in C} ||x - c||_2^2$ 其中, 数据集 $C = \{ c_i \in R^n : i=1, ...k \}$, $\phi_D(C)$ 表示数据集$D$中每个数据点与另一数据集$C$中最近数据点的距离平方和, Bahmani论文中简化距离公式为: $d(y, C) = min_{c \in C} ||y -c||_2$ 因此, $\phi_D(C)$ 可以变得更加简单 $\phi_D(C) = \sum_{x \in D} d^2(x, C)$ . 假定数据集$C$与$C^{'}$是有序的, 随着时间变化、更新, 对这两数据集做并集时也可保证有序性. Bahmani Sketch算法主要原理, 可概括为以下伪代码: MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 给定数据集 $ D = \{ x_i \in R^n : i=1, …m \} $, 过采样参数 $l$, 假定算法逼近数据sketch尺寸为$k$, $k \ll m$ $C \leftarrow $从数据集 $D$ 中随机采样(假定采样符合随机正态分布) $ \psi \leftarrow \phi_x (C) $ for $O(log\psi)$ 次 do a) $C^{‘} \leftarrow $ 对 $x \in D$ 数据点进行独立采样, 且概率满足: $p_x = \frac{l * d^2(x, C)}{\phi_D(C)} $ b) 更新 $C \leftarrow C \cup C^{‘}$end-for 对于$c_i \in C$, 假定$D$ 中数据点 $w_i$ 为最靠近 $c_i$的数据点 对$C$ 中权重点进行重聚类至$k$个聚类 $C^{n}$ 返回 $C^{n}$ MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 代码实战算法实现要求给定$n$纬空间中$m$个数据点, 获取$k$个数据点, 其中$k \ll N$, 在满足给定数据集统计需求情况下, 尽可能做到CPU和内存代价不比$O(m)$差. 本文Bahmani Sketch算法将采用Mahout进行编码实现. Why Mahout ?随着2014年Yann LeCun博士等人在深度学习方面研究成果的重大突破, 深度学习、GPU、TPU开始大热. 或许你会问Why Mahout, Why not Tensorflow? 首先, GPU虽然并行计算能力较强, 但GPU分布式节点拓展能力暂时还没方法和Hadoop等生态组件比拟. 成本问题, 目前高性能计算GPU还比较昂贵, 而Hadoop等分布式组件可以部署在廉价服务器上. (并非所有厂商都能用得上GPU, 某些中小厂商算法团队能用上一两台GPU机器已算是欣慰了) 关于Mahout, 自2014年Mahout PMC开始全面拥抱Spark和Flink, 采用Scala重写Mahout源码, 计算引擎由原来的MapReduce替换为Spark和Flink(也支持H2O). 这意味着Mahout迭代训练速度大大提升, 之前MapReduce任务漫长的等待时日”一去不复返”. 代码遗留问题, Mahout推出时间较早, 国内多数早期采用Hadoop生态组件的厂商在分布式算法迭代训练组件选型时多少会接触到Mahout. 当然, 除了Mahout组件外, 其它分布式机器学习、深度学习组件参考如下: Spark MLlib/ML H2O, 硅谷初创公司H2O.AI推出, 支持分布式迭代、训练, 支持部分深度学习算法 Deeplearning4J, 由SkyMind团队推出, 充分利用Spark、Hadoop等生态组件进行分布式迭代训练, 支持多数深度学习算法 Tensorflow on Spark(即TensorFrame) 采样算法并行化 由数据集$D$引入矩阵$X$, 即 $X_i* \triangleq x_i$, 对于Cardinality而言, $|D| = m$. 由于 $\sum_{x \in D} \frac{d^2(x, C)}{\phi_D(c)} = 1$, 对于新采样数据点而言, 期望值满足 $E(|C^{'}|) = l$, 通常参数$l$选取为 $l$ ~ $0.5k...2k$, 最终 $E(|C|) \ll m$ . Bahmani算法分布式采样算法如下, 给定迭代次数$I$, 由数据集$D$引入输入矩阵$X$, 最终Sketch大小$k$, 采样伪代码如下: 假定 $l \leftarrow 2I/k$, 初始化 $Y \leftarrow cbind(0, +Inf, X)$, 采样$C$, 正态分布逼近$l$个数据点, 然后更新 $Y(0, C)$ MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 其中, 更新$Y(C, C^{‘})$算法主要步骤如下: 给定采样数据集$C^{‘}$, 矩阵$Y$, 距离均方矩阵$D$计算方式: $D_{ij} = || c^{r(i)} - c^{r(j)} ||_2^2 $, 其中 $c^{r(i)} \in C^{‘}, c^{r(j)} \in C{‘} $ MathJax.Hub.Config({ tex2jax: { inlineMath: [ ['$','$'], ["\\(","\\)"] ], displayMath: [ ['$$','$$'], ["\\[","\\]"] ], processEscapes: true } }); 分布式采样代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344def dSample[K: ClassTag](drmA: DrmLike[K], sketchSize: Int, iterations: Int, seed: Int = Random.nextInt()): (Maxtrix, DrmLike[K]) = &#123; implicit val ctx = drmA.context val l = sketchSize * 2 / iterations + 1 max 1 val n = drmA.ncol var drmY = drmAToY(drmA).checkpoint() var mxC = drmSampleKRows(drmY, 1) mxC = mxC(::, 2 until n + 2) drmY = updateY(drmY, mxC, cStart=0).checkpoint() for (iter &lt;- 0 until (iterations -1 max 1)) &#123; val innerN = n val innerL = 1 val phi = drmY(::, 1 to l).colSum()(0) val subseed = seed + iter val mxCPrime = drmY.allreduceBlock( &#123; case (keys, yblock) =&gt; if (yblock.nrow &gt; 0) &#123; val vDSq = yblock(::, 1) val ablock = yblock(::, 2 until innerN + 2) val rnd = new Random(subseed * keys(0).hashCode()) val selected = new mutable.ArrayBuffer[Int](200) for (r &lt;- 0 until ablock.nrow) &#123; val p = innerL * vDSq(r) / phi if (rnd.nextDouble &lt;= p) selected += r &#125; val cPrimeBlock: Matrix = yblock.like(selected.size, innerN) selected.zipWithIndex.foreach &#123; case (idx, i) =&gt; cPrimeBlock(i, ::) = ablock(idx, ::) &#125; cPrimeBlock &#125; else &#123; new DenseMatrix(0, innerN) &#125; &#125;, _ rbind _ ) drmY = updateY(drmY, mxCPrime, mxC.nrow).checkpoint() mxC = mxC rbind mxCPrime &#125; mxC -&gt; drmY&#125; 其中, 矩阵更新函数updateY代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243private def updateY[K: ClassTag](drmY: DrmLike[K], mxC: Matrix, cStart: Int): DrmLike[K] = &#123; implicit val ctx = drmY.context val mxCBcast = drmBroadcast(mxC) drmY.mapBlock() &#123; case (keys, yblock) =&gt; updateYBlock(yblock, mxCBcast, cStart) keys -&gt; yblock &#125;&#125;private def updateYBlock(mxY: Matrix, mxC: Matrix, cStart: Int): Unit = &#123; val n = mxY.ncol - 2 val k = mxC.nrow val mxA = mxY(::, 2 until n + 2) val vLabels = mxY(::, 0) val vSqD = mxY(::, 1) val mxCDsq = dist(mxC) /= 4 for (row &lt;- mxA) &#123; var minC = 0 var minCDsq = (row - mxC(minC, ::)) ^= 2 sum for (c&lt;- 1 until k) &#123; if (mxCDsq(minC, c) &lt;= minCDsq &amp;&amp; sqr(mxC(c, ::).norm(2) - row.norm(2)) &lt;= minCDsq) &#123; val dSq = (row - mxC(c, ::)) ^= 2 sum if (dSq &lt; minCDsq) &#123; minC = c minCDsq = dSq &#125; &#125; &#125; if (cStart == 0 || minCDsq &lt; vSqD(row.index)) &#123; vLabels(row.index) = minC + cStart vSqD(row.index) = minCDsq &#125; &#125;&#125; 其中, 矩阵$Y$ 构造代码示意如下: 1234567private def drmAToY[K: ClassTag] (drmA: DrmLike[K]): DrmLike[K] = &#123; drmA.mapBlock(drmA.ncol + 2) &#123; case (keys, block) =&gt; val yBlock = new DenseMatrix(block.nrow, 2) cbind block keys -&gt; yBlock &#125;&#125; 计算采样点权重参考代码如下: 123456789101112def computePointWeights[K: ClassTag] (drmY: DrmLike[K], nC: Int): Vector = &#123; val vWeights = drmY.allreduceBlock(&#123; case (keys, yblock) =&gt; val wvec = new DenseVector(nC) val labels = yblock(::, 0).all .foreach &#123;sgm =&gt; wvec(sgm.toInt) += 1&#125; dense(wvec) &#125;)(0, ::) val s = vWeights.sum vWeithts /= s&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Machine Learning</tag>
        <tag>Distributed Algorithm</tag>
        <tag>Apache Mahout</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (二) -- Kotlin Property优化 (Part Two)]]></title>
    <url>%2Fkt%2Fprops-inspct%2F</url>
    <content type="text"><![CDATA[之所以想写这个系列的Kotlin笔记, 主要原因在于Kotlin协程丰富了JVM生态. 有人说Kotlin语法像Scala, 但个人感觉Kotlin比Java更像C++, 比如Kotlin在闭包上使用了大量的内联(inline)技巧进行性能优化. 尽管Java也有一些协程相关的包可以用, 但远不如Kotlin协程优雅, 更具表现力. 尽管你可以使用:Akka Actor (或者类似的Actor包)RxJava (或类似的Reactive响应式框架, 比如Vert.x)开发高性能高并发应用程序, 以上抽象均为Message Driven或Event Driven(消息驱动或事件驱动), 但有些业务场景如果考虑使用Event-Driven建模, 未免过于重量级, 于是你需要更加轻量级的替代方案, 比如Future/Promise (异步非阻塞, 本质为占位符(Placeholder), 仅适用于单个值), 比如轻量级线程—协程. 尽管Kotlin协程本质上也是使用JVM线程池进行封装, 但Kotlin协程在JVM生态同等实现中表现出色! 最重要的是, 作为JVM语言, 不仅Java可以使用Kotlin协程, Scala/Groovy/Clojure照样也可使用Kotlin协程. 本博文将对Kotlin Property使用过程中遇到的”坑点”进行梳理汇总, 欢迎入”坑”, 逆风成长! 本博文要点如下: 首先, 简单介绍下Kotlin内部类对Property访问限制问题 然后, 对Kotlin伴生对象优化问题进行剖析 接着, 对Kotlin中lateinit 延迟初始化问题进行探讨 最后, 对Kotlin编译时常量提供使用建议 内部类中Property访问先来看下内部类相关的一段简单代码: 12345678class Main &#123; inner class Inner &#123; fun printValue() &#123; println(value) &#125; &#125; private var value = "Value"&#125; 上面这段代码字节码反编译成Java源码如下, 可以看到编译器将类Main和Inner作为俩个单独的类, 并且生成特定的方法保证内部类能访问外部类的私有成员. 123456789101112131415public final class Main &#123; private String value = "Value"; // $FF: synthetic method public static final void access$setValue$p(Main $this, @NotNull String var1) &#123; $this.value = var1; &#125; public final class Inner &#123; public final void printValue() &#123; String var1 = Main.this.value; System.out.println(var1); &#125; &#125;&#125; 如果细看字节码, 你会发现内部类的printValue()方法实际调用了外部类的静态方法access$setValue$p 12345678910111213141516171819public final printValue()VL0LINENUMBER 84 L0ALOAD 0GETFIELD Main$Inner.this$0 : LMain;INVOKESTATIC Main.access$getValue$p (LMain;)Ljava/lang/String;ASTORE 1L1GETSTATIC java/lang/System.out : Ljava/io/PrintStream;ALOAD 1INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)VL2L3LINENUMBER 85 L3RETURNL4LOCALVARIABLE this LMain$Inner; L0 L4 0MAXSTACK = 2MAXLOCALS = 2 如果想让内部类Inner直接访问外部类Main的成员value该怎么做? 给value加public限定符吗? 这种方法肯定不行, 因为编译器依然会为外部类成员value生成setter和setter, 内部类仍通过value的getter和setter对其进行访问. 回顾上篇博文, 可以使用@JvmField解决这个问题. 对value添加注解@JvmField后, 对应字节码反编译成Java源码如下: 123456789101112public final class Main &#123; @JvmField @NotNull public String value = "Value"; public final class Inner &#123; public final void printValue() &#123; String var1 = Main.this.value; System.out.println(var1); &#125; &#125;&#125; 伴生对象的问题Kotlin中没有静态对象,没有静态方法, 但可以通过伴生对象的方式实现类似目的. 对于Kotlin伴生对象而言, 当一个类被加载至内存时才会创建对应的伴生对象. 先来看段代码, 这段代码比较简单: 12345678910111213class Main private constructor() &#123; private var id: Int? = null companion object &#123; var prevId = -1 fun newInstance(): Main &#123; val main = Main() main.id = ++prevId return main &#125; &#125;&#125; 你能看出这段代码的性能呢问题吗? 不急, 可以先看下字节码, 类Main中包含了方法&lt;clinit&gt;,该方法在类加载和初始化伴生对象时被调用. 12345678910111213static &lt;clinit&gt;()VNEW Main$CompanionDUPACONST_NULLINVOKESPECIAL Main$Companion.&lt;init&gt; (Lkotlin/jvm/internal/DefaultConstructorMarker;)VPUTSTATIC Main.Companion : LMain$Companion;L0LINENUMBER 94 L0ICONST_M1PUTSTATIC Main.id : IRETURNMAXSTACK = 3MAXLOCALS = 0 方法&lt;clinit&gt;调用一个非默认构造器, 该构造器是编译器为伴生对象生成的特殊构造器: 1234567891011public synthetic &lt;init&gt;(Lkotlin/jvm/internal/DefaultConstructorMarker;)VL0LINENUMBER 92 L0ALOAD 0INVOKESPECIAL Main$Companion.&lt;init&gt; ()VRETURNL1LOCALVARIABLE this LMain$Companion; L0 L1 0LOCALVARIABLE $constructor_marker Lkotlin/jvm/internal/DefaultConstructorMarker; L0 L1 1MAXSTACK = 1MAXLOCALS = 2 生成的Main$Companion类包含一对为prevId生成的gettter和setter: 123456789101112131415161718192021public final getPrevId()IL0LINENUMBER 96 L0INVOKESTATIC Main.access$getPrevId$cp ()IIRETURNL1LOCALVARIABLE this LMain$Companion; L0 L1 0MAXSTACK = 1MAXLOCALS = 1public final setPrevId(I)VL0LINENUMBER 96 L0ILOAD 1INVOKESTATIC Main.access$setPrevId$cp (I)VRETURNL1LOCALVARIABLE this LMain$Companion; L0 L1 0LOCALVARIABLE &lt;set-?&gt; I L0 L1 1MAXSTACK = 1MAXLOCALS = 2 这些方法调用其他生成方法, 以便访问类Main中静态变量prevId: 1234567891011121314151617181920public final static synthetic access$getPrevId$cp()I L0 LINENUMBER 90 L0 GETSTATIC Main.prevId : I IRETURN L1 MAXSTACK = 1 MAXLOCALS = 0 // access flags 0x1019 public final static synthetic access$setPrevId$cp(I)V L0 LINENUMBER 90 L0 ILOAD 0 PUTSTATIC Main.prevId : I RETURN L1 LOCALVARIABLE &lt;set-?&gt; I L0 L1 0 MAXSTACK = 1 MAXLOCALS = 1 类Main当然也包含了对id变量访问的其他生成方法: 12345678910111213141516171819202122232425public final static synthetic access$getId$p(LMain;)Ljava/lang/Integer;@Lorg/jetbrains/annotations/Nullable;() // invisibleL0LINENUMBER 90 L0ALOAD 0GETFIELD Main.id : Ljava/lang/Integer;ARETURNL1LOCALVARIABLE $this LMain; L0 L1 0MAXSTACK = 1MAXLOCALS = 1public final static synthetic access$setId$p(LMain;Ljava/lang/Integer;)V@Lorg/jetbrains/annotations/Nullable;() // invisible, parameter 1L0LINENUMBER 90 L0ALOAD 0ALOAD 1PUTFIELD Main.id : Ljava/lang/Integer;RETURNL1LOCALVARIABLE $this LMain; L0 L1 0LOCALVARIABLE &lt;set-?&gt; Ljava/lang/Integer; L0 L1 1MAXSTACK = 2MAXLOCALS = 2 从上面这一堆字节码, 可以看出什么东西? 实际上类Main生成了一堆不需要的函数和方法. 有更好地解决方案吗? 有, 可以重构代码如下: 1234567891011121314151617@file:JvmName("Main")@JvmFieldvar prevId = -1class Main private constructor() &#123; private var id: Int? = null companion object &#123; @JvmStatic fun newInstance(): Main &#123; val main = Main() main.id = ++prevId return main &#125; &#125;&#125; 其中, @file:JvmName(Main)注解告诉编译器所有的顶层成员必须包含在Main类中, @JvmStatic注解告诉编译器newInstance()方法作为静态方法生成. 现在只有一个额外方法生成, 对应字节码如下: 1234567891011public synthetic &lt;init&gt;(Lkotlin/jvm/internal/DefaultConstructorMarker;)V L0 LINENUMBER 21 L0 ALOAD 0 INVOKESPECIAL io/xavier/property/Main$Companion.&lt;init&gt; ()V RETURN L1 LOCALVARIABLE this Lio/xavier/property/Main$Companion; L0 L1 0 LOCALVARIABLE $constructor_marker Lkotlin/jvm/internal/DefaultConstructorMarker; L0 L1 1 MAXSTACK = 1 MAXLOCALS = 2 lateinit 延迟初始化问题有时我们需要在类初始化后初始化一些Properties, 且不希望创建一nullable类型, 通常我们会使用主构造器, 避免创建的实例Property没有初始化, 如下: 123class CoffeeShop @Inject constructor(val coffee: Coffee) &#123; // 省略具体实现代码&#125; 但是在Android开发中存在一个问题, 比如Activity或Service类构造器直接由操作系统调用, 而我们并不能重写这些构造器. 一种解决方式是通过使用setter进行初始化, 如下: 1234private var coffee: Coffee? = null @Inject set(value) &#123; field = value &#125; 还有一种方式是通过使用lateinit关键字并将修饰的字段放到onCreate()方法中, 如下: 123456class Main &#123; private lateinit var name: String fun onCreate() &#123; name = "Jack" &#125;&#125; 字节码如下,可以看到类Main被编译成拥有正常field的Java类: 12345678910111213141516171819202122232425262728public final class Main &#123; private Ljava/lang/String; name public final onCreate()V L0 LINENUMBER 12 L0 ALOAD 0 LDC "Jack" PUTFIELD Main.name : Ljava/lang/String; L1 LINENUMBER 13 L1 RETURN L2 LOCALVARIABLE this LMain; L0 L2 0 MAXSTACK = 2 MAXLOCALS = 1 public &lt;init&gt;()V L0 LINENUMBER 7 L0 ALOAD 0 INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V RETURN L1 LOCALVARIABLE this LMain; L0 L1 0 MAXSTACK = 1 MAXLOCALS = 1&#125; 在上面的onCreate()方法中加点东西, 如: 12345fun onCreate() &#123; name = "Jack" println(name)&#125; 对应字节码如下: 12345678910111213141516171819202122232425262728public final onCreate()VL0LINENUMBER 84 L0ALOAD 0LDC "Jack"PUTFIELD Main.name : Ljava/lang/String;L1LINENUMBER 86 L1ALOAD 0GETFIELD Main.name : Ljava/lang/String;DUPIFNONNULL L2LDC "name"INVOKESTATIC kotlin/jvm/internal/Intrinsics.throwUninitializedPropertyAccessException (Ljava/lang/String;)VL2ASTORE 1L3GETSTATIC java/lang/System.out : Ljava/io/PrintStream;ALOAD 1INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)VL4L5LINENUMBER 87 L5RETURNL6LOCALVARIABLE this LMain; L0 L6 0MAXSTACK = 2MAXLOCALS = 2 其中, 访问name并获取该值, 会调用额外一层检测: 123IFNONNULL L2LDC "name"INVOKESTATIC kotlin/jvm/internal/Intrinsics.throwUninitializedPropertyAccessException (Ljava/lang/String;)V 所以从被lateinit关键字修饰的字段获取值时, 最好将值放到临时变量中: 123456fun onCreate() &#123; name = "Jack" val name = this.name println(name)&#125; 这样的话, 只会调用一次检测Intrinsics.throwUninitializedPropertyAccessException, 上面这段代码的字节码如下 12345678910111213141516171819202122232425262728293031public final onCreate()VL0LINENUMBER 90 L0ALOAD 0LDC "Jack"PUTFIELD Main.name : Ljava/lang/String;L1LINENUMBER 92 L1ALOAD 0GETFIELD Main.name : Ljava/lang/String;DUPIFNONNULL L2LDC "name"INVOKESTATIC kotlin/jvm/internal/Intrinsics.throwUninitializedPropertyAccessException (Ljava/lang/String;)VL2ASTORE 1L3LINENUMBER 93 L3L4GETSTATIC java/lang/System.out : Ljava/io/PrintStream;ALOAD 1INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)VL5L6LINENUMBER 94 L6RETURNL7LOCALVARIABLE name Ljava/lang/String; L3 L7 1LOCALVARIABLE this LMain; L0 L7 0MAXSTACK = 2MAXLOCALS = 2 或者可以使用其他函数, 如also()函数, also函数是一个内联函数, 所以不会有太大的性能损耗. 1234567fun onCreate() &#123; name = "Jack" name.also &#123; println(it) &#125;&#125; 编译时常量使用建议编译时常量(Complie-time Constant)作为只读变量在编译时进行初始化, 编译时常量一般满足以下几个要求: 必须在顶层声明或作为对象成员 不能有 getter 或 setter 必须使用原始类型或字符串值进行初始化 为更好地理解编译时常量,可以做个小测试 123val point = Point()const val compileTime: Int = 5fun compileTimeFunction() = compileTime + compileTime 字节码如下, 可以看到编译器生成了特殊的初始化方法&lt;clinit&gt;对point进行初始化, point使用private访问限定符修饰, 意味着使用getter或setter访问. 123456789101112131415161718192021222324252627282930313233343536public final class MainKt &#123; private final static Ljava/awt/Point; point @Lorg/jetbrains/annotations/NotNull;() // invisible public final static getPoint()Ljava/awt/Point; @Lorg/jetbrains/annotations/NotNull;() // invisible L0 LINENUMBER 77 L0 GETSTATIC MainKt.point : Ljava/awt/Point; ARETURN L1 MAXSTACK = 1 MAXLOCALS = 0 public final static I compileTime = 5 public final static compileTimeFunction()I L0 LINENUMBER 81 L0 BIPUSH 10 IRETURN L1 MAXSTACK = 1 MAXLOCALS = 0 static &lt;clinit&gt;()V L0 LINENUMBER 77 L0 NEW java/awt/Point DUP INVOKESPECIAL java/awt/Point.&lt;init&gt; ()V PUTSTATIC MainKt.point : Ljava/awt/Point; RETURN MAXSTACK = 2 MAXLOCALS = 0&#125; 为避免point生成getter和setter, 回顾上篇博文, 可以考虑使用@JvmField注解: 12345@JvmFieldval point = Point()const val compileTime: Int = 5fun compileTimeFunction() = compileTime + compileTime 字节码如下, 可以看到&lt;clinit&gt;方法依然存在: 12345678910111213141516171819202122232425262728public final class MainKt &#123; public final static Ljava/awt/Point; point @Lkotlin/jvm/JvmField;() // invisible @Lorg/jetbrains/annotations/NotNull;() // invisible public final static I compileTime = 5 public final static compileTimeFunction()I L0 LINENUMBER 82 L0 BIPUSH 10 IRETURN L1 MAXSTACK = 1 MAXLOCALS = 0 static &lt;clinit&gt;()V L0 LINENUMBER 78 L0 NEW java/awt/Point DUP INVOKESPECIAL java/awt/Point.&lt;init&gt; ()V PUTSTATIC MainKt.point : Ljava/awt/Point; RETURN MAXSTACK = 2 MAXLOCALS = 0 &#125; 结论: 尽量避免使用非编译时常量作为顶级成员.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (四) -- Kotlin Delegate (Part Two)]]></title>
    <url>%2Fkt%2Fdlgt-props%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (三) -- Kotlin协程]]></title>
    <url>%2Fkt%2Fcoroutines%2F</url>
    <content type="text"><![CDATA[之所以想写这个系列的Kotlin笔记, 主要原因在于Kotlin协程丰富了JVM生态. 有人说Kotlin语法像Scala, 但个人感觉Kotlin比Java更像C++, 比如Kotlin在闭包上使用了大量的内联(inline)技巧进行性能优化. 尽管Java也有一些协程相关的包可以用, 但远不如Kotlin协程优雅, 更具表现力. 尽管你可以使用:Akka Actor (或者类似的Actor包)RxJava (或类似的Reactive响应式框架, 比如Vert.x)开发高性能高并发应用程序, 以上抽象均为Message Driven或Event Driven(消息驱动或事件驱动), 但有些业务场景如果考虑使用Event-Driven建模, 未免过于重量级, 于是你需要更加轻量级的替代方案, 比如Future/Promise (异步非阻塞, 本质为占位符(Placeholder), 仅适用于单个值), 比如轻量级线程—协程. 尽管Kotlin协程本质上也是使用JVM线程池进行封装, 但Kotlin协程在JVM生态同等实现中表现出色! 最重要的是, 作为JVM语言, 不仅Java可以使用Kotlin协程, Scala/Groovy/Clojure照样也可使用Kotlin协程. Kotlin协程允许开发者以顺序化的方式编写异步代码, Kotlin协程概念主要基于Suspended Computation, 但并不阻塞线程. Kotlin协程实现主要基于以下三点: 语言级别支持 (如suspend关键字) Kotlin标准库Low-level核心API (如线程) 高级API (如CoroutineContext) 本博文主要关于Kotlin协程常见方法源码剖析以及应用实战. 添加依赖Maven工程, 增加以下Maven依赖: 12345&lt;dependency&gt; &lt;groupId&gt;org.jetbrains.kotlinx&lt;/groupId&gt; &lt;artifactId&gt;kotlinx-coroutines-core&lt;/artifactId&gt; &lt;version&gt;YOUR-VERSION-HERE&lt;/version&gt;&lt;/dependency&gt; Grade项目, 增加依赖如下: 123dependencies &#123; implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:THE-VERSION-YOU-CHOOSE'&#125; Android项目, 增加以下依赖模块: 1implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:THE-VERSION-YOU-CHOOSE' Kotlin协程常见方法Kotlin常见方法有: lauch async buildSequence lauchlauch函数可以这样使用: 1234567val job = lauch &#123; val suspendLambda = suspend &#123; delay(1, TimeUnit.SECONDS) println("Hi from suspend lambda") &#125; suspendLambda()&#125; suspend关键字用于指明被调用函数可以挂起,且只能被另一协程调用. delay将使协程停止一段时间, 常用于调试.lauch函数可用于调用suspend lambda, 其源码如下: 1234567891011121314151617181920212223242526public actual fun launch( context: CoroutineContext = DefaultDispatcher, start: CoroutineStart = CoroutineStart.DEFAULT, parent: Job? = null, block: suspend CoroutineScope.() -&gt; Unit): Job &#123; val newContext = newCoroutineContext(context, parent) val coroutine = if (start.isLazy) LazyStandaloneCoroutine(newContext, block) else StandaloneCoroutine(newContext, active = true) coroutine.initParentJob(newContext[Job]) start(block, coroutine, coroutine) return coroutine&#125;// 简化版 `Job` 源码如下public actual interface Job : CoroutineContext.Element &#123; public actual val isActive: Boolean public actual val isCompleted: Boolean public actual val isCancelled: Boolean public actual fun start(): Boolean public actual fun cancel(cause: Throwable? = null): Boolean public actual suspend fun join()&#125; Job类代表一可以取消的Task,具有一定生命周期且可拥有子任务.在其生命周期内, Job存在以下状态: 新建 (New) 活跃 (Active) 正在完成 (Completing) 已经完成 (Completed) 正在取消 (Canceling) 已经取消 (Canceled) Job类中join方法挂起(Suspend)协程直到Job结束, 其方法签名如下: 1public actual suspend fun join() 当然, 你也可以从返回CoroutineContext实例的方法(如lauch方法)中调用join方法. 值得注意的是, 上面代码中suspendLambda将在另一独立线程中调用, 因此主线程会等待,直到suspendLambda完成. 12345678910111213141516171819202122232425262728// 使用`runBlocking` 迫使主线程main等待`suspendLambda`完成fun main(args: Array&lt;String&gt;) = runBlocking &#123; val job = launch &#123; val suspendLambda = suspend &#123; delay(1, TimeUnit.SECONDS) println("Hello from suspend lambda") &#125; suspendLambda() &#125; job.join()&#125;// `runningBlock`可以调用`suspend` lambda或其他函数, 调用时会阻塞线程, 源码如下public fun &lt;T&gt; runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -&gt; T): T &#123; val currentThread = Thread.currentThread() val eventLoop = if (context[ContinuationInterceptor] == null) BlockingEventLoop(currentThread) else null val newContext = newCoroutineContext(context + (eventLoop ?: EmptyCoroutineContext)) val coroutine = BlockingCoroutine&lt;T&gt;(newContext, currentThread, privateEventLoop = eventLoop != null) coroutine.initParentJob(newContext[Job]) block.startCoroutine(coroutine, coroutine) return coroutine.joinBlocking()&#125; async12345678910111213141516171819202122232425262728293031323334public actual fun &lt;T&gt; async( context: CoroutineContext = DefaultDispatcher, start: CoroutineStart = CoroutineStart.DEFAULT, parent: Job? = null, block: suspend CoroutineScope.() -&gt; T): Deferred&lt;T&gt; &#123; val newContext = newCoroutineContext(context, parent) val coroutine = if (start.isLazy) LazyDeferredCoroutine(newContext, block) else DeferredCoroutine&lt;T&gt;(newContext, active = true) coroutine.initParentJob(newContext[Job]) start(block, coroutine, coroutine) return coroutine&#125;// `Deferred`源码如下,该接口代表着协程执行的future resultpublic actual interface Deferred&lt;out T&gt; : Job &#123; public actual val isCompletedExceptionally: Boolean public actual suspend fun await(): T public val onAwait: SelectClause1&lt;T&gt; public actual fun getCompleted(): T public actual fun getCompletionExceptionOrNull(): Throwable? @Deprecated(message = "Use `isActive`", replaceWith = ReplaceWith("isActive")) public val isComputing: Boolean get() = isActive&#125; 来看一段示例代码: 1234567891011121314// `Bakery`中方法, 通过使用`async`异步烘烤给定数量蛋糕suspend fun coroutinesOrder(amountOfCakes: Int): List&lt;Cake&gt; &#123; //烤炉实例化, 烤炉及烘烤方法具体实现暂略 val baker = Baker() return (0 until amountOfCakes) .map &#123; async &#123; baker.bake() &#125; &#125; // 调用`await`方法获取列表中每项deferred值 .map &#123; it.await()&#125;&#125;fun main(args: Array&lt;String&gt;) = runBlocking &#123; val cakes = Bakery().coroutinesOrder(10) println("Number of cakes: $&#123;cakes.size&#125;")&#125; buildSequence1234567891011// `buildSequence` 源码public fun &lt;T&gt; buildSequence(builderAction: suspend SequenceBuilder&lt;T&gt;.() -&gt; Unit): Sequence&lt;T&gt; = Sequence &#123; buildIterator(builderAction) &#125;// `buildItertor` 源码如下public fun &lt;T&gt; buildIterator(builderAction: suspend SequenceBuilder&lt;T&gt;.() -&gt; Unit): Iterator&lt;T&gt; &#123; val iterator = SequenceBuilderIterator&lt;T&gt;() iterator.nextStep = builderAction.createCoroutineUnchecked(receiver = iterator, completion = iterator) return iterator&#125;]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (二) -- Kotlin Property优化(Part One)]]></title>
    <url>%2Fkt%2Foptmz-props%2F</url>
    <content type="text"><![CDATA[之所以想写这个系列的Kotlin笔记, 主要原因在于Kotlin协程丰富了JVM生态. 有人说Kotlin语法像Scala, 但个人感觉Kotlin比Java更像C++, 比如Kotlin在闭包上使用了大量的内联(inline)技巧进行性能优化. 尽管Java也有一些协程相关的包可以用, 但远不如Kotlin协程优雅, 更具表现力. 尽管你可以使用:Akka Actor (或者类似的Actor包)RxJava (或类似的Reactive响应式框架, 比如Vert.x)开发高性能高并发应用程序, 以上抽象均为Message Driven或Event Driven(消息驱动或事件驱动), 但有些业务场景如果考虑使用Event-Driven建模, 未免过于重量级, 于是你需要更加轻量级的替代方案, 比如Future/Promise (异步非阻塞, 本质为占位符(Placeholder), 仅适用于单个值), 比如轻量级线程—协程. 尽管Kotlin协程本质上也是使用JVM线程池进行封装, 但Kotlin协程在JVM生态同等实现中表现出色! 最重要的是, 作为JVM语言, 不仅Java可以使用Kotlin协程, Scala/Groovy/Clojure照样也可使用Kotlin协程. Kotlin中Property使用, 与Java相比, 还是有些区别, 本博文将介绍Kotlin中Property使用及注意事项, 并给出对应性能优化建议. Property 初探先来看段示例代码, 如下: 12345678// 简单定义一个`Button`类, 属性有文本内容、背景颜色、点击监听器// 注意 `TODO()` 方法在Kotlin标准库中有定义, 是标准库中一方法, // 可以用于方法,表明不想立即实现该方法;也可用于类,对类建模时不想立即实现特定的类成员class Button &#123; var text: String = TODO() var backgroundColor: Int = TODO() var onClickListener: ((Button) -&gt; Unit)? = null&#125; 将上面这段代码的字节码反编译成Java源码如下: 12345678910111213141516171819202122232425262728293031323334353637383940public final class Button &#123; @NotNull private String text; private int backgroundColor; @Nullable private Function1 onClickListener; @NotNull public final String getText() &#123; return this.text; &#125; public final void setText(@NotNull String var1) &#123; Intrinsics.checkParameterIsNotNull(var1, "&lt;set-?&gt;"); this.text = var1; &#125; public final int getBackgroundColor() &#123; return this.backgroundColor; &#125; public final void setBackgroundColor(int var1) &#123; this.backgroundColor = var1; &#125; @Nullable public final Function1 getOnClickListener() &#123; return this.onClickListener; &#125; public final void setOnClickListener(@Nullable Function1 var1) &#123; this.onClickListener = var1; &#125; public Button() &#123; throw (Throwable) ( new NotImplementedError((String)null, 1, (DefaultConstructorMarker)null) ); &#125;&#125; Kotlin为这三个类属性分别加上了getter和setter方法.值得注意的是text属性加上了NotNull注解, 并且在类构造器中抛出异常, Why? 点开TODO()源码, 该方法返回类型为Noting, 具体实现为抛出NotImplementedError异常. Button类中三个类属性, onClickListener初始化为null, 其它俩个属性均使用TODO()方法初始化, 现在可以理解构造器本质上抛出的NotImplementedError. 还有一个小细节, 虽然text和backgroundColor属性均使用TODO()方法初始化,但在构造器中text属性参数为null,而backgroundColor属性参数为1? 出现这种现象主要在于俩属性的类型不同导致,text属性为字符串类型, backgroundColor类型为Int, 在Java/Kotlin中字符串默认初始化参数为空, 而整型Int存在默认初始化参数. 1234567// `TODO()` 方法源码@kotlin.internal.InlineOnlypublic inline fun TODO(): Nothing = throw NotImplementedError()@kotlin.internal.InlineOnlypublic inline fun TODO(reason: String): Nothing = throw NotImplementedError("An operation is not implemented: $reason") Backing Property 初探现在对Button类进行重构如下:1234567891011121314151617181920class Button &#123; var text: String? = null //自定义 getters和setters 方法 set(value) &#123; println(value) text = value &#125; get() &#123; return field + field &#125; var backgroundColor: Int? = null var onClickListener: ((Button) -&gt; Unit)? = null&#125;// 测试 `Button`类fun main(args: Array&lt;String&gt;) &#123; Button().text = "Generating a simple Button"&#125; 试着运行这段代码,很不幸,打印几个”Generating a simple Button”后立即抛出StackOverflowError, What’s wrong? 别急, 先从字节码上找原因, Button类字节码如下, 可以看到setText方法调用自身, 导致栈内存溢出. 1234567891011121314151617181920212223// access flags 0x11public final setText(Ljava/lang/String;)V@Lorg/jetbrains/annotations/Nullable;() // invisible, parameter 0L0LINENUMBER 21 L0L1GETSTATIC java/lang/System.out : Ljava/io/PrintStream;ALOAD 1INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)VL2L3LINENUMBER 22 L3ALOAD 0ALOAD 1INVOKEVIRTUAL Button.setText (Ljava/lang/String;)VL4LINENUMBER 23 L4RETURNL5LOCALVARIABLE this LButton; L0 L5 0LOCALVARIABLE value Ljava/lang/String; L0 L5 1MAXSTACK = 2MAXLOCALS = 2 通常使用getters和setters访问类成员(fields), 以便编译器内联并直接引用. 但在某种情况下, 比如Android开发过程中, 有时使用getters和setters未必性能最优, 理由如下: Android 4.4及以下版本使用Dalvik虚拟机, Dalvik基于JIT(及时)编译, 意味着每次运行App时, Dalvik将字节码编译成机器码 Android 4.4及以上版本使用功ART(Android Runtime)技术, ART基于AOT(运行前)编译, 意味着App在安装时由字节码编译成机器码 Android 4.4既支持Dalvik, 也支持ART 根据安卓官方性能优化建议, 直接访问fields比在ART中调用getters和setters快三倍, 比在Dalvik中调用getters和setters快7倍. Backing Property与Private限定符可以使用Backing Properties直接访问类成员. 现在重构Button类如下: 12345678910111213141516171819class Button &#123; private var _text: String? = null var text: String set(value) &#123; println(value) _text = value &#125; get() &#123; return _text + _text &#125; var backgroundColor: Int? = null var onClickListener: ((Button) -&gt; Unit)? = null fun printText() &#123; println(_text) &#125;&#125; 将上面这段代码反编译成Java源码如下, 注意到Kotlin为_text属性生成getters和setters方法, 而text没有. 1234567891011121314151617181920212223242526272829303132333435363738394041public final class Button &#123; private String _text; @Nullable private Integer backgroundColor; @Nullable private Function1 onClickListener; @NotNull public final String getText() &#123; return Intrinsics.stringPlus(this._text, this._text); &#125; public final void setText(@NotNull String value) &#123; Intrinsics.checkParameterIsNotNull(value, "value"); System.out.println(value); this._text = value; &#125; @Nullable public final Integer getBackgroundColor() &#123; return this.backgroundColor; &#125; public final void setBackgroundColor(@Nullable Integer var1) &#123; this.backgroundColor = var1; &#125; @Nullable public final Function1 getOnClickListener() &#123; return this.onClickListener; &#125; public final void setOnClickListener(@Nullable Function1 var1) &#123; this.onClickListener = var1; &#125; public final void printText() &#123; String var1 = this._text; System.out.println(var1); &#125;&#125; printText()方法字节码如下, 可以看到printText方法直接引用_text属性. 这也表明Backing Property可以允许你完全访问fields. 123456789101112131415161718public final printText()VL0LINENUMBER 30 L0ALOAD 0GETFIELD Button._text : Ljava/lang/String;ASTORE 1L1GETSTATIC java/lang/System.out : Ljava/io/PrintStream;ALOAD 1INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)VL2L3LINENUMBER 31 L3RETURNL4LOCALVARIABLE this LButton; L0 L4 0MAXSTACK = 2MAXLOCALS = 2 如果去掉_text前的private关键字, 如下, 猜猜看会发生什么? 123456789101112131415161718class Button &#123; var _text: String? = null var text: String set(value) &#123; println(value) _text = value &#125; get() &#123; return _text + _text &#125; var backgroundColor: Int? = null var onClickListener: ((Button) -&gt; Unit)? = null fun printText() &#123; println(_text) &#125;&#125; 可以通过反编译后的Java源码来验证下, Ops……., Kotlin为_text生成了一对无用的getter和setter— get_text()和set_text方法. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public final class Button &#123; @Nullable private String _text; @Nullable private Integer backgroundColor; @Nullable private Function1 onClickListener; @Nullable public final String get_text() &#123; return this._text; &#125; public final void set_text(@Nullable String var1) &#123; this._text = var1; &#125; @NotNull public final String getText() &#123; return Intrinsics.stringPlus(this._text, this._text); &#125; public final void setText(@NotNull String value) &#123; Intrinsics.checkParameterIsNotNull(value, "value"); System.out.println(value); this._text = value; &#125; @Nullable public final Integer getBackgroundColor() &#123; return this.backgroundColor; &#125; public final void setBackgroundColor(@Nullable Integer var1) &#123; this.backgroundColor = var1; &#125; @Nullable public final Function1 getOnClickListener() &#123; return this.onClickListener; &#125; public final void setOnClickListener(@Nullable Function1 var1) &#123; this.onClickListener = var1; &#125; public final void printText() &#123; String var1 = this._text; System.out.println(var1); &#125;&#125; @JvmField 注解先来看段示例代码, 如下, 使用Kotlin中data class定义一个简单的Point类, 给定俩参数, 坐标x和y 1data class Point(var x: Int, var y: Int) 这段代码反编译成Java源码如下, Kotlin除了为Point类中x,y生成getters和setters外, 还自动生成了copy()、equals()、hashcode() toString()四个方法. 注意到生成的x和y限定符为private, 每次访问x或y时, 实际上分别调用它们的setter和getter方法. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public final class Point &#123; private int x; private int y; public final int getX() &#123; return this.x; &#125; public final void setX(int var1) &#123; this.x = var1; &#125; public final int getY() &#123; return this.y; &#125; public final void setY(int var1) &#123; this.y = var1; &#125; public Point(int x, int y) &#123; this.x = x; this.y = y; &#125; public final int component1() &#123; return this.x; &#125; public final int component2() &#123; return this.y; &#125; @NotNull public final Point copy(int x, int y) &#123; return new Point(x, y); &#125; public String toString() &#123; return "Point(x=" + this.x + ", y=" + this.y + ")"; &#125; public int hashCode() &#123; return this.x * 31 + this.y; &#125; public boolean equals(Object var1) &#123; if (this != var1) &#123; if (var1 instanceof Point) &#123; Point var2 = (Point)var1; if (this.x == var2.x &amp;&amp; this.y == var2.y) &#123; return true; &#125; &#125; return false; &#125; else &#123; return true; &#125; &#125;&#125; 为解决这个问题, 可以使用@JvmField声明, 对Point类重构如下 1data class Point(@JvmField var x: Int, @JvmField var y: Int) 来看下字节码反编译后的Java源码, 可以看到x和y被public关键字修饰, 意味着没有必要为它们生成 getters 和 setters方法. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public final class Point &#123; @JvmField public int x; @JvmField public int y; public Point(int x, int y) &#123; this.x = x; this.y = y; &#125; public final int component1() &#123; return this.x; &#125; public final int component2() &#123; return this.y; &#125; @NotNull public final Point copy(int x, int y) &#123; return new Point(x, y); &#125; public String toString() &#123; return "Point(x=" + this.x + ", y=" + this.y + ")"; &#125; public int hashCode() &#123; return this.x * 31 + this.y; &#125; public boolean equals(Object var1) &#123; if (this != var1) &#123; if (var1 instanceof Point) &#123; Point var2 = (Point)var1; if (this.x == var2.x &amp;&amp; this.y == var2.y) &#123; return true; &#125; &#125; return false; &#125; else &#123; return true; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (一) -- Kotlin Range]]></title>
    <url>%2Fkt%2Frange%2F</url>
    <content type="text"><![CDATA[之所以想写这个系列的Kotlin笔记, 主要原因在于Kotlin协程丰富了JVM生态. 有人说Kotlin语法像Scala, 但个人感觉Kotlin比Java更像C++, 比如Kotlin在闭包上使用了大量的内联(inline)技巧进行性能优化. 尽管Java也有一些协程相关的包可以用, 但远不如Kotlin协程优雅, 更具表现力. 尽管你可以使用:Akka Actor (或者类似的Actor包)RxJava (或类似的Reactive响应式框架, 比如Vert.x)开发高性能高并发应用程序, 以上抽象均为Message Driven或Event Driven(消息驱动或事件驱动), 但有些业务场景如果考虑使用Event-Driven建模, 未免过于重量级, 于是你需要更加轻量级的替代方案, 比如Future/Promise (异步非阻塞, 本质为占位符(Placeholder), 仅适用于单个值), 比如轻量级线程—协程. 尽管Kotlin协程本质上也是使用JVM线程池进行封装, 但Kotlin协程在JVM生态同等实现中表现出色! 最重要的是, 作为JVM语言, 不仅Java可以使用Kotlin协程, Scala/Groovy/Clojure照样也可使用Kotlin协程. Kotlin Range性能优化建议: 对Range进行遍历时, 尽量避免传入该Range引用进行迭代, 请直接对该Range进行遍历 (见常用方法小节) 使用Range时注意保持类型一致并避免使用nullable(可为空)类型变量 (见性能优化小节) 同样的容器遍历逻辑, 在Range和数组都能实现的情况下, 尽量使用Range (见Benchmark小节) Kotlin RangeKotlin中创建一个range比较简单, 可以使用rangeTo函数 或使用..操作符创建. 这里先给出Kotlin Range的类图, 便于后续源码剖析, 需要指出的是IntProgression中的迭代器方法iterator()虽返回IntIterator, 但其具体实现却由IntIterator的子类IntProgressionIterator实现,在Kotlin源码中IntProgressionIterator为一内部类. LongProgression、CharProgression 与之类似. Kotlin Range常用方法常见方法有: step(), reversed(), rangeTo()等, 如 12345678// `step` for (i in (0..10).step(2)) &#123; println(i)&#125;// `reversed`for (i in 0.rangeTo(10).reversed) &#123; println(i)&#125; 对Range进行遍历时, 避免传入该Range引用, 直接对该Range进行迭代即可, 这样做的话编译器会对字节码进行优化. 123456fun main(args: Array&lt;String&gt;) &#123; val value = args[0] if (value in 0.rangeTo(10)) &#123; print(value) &#125;&#125; 字节码反编译成Java源码如下 12345678910public static final void main(@NotNull String[] args) &#123; Intrinsics.checkParameterIsNotNull(args, "args"); String var2 = args[0]; int value = Integer.parseInt(var2); if (0 &lt;= value) &#123; if (10 &gt;= value) &#123; System.out.println(value); &#125; &#125;&#125; 但如果遍历时传入该range引用, 如下, 将会创建无必要的IntRange对象(或LongRange/CharRange等) 12345678910111213val range = 0..100if (value in range) &#123; print(value)&#125;// JVM字节码对应Java源码/** byte var3 = 0; IntRange range = new IntRange(var3, 100); if (range.contains(value)) &#123; System.out.println(value); &#125; */ Range 性能优化Range可以在when中使用, 如下: 12345678val httpResponseCode: Int = HttpService.responseCodeStr().toIntwhen (httpResponseCode) &#123; in 100..200 -&gt; println("Informational responses") in 200..300 -&gt; println("Success") in 300..400 -&gt; println("Redirection") in 400..500 -&gt; println("Client error") in 500..600 -&gt; println("Server error")&#125; 字节码反编译成Java源码如下, 可以看出整段代码利用if语句对HTTP响应码的Range进行判断, 没有太大性能问题. 123456789101112131415161718192021222324252627282930313233343536373839404142String var2 = HttpService.responseCodeStr();int value = Integer.parseInt(var2);String var3;if (100 &lt;= value) &#123; if (200 &gt;= value) &#123; var3 = "Informational responses"; System.out.println(var3); return; &#125;&#125;if (200 &lt;= value) &#123; if (300 &gt;= value) &#123; var3 = "Success"; System.out.println(var3); return; &#125;&#125;if (300 &lt;= value) &#123; if (400 &gt;= value) &#123; var3 = "Redirection"; System.out.println(var3); return; &#125;&#125;if (400 &lt;= value) &#123; if (500 &gt;= value) &#123; var3 = "Client error"; System.out.println(var3); return; &#125;&#125;if (500 &lt;= value) &#123; if (600 &gt;= value) &#123; var3 = "Server error"; System.out.println(var3); &#125;&#125; 如果改变httpResponseCode类型, 如下: 123456val httpResponseCode: Int? = HttpService.responseCodeStr().toIntOrNull()when (httpResponseCode) &#123; in 100..200 -&gt; println("Informational responses") in 200..300 -&gt; println("Success") // 与上面Kotlin代码一样, 如上&#125; 此时字节码反编译成Java源码如下, IntRange源码后面会覆盖(包括CollectionsKt.contains()等), 现在主要关注代码主逻辑 1234567891011121314151617181920212223242526272829303132Integer value = StringsKt.toIntOrNull(HttpService.responseCodeStr());byte var3 = 100;String var4;if (CollectionsKt.contains((Iterable)(new IntRange(var3, 200)), value)) &#123; var4 = "Informational responses"; System.out.println(var4);&#125; else &#123; short var5 = 200; if (CollectionsKt.contains((Iterable)(new IntRange(var5, 300)), value)) &#123; var4 = "Success"; System.out.println(var4); &#125; else &#123; var5 = 300; if (CollectionsKt.contains((Iterable)(new IntRange(var5, 400)), value)) &#123; var4 = "Redirection"; System.out.println(var4); &#125; else &#123; var5 = 400; if (CollectionsKt.contains((Iterable)(new IntRange(var5, 500)), value)) &#123; var4 = "Client error"; System.out.println(var4); &#125; else &#123; var5 = 500; if (CollectionsKt.contains((Iterable)(new IntRange(var5, 600)), value)) &#123; var4 = "Server error"; System.out.println(var4); &#125; &#125; &#125; &#125;&#125; 可以看到上面这段代码封装了很多东西, 先是将HTTP响应码范围封装成IntRange, 然后强制类型转换成Iterable容器类型, 再调用Kotlin库中CollectionsKt.contains()方法进行判断, 注意到整段逻辑采用大量嵌套的if-else语句实现. 对比上面俩段Java源码, 明显第一段Java代码更加简洁高效. 中间我们做了什么, 不过将一个变量类型由Int改成了Int?. 如果将httpResponseCode转变成Double类型会怎样? 123456val httpResponseCode: Double = HttpService.responseCodeStr().toDouble()when (httpResponseCode) &#123; in 100..200 -&gt; println("Informational responses") in 200..300 -&gt; println("Success") // 与上面Kotlin代码一样, 如上&#125; 字节码反编译成Java源码如下, 和上面改成Int?类型的Java源码类似, 同样面临性能损耗 123456789101112131415161718192021222324252627282930313233String var3 = HttpService.responseCodeStr();double value = Double.parseDouble(var3);byte var5 = 100;String var6;if (RangesKt.intRangeContains((ClosedRange)(new IntRange(var5, 200)), value)) &#123; var6 = "Informational responses"; System.out.println(var6);&#125; else &#123; short var7 = 200; if (RangesKt.intRangeContains((ClosedRange)(new IntRange(var7, 300)), value)) &#123; var6 = "Success"; System.out.println(var6); &#125; else &#123; var7 = 300; if (RangesKt.intRangeContains((ClosedRange)(new IntRange(var7, 400)), value)) &#123; var6 = "Redirection"; System.out.println(var6); &#125; else &#123; var7 = 400; if (RangesKt.intRangeContains((ClosedRange)(new IntRange(var7, 500)), value)) &#123; var6 = "Client error"; System.out.println(var6); &#125; else &#123; var7 = 500; if (RangesKt.intRangeContains((ClosedRange)(new IntRange(var7, 600)), value)) &#123; var6 = "Server error"; System.out.println(var6); &#125; &#125; &#125; &#125;&#125; 解决方式, 在when语句中将Http响应码同样转成Double类型即可, 如下: 12345678val httpResponseCode = HttpService.responseCodeStr().toDouble()when(httpResponseCode) &#123; in 100.0..200.0 -&gt; println("Informational responses") in 200.0..300.0 -&gt; println("Success") in 300.0..400.0 -&gt; println("Redirection") in 400.0..500.0 -&gt; println("Client error") in 500.0..600.0 -&gt; println("Server error")&#125; 对应字节码反编译成Java源码如下: 1234567891011121314151617181920String var3 = HttpService.responseCodeStr();double value = Double.parseDouble(var3);String var5;if (value &gt;= 100.0D &amp;&amp; value &lt;= 200.0D) &#123; var5 = "Informational responses"; System.out.println(var5);&#125; else if (value &gt;= 200.0D &amp;&amp; value &lt;= 300.0D) &#123; var5 = "Success"; System.out.println(var5);&#125; else if (value &gt;= 300.0D &amp;&amp; value &lt;= 400.0D) &#123; var5 = "Redirection"; System.out.println(var5);&#125; else if (value &gt;= 400.0D &amp;&amp; value &lt;= 500.0D) &#123; var5 = "Client error"; System.out.println(var5);&#125; else if (value &gt;= 500.0D &amp;&amp; value &lt;= 600.0D) &#123; var5 = "Server error"; System.out.println(var5);&#125; 结论: 使用Range时注意保持类型一致并避免使用nullable类型变量. Range 源码剖析首先来看段示例代码: 123456fun main(args: Array&lt;String&gt;) &#123; var int = args[0].toInt() if (int in 0..10) &#123; println(int) &#125;&#125; 上面这段代码字节码反编译成Java源码如下, 可以看到这里的range逻辑主要由if语句实现, 对起始值和结束值进行判断. 123456789101112public static final void main(@NotNull String[] args) &#123; // Kotlin会对传入参数进行判断,检测传入入参是否为空 Intrinsics.checkParameterIsNotNull(args, "args"); String var2 = args[0]; int value = Integer.parseInt(var2); if (0 &lt;= value) &#123; if (10 &gt;= value) &#123; System.out.println(value); &#125; &#125;&#125; 假如将传入的命令行参数改成可选, 会怎样? 如下: 123456fun main(args: Array&lt;String&gt;) &#123; val value = args[0].toIntOrNull() if (value in 0..10) &#123; println(value) &#125;&#125; 对应Java源码如下: 123456789public static final void main(@NotNull String[] args) &#123; Intrinsics.checkParameterIsNotNull(args, "args"); Integer value = StringsKt.toIntOrNull(args[0]); byte var2 = 0; if (CollectionsKt.contains((Iterable) (new IntRange(var2, 10)), value)) &#123; System.out.println(value); &#125;&#125; 先对上面代码中contains函数进行源码剖析, 再来看IntRange源码 1234567891011121314151617public operator fun &lt;@kotlin.internal.OnlyInputTypes T&gt; Iterable&lt;T&gt;.contains(element: T): Boolean &#123; if (this is Collection) return contains(element) return indexOf(element) &gt;= 0&#125;// `indexOf` 源码public fun &lt;@kotlin.internal.OnlyInputTypes T&gt; Iterable&lt;T&gt;.indexOf(element: T): Int &#123; if (this is List) return this.indexOf(element) var index = 0 for (item in this) &#123; if (element == item) return index index++ &#125; return -1&#125; 点开IntRange源码, 如下, IntRange继承了IntProgression类并实现了ClosedRange接口. 12345678910111213141516171819202122public class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange&lt;Int&gt; &#123; override val start: Int get() = first override val endInclusive: Int get() = last override fun contains(value: Int): Boolean = first &lt;= value &amp;&amp; value &lt;= last override fun isEmpty(): Boolean = first &gt; last override fun equals(other: Any?): Boolean = other is IntRange &amp;&amp; (isEmpty() &amp;&amp; other.isEmpty() || first == other.first &amp;&amp; last == other.last) override fun hashCode(): Int = if (isEmpty()) -1 else (31 * first + last) override fun toString(): String = "$first..$last" companion object &#123; /** An empty range of values of type Int. */ public val EMPTY: IntRange = IntRange(1, 0) &#125;&#125; Ranges.kt源码中还包含了CharRange和LongRange, 类似地, CharRange继承了CharProgression类, LongRange继承了LongProgression类, 它们均实现了ClosedRange接口. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162// `ClosedRange`接口 及 `IntProgression`类(`LongProgression`/`CharProgression`有些类似) 源码public interface ClosedRange&lt;T: Comparable&lt;T&gt;&gt; &#123; public val start: T public val endInclusive: T public operator fun contains(value: T): Boolean = value &gt;= start &amp;&amp; value &lt;= endInclusive public fun isEmpty(): Boolean = start &gt; endInclusive&#125;// 可以看到 `IntProgression` 实现了`Iterable` 接口public open class IntProgression internal constructor(start: Int, endInclusive: Int, step: Int) : Iterable&lt;Int&gt; &#123; init &#123; if (step == 0) throw kotlin.IllegalArgumentException("Step must be non-zero") &#125; public val first: Int = start public val last: Int = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toInt() public val step: Int = step override fun iterator(): IntIterator = IntProgressionIterator(first, last, step) public open fun isEmpty(): Boolean = if (step &gt; 0) first &gt; last else first &lt; last override fun equals(other: Any?): Boolean = other is IntProgression &amp;&amp; (isEmpty() &amp;&amp; other.isEmpty() || first == other.first &amp;&amp; last == other.last &amp;&amp; step == other.step) override fun hashCode(): Int = if (isEmpty()) -1 else (31 * (31 * first + last) + step) override fun toString(): String = if (step &gt; 0) "$first..$last step $step" else "$first downTo $last step $&#123;-step&#125;" companion object &#123; public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step) &#125;&#125;// `IntProgressionIterator` 源码如下internal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() &#123; private val finalElement = last private var hasNext: Boolean = if (step &gt; 0) first &lt;= last else first &gt;= last private var next = if (hasNext) first else finalElement override fun hasNext(): Boolean = hasNext override fun nextInt(): Int &#123; val value = next if (value == finalElement) &#123; if (!hasNext) throw kotlin.NoSuchElementException() hasNext = false &#125; else &#123; next += step &#125; return value &#125;&#125; Kotlin Range 性能测试结合上面的源码剖析, 由于IntRange类继承了IntProgression类, 而IntProgression实现了Iterable接口, 因此可以对IntRange调用forEach方法, 类似地, LongRange、CharRange同样也可以调用forEach方法. 下面对Range做些性能测试: 123456789101112131415161718192021222324252627282930val range = 0..1_000val array = Array(1_000) &#123; it &#125;@Benchmarkfun rangeLoop(blackhole: Blackhole) &#123; range.forEach &#123; blackhole.consume(it) &#125;&#125;@Benchmarkfun rangeSequenceLoop(blackhole: Blackhole) &#123; range.asSequence().forEach &#123; blackhole.consume(it) &#125;&#125;@Benchmarkfun arrayLoop(blackhole: Blackhole) &#123; array.forEach &#123; blackhole.consume(it) &#125;&#125;@Benchmarkfun arraySequenceLoop(blackhole: Blackhole) &#123; array.asSequence().forEach &#123; blackhole.consume(it) &#125;&#125; 输出结果如下, 可以看到range版本循环要快于数组 12345Benchmark Mode Cnt Score Error UnitsrangeLoop avgt 200 3156.754 ± 27.725 ns/oprangeSequenceLoop avgt 200 5286.066 ± 81.330 ns/oparrayLoop avgt 200 2640.670 ± 8.357 ns/oparraySequenceLoop avgt 200 2817.694 ± 44.780 ns/op 整段代码字节码反编译Java源码如下, 可以看到range先被强制类型转化为Iterable类型, 然后再调用迭代器方法并使用while循环进行迭代,这也在一定程度上解释了range遍历要快于数组. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354@Benchmarkpublic final void rangeLoop(@NotNull Blackhole blackhole) &#123; Intrinsics.checkParameterIsNotNull(blackhole, "blackhole"); Iterable $receiver$iv = (Iterable)MyBenchmarkKt.getRange(); Iterator var3 = $receiver$iv.iterator(); // `rangeLoop`使用`while`循环, 而`arrayLoop`使用简单的`for`循环 while(var3.hasNext()) &#123; int element$iv = ((IntIterator)var3).nextInt(); blackhole.consume(element$iv); &#125;&#125;@Benchmarkpublic final void rangeSequenceLoop(@NotNull Blackhole blackhole) &#123; Intrinsics.checkParameterIsNotNull(blackhole, "blackhole"); Sequence $receiver$iv = CollectionsKt.asSequence((Iterable)MyBenchmarkKt.getRange()); Iterator var3 = $receiver$iv.iterator(); while(var3.hasNext()) &#123; Object element$iv = var3.next(); int it = ((Number)element$iv).intValue(); blackhole.consume(it); &#125;&#125;@Benchmarkpublic final void arrayLoop(@NotNull Blackhole blackhole) &#123; Intrinsics.checkParameterIsNotNull(blackhole, "blackhole"); Object[] $receiver$iv = (Object[])MyBenchmarkKt.getArray(); int var3 = $receiver$iv.length; for(int var4 = 0; var4 &lt; var3; ++var4) &#123; Object element$iv = $receiver$iv[var4]; int it = ((Number)element$iv).intValue(); blackhole.consume(it); &#125;&#125;@Benchmarkpublic final void arraySequenceLoop(@NotNull Blackhole blackhole) &#123; Intrinsics.checkParameterIsNotNull(blackhole, "blackhole"); Sequence $receiver$iv = ArraysKt.asSequence((Object[])MyBenchmarkKt.getArray()); Iterator var3 = $receiver$iv.iterator(); while(var3.hasNext()) &#123; Object element$iv = var3.next(); int it = ((Number)element$iv).intValue(); blackhole.consume(it); &#125;&#125; 再来看个例子, 在range上调用高阶函数, 如下: 123456789101112131415161718192021222324@Benchmarkfun rangeLoop(blackhole: Blackhole) = range .map &#123; it * 2 &#125; .first &#123; it % 2 == 0 &#125;@Benchmarkfun rangeSequenceLoop(blackhole: Blackhole) = range.asSequence() .map &#123; it * 2 &#125; .first &#123; it % 2 == 0 &#125;@Benchmarkfun arrayLoop(blackhole: Blackhole) = array .map &#123; it * 2 &#125; .first &#123; it % 2 == 0 &#125;@Benchmarkfun arraySequenceLoop(blackhole: Blackhole) = array.asSequence() .map &#123; it * 2 &#125; .first &#123; it % 2 == 0 &#125; 测试结果如下, 同样range版本高阶方法迭代要快于数组. 12345Benchmark Mode Cnt Score Error UnitsrangeLoop avgt. 200 8268.058 ± 179.797 ns/oprangeSequenceLoop avgt 200 16.109 ± 0.128 ns/oparrayLoop avgt 200 6490.003 ± 124.134 ns/oparraySequenceLoop avgt 200 14.841 ± 0.483 ns/op]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin高性能实战 (四) -- Kotlin Delegate (Part One)]]></title>
    <url>%2Fkt%2Fdlgt-class%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Kotlin</tag>
        <tag>High Performance Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache Phoenix Query Server]]></title>
    <url>%2Fbigdata%2Fhbase%2Fpqs%2F</url>
    <content type="text"><![CDATA[Apache Phoenix客户端默认通过JDBC driver连接Phoenix, 对于非JVM语言而言存在连接问题, 并且在Phoenix客户端执行查询计划、结果处理等影响客户进程, JDBC driver默认充当一Thick Client. 为解决这一问题, 引入Phoenix Query Server(PQS), 其架构示意图如下, PQS允许客户端充当一Thin Client, 可水平拓展, PQS无状态. PQS作为一HTTP服务支持JSON和Protocol Buffer, 但默认使用Protocol Buffer(比JSON使用更加高效), Thin Client底层通过Apache Calcite’s Avatica组件实现, Avatica实现中服务端为HTTP Server, 而客户端为一简单的JDBC driver. PQS通过引入中间这层协议, 可以支持其它非JVM语言. 客户端配置PQS中Thin Client, 默认协议URL构造形式为jdbc:phoenix:thin:url=&lt;scheme&gt;://&lt;server-hostname&gt;:&lt;port&gt;, PQS常见配置属性如下: 属性 值 schema http server-host-name server主机名 port http端口 运行PQS服务在HBase RegionServer节点上运行PQS, 首先需导出以下环境变量: 1234# 写入 ∼/.ssh/bash_profile 或 ∼/.ssh/.bashrcexport HBASE_CONF_DIR=&lt;path_to_hbase_conf&gt;export PHOENIX_LIB_DIR=&lt;path_to_phoenix_lib_directory&gt;export HADOOP_CONF_DIR=&lt;path_to_hadoop_conf&gt; 在Phoenix安装目录, 运行PQS参考指令如下: 1$ bin/queryserver.py [start|stop|makeWinServiceDesc] [-Dhadoop=configs] 后台运行, 可键入以下指令: 1$ bin/queryserver.py start background PQS内部开启Jetty HTTP服务(端口默认为8765), 如需改变端口, 修改配置文件hbase-site.xml中phoenix.queryserver.http.port属性. PQS使用可以运行sqlline-thin.py脚本, 开始与PQS通信, 参考指令如下: 1$ bin/sqlline-thin.py &lt;http_query_server_url&gt; &lt;sql_file&gt; 使用PQS服务, 先准备一SQL文件, 然后通过PQS服务提交并运行对应SQL, 文件中SQL语句如下: 123456789-- emp_ddl.sql, 创建一张职员表CREATE TABLE IF NOT EXISTS EMPLOYEE ( EMP_ID INTEGER NOT NULL, EMP_NAME VARCHAR, CONTACT VARCHAR, HIRE_DATE DATE, SALARY INTEGER, CONSTRAINT PK PRIMARY KEY (EMP_ID)); 通过PQS执行以上这段SQL语句, 参考指令如下: 1$ bin/sqlline-thin.py http://localhost:8765 emp_ddl.sql 执行成功后, 可以通过以下指令查看职员表Schema: 1$ bin/sqlline-thin.py http://localhost:8765 QPS小结PQS支持连接HBase集群, 由于PQS内部封装了一HTTP Server, 可与负载均衡器结合使用获取高可用. 有关PQS使用, 需注意以下两点: PQS在有关JSON API数据传输方面, 不能保证向下兼容(Backwards Compatibility), 若使用Protocol Buffer, 可以保证向下兼容. Query Server从HBase RegionServer收集数据并Stream至客户端, 通常数据是无序的; 如需保证数据有序, 需在HBase配置文件hbase-site.xml中指定phoenix.query.force.rowkeyorder参数值.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Engine大作战 -- Apache Drill之复杂数据分析]]></title>
    <url>%2Fbigdata%2Fdrill%2Fanalysis%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Drill中一些常见的复杂数据分析. 复杂数据结构Drill支持复杂数据结构, 如Array和Map等. Drill中Array与大多数编程语言有些类似, 如数组下标从0开始而非从1开始, 示例SQL如下: 123-- 查询CSV格式数据SELECT col[0] AS shop_nameFROM dfs.ecomm_data.`ecomm_shops.csv`; 当然也可使用数组读取JSON数据, 比如JSON中有些字段为数组类型. 通常使用Map作为JSON数据容器, 比如下面这段SQL中ua字段为一Map, Drill中可以通过: Map.FieldName 形式访问Map中Value. 12345678910-- 查看不同浏览器PV分布SELECT uadat.ua.AgentNameVersion AS Browser, COUNT(*) AS BrowserCountFROM ( SELECT parse_user_agent(`request_user-agent`) AS ua FROM dfs.httpd_logs.`log_data/ecomm.httpd`) AS uadatGROUP BY uadat.ua.AgentNameVersionORDER BY BrowserCount DESC; JSON数据分析如果JSON或其他嵌套数据格式化合理(能准确推断出数据类型), Apache Drill支持JSON数据查询与分析. Drill解析问题Drill默认将带小数点数字解析为Double类型, 不带小数点数字解析为BigInt; Drill默认不支持Map中Field为混合类型, 如果用户JSON数据中存在以上两个问题, 可能导致Schema解析错误, 无法成功解析JSON或分析. Apache Drill有俩配置项, 可预防这种问题, 如设置store.json.read_number_as_double为true, 可避免数字格式化错误. 1ALTER SESSION SET `store.json.read_number_as_double` = true; 可以设置store.json.all_text_mode为true, 将所有Field解析为Varchar类型, 避免JSON字段中混合类型导致的解析错误. 1ALTER SESSION SET `store.json.all_text_mode` = true; 但如果JSON数据中确实存在混合类型, 又不想所有的Field被Drill解析为Varchar类型, 可以考虑Drill新引入的Union类型(处于测试阶段, 不稳定), 允许JSON数据中同一Field拥有不同类型, 配置参考如下: 1ALTER SESSION SET `exec.enable_union_type` = true; FLATTEN()Drill提供一比较实用函数FLATTEN(), 可将嵌套的JSON数据字段展开, 假定JSON数据样本(empl.json)如下: 1234567891011121314151617181920212223242526272829&#123; "columns": [ "first_name", "last_name", "birthday" ], "data": [ [ "Robert", "Hernandez", "5/3/81" ], [ "Steve", "Smith", "8/4/84" ], [ "Anne", "Raps", "9/13/91" ], [ "Alice", "Muller", "4/15/88" ] ]&#125; 将上面这段嵌套的JSON样本数据中data字段展开, 参考如下: 123456789SELECT col_fields[0] AS first_name, col_fields[1] AS last_name, col_fields[2] AS birthdayFROM( SELECT FLATTEN(data) AS col_fields FROM dfs.employee_data.`empl.json`) AS employee_data first_name last_name birthday Robert Hernandez 5/3/81 Steve Smith 8/4/84 Anne Raps 9/13/91 Alice Muller 4/15/88 KVGEN()Drill还提供另一实用函数KVGEN(), 支持访问面向列存储的JSON数据, 该函数返回一数组, 数组中每项元素为KV键值对. 假定样本数据(empl_cols.json)如下: 1234567891011121314151617181920&#123; "first_name": &#123; "0":"Robert", "1":"Steve", "2":"Anne", "3":"Alice" &#125;, "last_name": &#123; "0":"Hernandez", "1":"Smith", "2":"Raps", "3":"Muller" &#125;, "birthday": &#123; "0":"5/3/81", "1":"8/4/84", "2":"9/13/91", "3":"4/15/88" &#125;&#125; 将样本数据中FirstName值抽取出来, 参考如下: 12SELECT FLATTEN(KVGEN(first_name))['value'] AS first_nameFROM dfs.employee_data.`empl_cols.json` firstname Robert Steve Anne Alice 日志数据分析新版Drill支持读取和查询Apache Web服务器日志(Drill内部嵌入了HTTPD解释器), 可以通过Apache Drill对这些日志数据进行聚合或Join等操作. 为了正常读取Web服务器日志, 需对Drill支持的可插拔存储进行相关配置. 通常Apache Web Server配置路径为/etc/apache2/apache2.conf, 该配置文件中有一项LogFormat(日志格式)配置, 参考如下: 1LogFormat "%h %l %u %t \"%r\" %&gt;s %O \"&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i"" 拷贝该项配置, 打开Web Console点击可插拔存储(如dfs等)配置, 贴到logFormat配置中, 参考如下: 12345"httpd": &#123; "type": "httpd", "logFormat": "%h %l %u %t \"%r\" %&gt;s %O \"&#123;Referer&#125;i\" \"%&#123;User­Agent&#125;i\"", "timestampFormat": null&#125; 以上Web日志格式中, 常见字段(Format String)说明如下:配置字段名说明%h远程主机名, 若HostnameLookups设置为off, 默认记录IP地址%l远程日志名(源自identd, 如果存在的话), 通常需设置mod_ident和IdentityCheck为On%r请求第一行%s状态(Status), 源请求状态, 使用%&gt;s作为最终状态%t接收请求时间%u若为验证请求记录远程用户, 非验证请求为401%O发送字节(包括头部), 如果请求被丢弃有可能为0, 使用时需开启mod_logio%{VARNAME}i变量名(VARNAME)内容, 发送至Server请求的Header行 配置完成后, 可以开始查询Web Server日志, 以下为部分Web日志样本, 参考如下: 1234567835.154.11.105 ­ ­ [21/Oct/2014:04:11:25 +0100] \"GET /linux/doing­pxe­without­dhcp­control HTTP/1.1" 200 24323 \"http://your.ecomm.site.com/" "Mozilla/5.0 (Windows NT 5.1; rv:35.0) \Gecko/20100101 Firefox/35.0"37.86.201.166­ ­ [21/Oct/2014:04:11:26 +0100] \"GET /join_form HTTP/1.0" 200 11114 "http://your.ecomm.site.com/" \"Mozilla/5.0 (Windows NT 5.1; rv:35.0) Gecko/20100101 Firefox/35.0" 查询日志中所有可见Fields: 123SELECT * FROM dfs.httpd_logs.`log_data/ecomm.httpd`LIMIT 20; 分析用户代理(User Agent, 包括浏览器标识,操作系统标识,渲染引擎,版本信息等字段)类型: 12SELECT `request_user-agent`FROM dfs.httpd_logs.`log_data/ecomm.httpd`; 直接解析用户代理文本字符串, 有些费劲, 但Drill提供了一Util方法parse_user_agent, 返回一Map包含User Agent明细数据. 以下SQL查看不同浏览器PV分布: 123456789SELECT uadat.ua.AgentNameVersion AS Browser, COUNT(*) AS BrowserCountFROM ( SELECT parse_user_agent(`request_user-agent`) AS ua FROM dfs.httpd_logs.`log_data/ecomm.httpd`) AS uadatGROUP BY uadat.ua.AgentNameVersionORDER BY BrowserCount DESC; Web Server日志中, 通常request_referer包含了URL, 可以通过parse_url()函数对URL进行解析, SQL参考如下: 12345-- parse_url(`request_referer`)返回URL协议、主机、路径-- 等URL相关信息, 该函数返回结果为一MapSELECT `request_referer`, parse_url(`request_referer`)FROM dfs.httpd_logs.`log_data/ecomm.httpd`WHERE `request_referer` IS NOT NULL parse_query()函数, 可用于网络攻防日志分析, 如通过URL来源鉴定是否为可疑攻击等: 1234567SELECT qmap.query_map.`came_from` AS came_fromFROM ( SELECT parse_query(`request_referer_query`) AS query_map FROM dfs.httpd_logs.`log_data/ecomm.httpd` WHERE LENGTH(`request_referer_query`) &gt; 0) AS qmapWHERE qmap.query_map.`came_from` IS NOT NULL; 除了Web Server日志, Drill还可分析关系型数据库日志, 如MySQL日志数据等. 当然, 为成功解析MySQL日志, 需对Drill读取日志文件的可插拔存储增加一些配置, 如与上例中HTTPD日志类似的Schema解析与字段说明, 必要时需给出合理的正则解析. 配置成功后, 可以使用Drill解析MySQL日志, 参考如下:1SELECT * FROM dfs.mysql.`mysql.log`;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flink学习手札之Stream Window小结篇]]></title>
    <url>%2Fbigdata%2Fflink%2Fwindow%2F</url>
    <content type="text"><![CDATA[Youtube上观看的Flink学习笔记, 有段时间了, 由于是边看视频边记得笔记, 逻辑有些乱, 还请见谅! 有时间再重新整理下! Window生命周期 Item 说明 Window Content 窗口内容,或ReduceFunction/AggregateFunction窗口operator增量聚合结果 Window Object 窗口算子基于返回对象对数据进行分组,窗口对象用于区分不同窗口.每个窗口对象拥有基于哪个窗口之后的端点时间戳及可以删除的状态 Trigger计时器 Trigger可注册在某个时间点调用的计时器如计算一个窗口还是清空内容.这些计时器由窗口操作符维护 Trigger自定义状态 Trigger可以定义per-window/per-key或自定义状态,这些状态完全由Trigger控制,不用window operator维护 当窗口算子删除一个要结束的Window时(到达窗口对象定义的结束时间戳), 具体发生于ProcessingTime还是EventTime语义取决于WindowAsssigner.isEventTime()返回值. 删除一个窗口时,自动清除窗口内容并丢弃窗口对象, 并不会清除自定义Trigger状态及注册的触发计时器(对于窗口操作符而言并不透明). 可以通过Trigger.clear()防止状态泄露. AssignerGobalWindows Assigner映射所有数据至同一全局窗口, 默认Trigger为NeverTrigger, 实现上须指定自定义Trigger及Evictor. GlobalWindows结束时间戳为Long.MAX_VALUE, 导致其从不被完全清空掉. 对于不断演变发展的KeyedStream, GlobalWindows为每个key维护某些状态, 需谨慎使用. MergingWindowAssigner接口继承了WindowAssigner接口, 用于Merge窗口算子. WindowAssigner的Flink源码, 参考如下: 12345678910111213public abstract class WindowAssigner&lt;T, W extends Window&gt; implements Serializable &#123; // Returns a collection of windows to which the element is assigned public abstract Collection&lt;W&gt; assignWindows(T element,long timestamp, WindowAssignerContext context); public abstract Trigger&lt;T, W&gt; getDefaultTrigger(StreamExecutionEnvironment env); public abstract TypeSerializer&lt;W&gt; getWindowSerializer(ExecutionConfig executionConfig); // Indicates whether this assigner creates event-time windows public abstract boolean isEventTime(); // A context that gives access to the current processing time public abstract static class WindowAssignerContext &#123; public abstract long getCurrentProcessingTime(); &#125; &#125; 以下代码为实现一30秒滚动窗口的WindowAssigner 123456789101112131415type winAsgnCtx = WindowAssigner.WindowAssignerContextclass ThirtySecondsWindows extends WindowAssigner[Object, TimeWindow] &#123; val windowSize: Long = 30 * 1000L override def assignWindows(o: Object, ts: Long, ctx: winAsgnCtx): java.util.List[TimeWindow] = &#123; val startTime = ts - (ts % windowSize) val endTime = startTime + windowSize Collections.singletonList(new TimeWindow(startTime, endTime)) &#125; override def getWindowSerializer(executionConfig: ExecutionConfig): TypeSerializer[TimeWindow] = &#123; new TimeWindow.Serializer &#125; override def getDefaultTrigger(env: envirnoment.StreamExecutionEnvironment): Trigger[Object, TimeWindow] = &#123; EventTimeTrigger.create() &#125; override def isEventTime = true&#125; TriggerMergable Triggers只能使用可以自动聚合的状态原语, 如ListState, ReduceState或AggregatingState. Trigger可以访问时间属性及计时器, 也可访问状态, 每次调用Trigger时返回TriggerResult, TriggerResult有以下值: 选项 说明 CONTINUE 不采取行动 FREE 若窗口算子拥有ProcessWindowFunction,调用函数返回结果; 若为增量聚合函数ReduceFunction/AggregateFunction,仅触发当前聚合结果.窗口状态并不会改变 PURGE 完全丢弃窗口内容并移除所有元数据, 调用ProcessWindowFunction.clear()清除所有自定义的per-window状态 FIRE_AND_PURGE 首先计算窗口, 然后接着移除所有状态及元数据 其中, Trigger的Flink源码, 参考如下: 123456789101112131415161718192021222324252627282930313233343536373839public abstract class Trigger&lt;T, W extends Window&gt; implements Serializable &#123; //源码 // Called for every element that gets added to a window TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx); // Called when a processing-time timer fires public abstract TriggerResult onProcessingTime(long timestamp, W window, TriggerContext ctx); // Called when an event-time timer fires public abstract TriggerResult onEventTime(long timestamp, W window, TriggerContext ctx); // Returns true if this trigger supports merging of trigger state public boolean canMerge(); // Called when several windows have been merged into one window // and the state of the triggers needs to be merged public void onMerge(W window, OnMergeContext ctx); // Clears any state that the trigger might hold for the given window public abstract void clear(W window, TriggerContext ctx); &#125; // A context object that is given to Trigger methods to allow them // to register timer callbacks and deal with state public interface TriggerContext &#123; long getCurrentProcessingTime(); long getCurrentWatermark(); void registerProcessingTimeTimer(long time); void registerEventTimeTimer(long time); void deleteProcessingTimeTimer(long time); void deleteEventTimeTimer(long time); // Retrieves a state object that is scoped to the window and the key of the trigger &lt;S extends State&gt; S getPartitionedState(StateDescriptor&lt;S, ?&gt; stateDescriptor); &#125; // Extension of TriggerContext that is given to the Trigger.onMerge() method public interface OnMergeContext extends TriggerContext &#123; // Merges per-window state of the trigger // The state to be merged must support merging void mergePartitionedState(StateDescriptor&lt;S, ?&gt; stateDescriptor); &#125; 如何使用Trigger, 以下为一个小例子: 1234567891011121314151617181920212223242526272829303132333435type TrgCtx = Trigger.TriggerResultclass OneSecondIntervalTrigger extends Trigger[SensorReading, TimeWindow] &#123; val firstSeenDesc = new ValueStateDescriptor[Boolean]("firstSeen", classOf[Boolean]) override def onElment(r: SensorReading, timestamp: Long, window: TimeWindow, ctx: TrgCtx): TriggerResult = &#123; val firstSeen: ValueState[Boolean] = ctx.getPartitionedState(firstSeenDesc) if (!firstSeen.value()) &#123; val t = ctx.getCurrentWatermark + (1000 - (ctx.getCurrentWatermark % 100)) ctx.registerEventTimeTimer(t) ctx.registerEventTimeTimer(window.getEnd) // register timer for the window end firstSeen.update(true) &#125; TriggerResult.CONTINUE &#125; override def onEventTime(timestamp: Long, window: TimeWindow, ctx: TrgCtx): TriggerResult = &#123; if (timestamp == wind.getEnd) &#123; TriggerResult.FIRE_AND_PURGE &#125; else &#123; val t = ctx.getCurrentWatermark + (1000 - (ctx.getCurrentWatermak % 100)) if (t &lt; window.getEnd) &#123; ctx.registerEvenTimeTimer(t) &#125; TriggerResult.FIRE &#125; &#125; override def onProcessingTime(timestamp: Long, window: TimeWindow, ctx:TrgCtx): TriggerResult = &#123; TriggerResult.CONTINUE // dont't process processing time timers &#125; override def clear(window: TimeWindow, ctx: TrgCtx): Unit = &#123; val firstSeen: ValueState[Boolean] = ctx.getPartitionedState(firstSeenDesc) firstSeen.clear() // clear trigger state. 由于使用的是`ValueState`, 该Trigger不可合并(non-mergable) &#125;&#125; EvictorEvictor的Flink源码, 参考如下: 123456789101112131415161718192021222324/**Evictors常用于`GlobalWindow`清理部分窗口而非清除整个窗口状态. 可以在窗口计算之前或之后移除部分数据 * Evictors不适用于`ReduceFunction`/`AggregateFunction`对窗口进行增量聚合. 源码参考如下 */public interface Evictor&lt;T, W extends Window&gt; extends Serializable &#123; // Optionally evicts elements. Called before windowing function. void evictBefore( Iterable&lt;TimestampedValue&lt;T&gt;&gt; elements, int size, W window, EvictorContext evictorContext); //EvictorContext提供当前处理时间及水印的访问途径 // Optionally evicts elements. Called after windowing function. void evictAfter( Iterable&lt;TimestampedValue&lt;T&gt;&gt; elements, int size, W window, EvictorContext evictorContext); // A context object that is given to Evictor methods. interface EvictorContext &#123; long getCurrentProcessingTime(); // Returns the current event time watermark. long getCurrentWatermark(); &#125; 窗口算子及类型主要有两类: Keyed Stream及Non-Keyed Stream. keyed stream window nonkeyed stream window 并行计算 单线程处理 创建一窗口算子, 需指定Window Assigner及Window Function. WindowAssigner决定窗口输入流数据Record如何分组, 通常返回WindowStream及AllWindowedStream(Nonkeyed Stream). WindowFunction适用于WindowStream或 AllWindowedStream, 处理窗口内数据Record. 示例代码, 参考如下: 12inputStream.keyBy(...).window(...).reduce/aggregate/process(...) // keyed streaminputStream.windowAll(...).reduce/aggregate/process(...) // nonkeyed stream 除了基于时间窗口,Flink也支持Count-based Window, 由于依赖于消费顺序,计数窗口无序,使用时需指定自定义Trigger对窗口进行维护. 123456789101112131415161718192021val sensorData: DataStream[SensorReading] = ...// Tumbling Windowval avgTemp = sensorData.keyBy(_.id) //或使用便捷方式 .timeWindow(Time.seconds(1)), 也可指定时间偏移offset(第二个时间参数) //如 .window(TumblingEventTimeWindows.of(Time.hours(1), Time.minutes(15))) // TumblingProcessingTimeWindows.of(Time.seconds(1)) .window(TumblingEventTimeWindows.of(Time.seconds(1))) .process(new TemperatureAverager)// Sliding Windowval slidingAvgTemp = sensorData.keyBy(_.id) //可以使用便捷方式 .window(Time.hours(1), Time.minutes(15)) // SlidingProcessingTimeWindows.of(Time.hours(1), Time.minutes(15)) .window(SlidingEventTimeWindows.of(Time.hours(1), Time.minutes(15))) .process(new TemperatureAverager)// Session Window, Session Gap时间范围内不接受Record,不活跃(inactivity)val sessionWindows = sensorData.keyBy(_.id) // ProcessingTimeSessionWindows.withGap(Time.minutes(15)) .window(EventTimeSessionWindows.withGap(Time.minutes(15))) .process(...) 窗口类型, 主要有三大类: Tumbing Window(滚动窗口), Sliding Window(滑动窗口)以及Session Window(会话窗口). Tumbing Window Sliding Window Session Window 常见窗口函数 类型 函数 Incremental Aggregate Functions ReduceFunction,AggregateFunction Full Window Functions ProcessWindowFunction ReduceFunction示例代码, 参考如下: 1234val minTempPerWindow: DataStream[(String, Double)] = sensorData.map&#123; r =&gt; (r.id, r.temperature)&#125; .keyBy(_._1) .timeWindow(Time.seconds(15)) .reduce&#123;(r1, r2) =&gt; (r1._1, r1._2.min(r2._2))&#125; AggregateFunctionAggregateFunction 接口, Flink源码参考如下: 12345678public interface AggregateFunction&lt;IN, ACC, OUT&gt; extends Function, Serializable &#123; ACC createAccumulator(); // add an input element to the accumulator and return the accumulator. ACC add(IN value, ACC accumulator); OUT getResult(ACC accumulator); // merge two accumulators and return the result.= ACC merge(ACC a, ACC b); &#125; 使用示例代码, 参考如下: 123456789101112131415161718val avgTempPerWindow: DataStream[(String, Double)] = sensorData.map &#123; r =&gt; (r.id, r.temperature)&#125; .keyBy(_._1) .timeWindow(Time.seconds(15)) .aggregate(new AvgTempFunction)class AvgTempFunction extends AggregateFunction[(String, Double), (String, Double, Int), (String, Double)] &#123; val initVal = ("", 0.0, 0) override def createAccumulator() = initVal override def add(in: (String, Double, acc:(String, Double, Int))) = &#123; (in._1, in._2 + acc._2, 1 + acc._3) &#125; override def merge(acc1: (String, Double, Int), acc2: (String, Double, Int)) = &#123; (acc1._1, acc1._2 + acc2._2, acc1._3 + acc2._3) &#125; override def getResult(acc: (String, Double, Int)) = &#123; (acc._1, acc._2 / acc._3) &#125;&#125; ProcessWindowFunction通过Context对象访问当前处理时间及事件时间及Side outputs, 窗口元数据通常包括可用于窗口标识符信息如开始和结束时间戳. ProcessWindowFunction存储所有Events至ListState, 该抽象类, Flink源码参考如下: 123456789101112131415161718192021public abstract class ProcessWindowFunction&lt;IN, OUT, KEY, W extends Window&gt; extends AbstractRichFunction &#123; // Evaluates the window void process(KEY key, Context ctx, Iterable&lt;IN&gt; vals, Collector&lt;OUT&gt; out) throws Exception; // Deletes any custom per-window state when the window is purged public void clear(Context ctx) throws Exception &#123;&#125; // The context holding window metadata public abstract class Context implements Serializable &#123; // Returns the metadata of the window public abstract W window(); public abstract long currentProcessingTime(); // Returns the current event-time watermark public abstract long currentWatermark(); // State accessor for per-window state public abstract KeyedStateStore windowState(); // State accessor for per-key global state public abstract KeyedStateStore globalState(); // Emits a record to the side output identified by the OutputTag. public abstract &lt;X&gt; void output(OutputTag&lt;X&gt; outputTag, X value); &#125; 以下代码计算每5秒Tumbling窗口内最高最低温度 12345678910111213case class MinMaxTemp(id: String, min: Double, max: Double, endTs: Long)val minMaxTempPerWindow: DataStream[MinMaxTemp] = sensorData.keyBy(_.id) .timeWindow(Time.seconds(5)) .process(new HighAndLowTempProcessFunction)class HighAndLowTempProcessFunction extends ProcessWindowFunction[SensorReading, MinMaxTemp, String, TimeWindow] &#123; override def process(key: String, ctx: Context, vals: Iterable[SensorReading], out: Collector[MinMaxTemp]): Unit = &#123; val temps = vals.map(_.temperature) val windowEnd = ctx.window.getEnd val minMaxTemp = MinMaxTemp(key, temps.min, temps.max, windowEnd) out.collect(minMaxTemp) &#125;&#125; 窗口增量聚合函数ProcessWindowFunction虽然强大, 但需谨慎使用, 该函数通常容纳比增量聚合函数更多状态数据. 如需应用增量聚合逻辑并访问窗口元数据, 可以结合使用ReduceFunction或AggregateFunction. 当窗口触发器触发时, 分配至窗口的数据立即聚合, 聚合结果会立即由ProcessWindowFunction处理. 示例代码, 参考如下: 12345678910111213141516171819202122232425input.keyBy(...) .timeWindow(...) //.aggregate(incrAggregator: AggregateFunction[IN, ACC, V], windowFunction: ProcessWindowFunction[V, OUT, K, W]) .reduce(incrAggregator: ReduceFunction[IN], function: ProcessWindowFunction[IN, OUT, K, W]) //case class MinMaxTemp(id: String, min: Double, max: Double, endTs: Long) val incrAgg = (r1: (String, Double, Double), r2: (String, Double, Double)) =&gt; &#123; (r1._1, r1._2.min(r2._2), r1._3.max(r2._3)) &#125; val minMaxTempPerWindow2: DataStream[MinMaxTemp] = sensorData.map &#123;r =&gt; (r.id, r.temperature, r.temperature)&#125; .keyBy(_._1) .timeWindow(Time.seconds(5)) .reduce(incrAgg, new AssignWindowEndProcessFunction()) class AssignWindowEndProcessFunction extends ProcessWindowFunction[(String, Double, Double), MinMaxTemp, String, TimeWindow] &#123; override def process(key: String, ctx: Context, minMaxIt: Iterable[(String, Double, Double)], out: Collector[MinMaxTemp]): Unit = &#123; val minMax = minMaxIt.head val windowEnd = ctx.window.getEnd out.collect(MinMaxTemp(key, minMax._2, minMax._3, windowEnd)) &#125; &#125; 窗口Join 1234567891011// Interval Joininput.keyBy(0).between(lowerBound, upperBound).process(ProcessJoinFunction)// Window Joininput1.join(input2) .where(...) //Specify key attributes for input1 .equalTo(...) //Specify key attributes for input2 .window(...) //Specify the WindowAssigner .trigger(...) //Optional: specify a Trigger .evictor(...) //Optional: specify a Evictor .apply(...) //Specify the JoinFunction 处理延迟数据通常有以下三种方式用于处理延迟数据: 简单丢弃 （EventTime窗口算子默认丢弃） 重定向至其它Stream 基于延迟事件更新计算结果, 触发更新 示例代码, 参考如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//重定向延迟事件, 比如可以通过DataStream中side-output特性重定向,延迟事件可以通过常用的sink函数处理或触发//基于具体业务逻辑,可以将延迟数据嵌入至周期性Backfill流式进程中val readings: DataStream[SensorReading] = ???val lateReadingOutputTag = new OutputTag[SensorReading]("late-readings")val countPer10Secs: DataStream[(String, Long, Int)] = readings.keyBy(_.id).timeWindow(Time.seconds(10)) .sideOutputLateData(lateReadingOutputTag) .process(new CountFunction())val lateStream: DataStream[SensorReading] = countPer10Secs.getSideOutput(lateReadingOutputTag)// filter late sensor readings and redirects to a side outputval filterReadings: DataStream[SensorReading] = readings.process(new LateReadingsFilter)val lateReadings: DataStream[SensorReading] = filterReadings.getSideOutput(lateReadingOutputTag)class LateReadingsFilter extends ProcessFunction[SensorReading, SensorReading] &#123; val lrOutputTag = lateReadingOutputTag override def processRlement(in: SensorReading, ctx: ProcessFunction[SensorReading, SensorReading]#Context, out: Collector[SensorReading]): Unit = &#123; // late reading =&gt; redirect to the side output if (in.timestamp &lt; ctx.timerService().currentWatermark()) &#123; ctx.output(lrOutputTag, in) &#125; else &#123; out.collect(in) &#125; &#125;&#125;// 基于延迟事件, 触发更新type OT = (String, Long, Int, String)val countPer10Secs: DataStream[OT] = readings.keyBy(_.id).timeWindow(Time.seconds(10)) .allowedLateness(Time.seconds(5)).process(new UpdatingWindowCountFunction)class UpdatingWindowCountFunction extends ProcessWindowFunction[SensorReading, OT, String, TimeWindow] &#123; val isUpdateDesc = new ValueStateDescriptor[Boolean]("isUpdate", Types.of[Boolean]) override def process(id: String, ctx: Context, elements: Iterable[SensorReading], out: Collector[OT]): Unit = &#123; val cnt = elements.count(_ =&gt; true) val isUpdate = ctx.windowState.getState(isUpdateDesc) // first evaluation, emit first result else emit an update if (!isUpdate.value()) &#123; out.collect((id, ctx.window.getEnd, cnt, "first")) isUpdate.update(true) &#125; else &#123; out.collect((id, ctx.window.getEnd, cnt, "update")) &#125; &#125;&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Flink</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shapeless初体验之依赖类型(Dependent Types)]]></title>
    <url>%2Fshapeless%2Fdependent-types%2F</url>
    <content type="text"><![CDATA[本文将接着介绍Shapeless中依赖类型的几点常见用法. 邂逅依赖类型什么是依赖类型(Dependent Types)? 别急, 先回顾下Shapless中Generic[T] 特质源码: 12345678/** 可以看到 `Generic[T]` 特质存在两个类型: `T` 与 `Repr` * `Repr` 可以为转换前(输入)或转换后(输出)的类型 */trait Generic[T] extends Serializable &#123; type Repr def to(value: T): Repr def from(value: Rper): T&#125; 现在假定有一个 fetchRepr 方法, 猜猜看该方法返回类型是啥? 12345678import shapeless.Genericdef fetchRepr[T](value: T)(implicit generic: Generic[T]) = &#123; // 基于 `Generic[T]` 特质中的`to`方法源码, 很容易判断返回类型为`Repr` // 所以此处返回类型为 `Repr`. // 但问题是此处仅有方法泛型参数`T`, 没有`Repr` 类型参数!!! generic.to(value)&#125; 实际上, 上面方法的返回类型依赖于 generic 实例类型. 再来看个小例子: 12345case class Point(x: Int, y: Int)case class PointShifted(original: Point, result: Point)fetchRepr(Point(16, 21))fetchRepr(PointShifted(Point(11, 21), Point(16, 66))) 猜猜看, 运行上面代码, 将返回什么? 12345scala&gt; fetchRepr(Point(16, 21))res1: shapeless.::[Int, shapeless.::[Int,shapeless.HNil]] = 16 :: 21 :: HNilscala&gt; fetchRepr(PointShifted(Point(11, 21), Point(16, 66)))res2: shapeless.::[Point, shapeless.::[Point,shapeless.HNil]] = Point(11,21) :: Point(16,66) :: HNil 可以看到返回类型均为 HList, 只不过前者为 HList[Int :: Int :: HNil], 后者为 HList[Point :: Point :: HNil]. 什么是依赖类型(Dependent Types), 以上便是依赖类型. 换句话说, 方法fetchRepr返回类型通过类型成员依赖值参数(如果不太理解这句话, 也没关系, 请再看遍上面的Generic[T]特质源码). 如果对方法fetchRepr, 重构代码, 参考如下: 123trait GenericT[T, Repr]def fetchReprRefactored[T, U](value: T)(implicit generic: GenericT[T, U]): U = ??? 很显式, 很有成就感, 是不是? 厉害呀, 这代码好厉害哦….. 好了, 不说反话了, 上面这行代码, 一点用都没有. 为啥? 现在Repr不得不作为类型参数传入, 充当方法签名的一部分, 失去了Dependent Types(依赖类型)的意义. 小结: 类型参数适合充当”输入”, 类型成员适合充当”输出”. 不好意思, 又逼着你复习一遍Scala泛型了. 泛型方法依赖类型在Shapless中使用广泛, 如Generic与Witness. 比如Shapless中提供了一类型类Last, 用于返回HList中最后一个元素. 简化版的Last源码参考如下: 1234trait Last[L &lt;: HList] &#123; type Out def apply(in: L): Out&#125; 如何使用, 可以先看个小例子: 12345678import shapeless.&#123;HList, ::, HNil&#125;import shapless.ops.hlist.Lastval lastCaseOne = Last[String :: Int :: HNil]val lastCaseTwo = Last[Double :: String :: HNil]lastCaseOne("Bonjour" :: 66 :: HNil) lastCaseTwo(166.21 :: "Hola" :: HNil) 运行上面代码, 返回 12345scala&gt; lastCaseOne("Bonjour" :: 66 :: HNil)res1: lastCaseOne.Out = 66scala&gt; lastCaseTwo(166.21 :: "Hola" :: HNil)res2: lastCaseTwo.Out = Hola 运行结果符合预期, 但如果运行下面这段代码, 肯定报错, 原因在于Last需确保输入的HList必须至少含有一个元素. 1234scala&gt; Last[HNil] error: Implicit not found: shapeless.Ops.Last[shapeless.HNil]. shapeless.HNil is empty, so there is no last element. Last[HNil] ^ 还有一点, Last实例的类型参数会进行类型校验, 比如运行下面这段代码将报错 123456scala&gt; lastCaseOne(166 :: "Bonjour" :: HNil) error: type mismatch; found : shapeless.::[Int,shapeless.::[String,shapeless.HNil]] required: shapeless.::[String,shapeless.::[Int,shapeless.HNil]] lastCaseOne(166 :: "Bonjour" :: HNil) ^ 仿照 Last 源码, 可以写段代码如对HList的第二个元素进行判断, 代码参考如下: 12345678910111213141516// 返回 HList 第二个元素trait SecondElement [L &lt;: HList] &#123; type Out def apply(in: L): Out&#125;object SecondElement &#123; type Aux[L &lt;: HList, O] = SecondElement[L] &#123;type Out = O&#125; def apply[L &lt;: HList] ( implicit secondElement: SecondElement[L] ): Aux[L, secondElement.Out] = &#123; secondElement &#125;&#125; 类型类与伴生对象定义完了, 下面写个隐式方法实例化SecondElement, 代码参考如下: 1234567implicit def getSecondElement[T1, T2, R &lt;: HList](): Aux[T1 :: T2 :: R, T2] = new SecondElement[T1 :: T2 :: R] &#123; type Out = T2 type L = T1 :: T2 :: R def apply(in: L): T2 = in.tail.head &#125; 检查代码是否可以正常运行, 测试代码参考如下: 12345val secondElemCaseOne = SecondElement[String :: Double :: Int :: HNil]val secondElemCaseTwo = SecondElement[Int :: String :: Double :: HNil]secondElemCaseOne("Bonjour" :: 66.11 :: 166 :: HNil)secondElemCaseTwo(16 :: "Bonjour" :: 166.21 :: HNil) 运行上面这段代码: 12345scala&gt; secondElemCaseOne("Bonjour" :: 66.11 :: 166 :: HNil)res1: secondElemCaseOne.Out = 66.11scala&gt; secondElemCaseTwo(16 :: "Bonjour" :: 166.21 :: HNil)res2: secondElemCaseTwo.Out = Bonjour 运行正常. 类似地, 如果HList 类型校验不成功, 会报错 12345678910111213scala&gt; // 如果HList类型个数不匹配(如下面HList仅有一个类型), 报错scala&gt; SecondElement("Bonjour" :: HNil) error: could not find implicit value for parameter secondElement: SecondElement[shapeless.::[String,shapeless.HNil]] SecondElement[String :: HNil] ^scala&gt; // 如果HList实例类型不匹配, 报错scala&gt; secondElemCaseOne(66.11 :: "Bonjour" :: 166 :: HNil) error: type mismatch; found : shapeless.::[Double,shapeless.::[String,shapeless.::[Int,shapeless.HNil]]] required: shapeless.::[String,shapeless.::[Double,shapeless.::[Int,shapeless.HNil]]] secondElemCaseOne(66.11 :: "Bonjour" :: 166 :: HNil) ^ 小结: 尽量将自由变量编码成类型参数 . 含有依赖类型的泛型方法提供了一种从源类型转换为目标类型的方式. 链(Chain)与组合依赖类型允许对含有依赖类型的泛型方法链(Chain)起来, 以便写出更具表现力的泛型代码. 比如, 可以写个方法将上面的代码逻辑链起来: 12345678def fetchLastField[T, Repr &lt;: HList](in: T)( implicit generic: Generic.Aux[T, Repr], last: Last[Repr]): last.Out = &#123; last.apply(generic.to(in))&#125; 检测上面这段代码是否可以正常运行(符合预期, 代码运行无误): 12scala&gt; fetchLastField(PointShifted(Point(11, 21), Point(16, 66)))res1: Point = Point(16, 66) 假定有这样一个需求: 12345// 假定存在某项封装值(比如经过很多复杂业务逻辑处理得到, 具体处理逻辑略)// 现在希望写个泛型方法获取该封装值 // 此处使用Case Class作为该封装值容器, 仅为示例case class SomeWrapper(value: Int)// 由于是要设计泛型方法, 总不能使用 `SomeWrapper.value` 这种方式获取 想想看, 有什么好方法? 下面先给出个人的代码逻辑, 如果还有更好的方式, 欢迎补充. 1234567891011import shapeless.ops.hlist.IsHCons// `IsHCons` 可用于将 HList分割成Head与Taildef extractWrappedValue[T, Repr &lt;: HList, Head](in: T)( implicit generic: Generic.Aux[T, Repr], isHCons: ISHCons.Aux[Repr, Head, HNil]): Head = &#123; generic.to(in).head&#125; 效果(运行成功, 符合预期): 12scala&gt; extractWrappedValue(SomeWrapper(166))res1: Int = 166 本文小结: (如何写出符合预期的依赖类型代码, 以下是几点建议) 编译器一次只能处理一项约束(Constraint), 因而使用隐式转换时, 单个隐式转换中不宜使用过多约束 必要时抽取每一项中间类型作为类型参数, 尽管有些类型参数并不会在输出结果中使用, 但编译器需要 编译器从左至右进行隐式查找, 如果找不到合适的组合可能会回溯. 使用隐式转换时, 注意顺序, 必要时使用一项或多项类型参数连接前一隐式值(或隐式方法) 可以使用Shapeless中的Aux类型别名增加代码可读性, 必要时可以在含有依赖类型的泛型方法中使用Aux类型别名 尽量显式声明返回类型, 必要时指明类型参数及类型成员, 以便编译器进行隐式查找. 类型成员很重要, 必要时可以通过Shapless中Aux类型预留]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Shapeless</tag>
        <tag>Generic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, Apache Phoenix与常见Hadoop生态组件交互]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-integ%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Phoenix与常见Hadoop生态组件交互. 与Spark集成Apache Phoenix可与Spark集成, 充分利用Spark API对Phoenix表数据读写提供原生支持. 提交Spark任务时, 可以将依赖包phoenix-spark-phoenix_version-Hbase-hbase_version.jar路径作为参数传入或加入到Spark类路径中, 参考指令如下: 123$ bin/spark-submit.sh --jar /path/to/phoenix-spark-&lt;phoenix_version&gt;-Hbase-&lt;hbase_version&gt;.jar \ # Spark任务Jar包, 运行类及参数等 # 其它配置项, 如driver-memory、executor-memory、executors等略 通过使用Spark RDD对Phoenix表间数据进行读写, 参考代码如下, 该任务从ORDERS表中读取数据并计算每位顾客消费金额, 并将结果数据存储至CUSTOMER_STATS表中. 123456789101112131415161718192021222324252627282930313233343536373839404142434445import org.apache.spark.SparkConfimport org.apache.spark.rdd.RDDimport java.math.BigDecimalobject PhoenixAppSparkRDD &#123; def main(args: Array[String]): Unit = &#123; val zkQuorum = Some("zk-n1:2181") val master = "spark-master" val conf = new SparkConf() .setAppName("Phoenix-Spark-RDD-Write") .setMaster(master) val sc = new SparkContext(conf) val inputTable = "ORDERS" val inputColumns = Seq("ORDER_ID", "CUST_ID", "AMOUNT") val outputTable = "CUSTOMER_STATS" runPhoenixAppRDD(sc, zkQuorum, inputTable, inputColumns, outputTable) &#125; def runPhoenixAppRDD(sc: SparkContext, zkQuorum: Option[String], inputTable: String, inputColumns: Seq[String], outputTable: String): Unit = &#123; val rdd: RDD[Map[String, AnyRef]] = sc.phoenixTableAsRDD(inputTable, inputColumns, zkQuorum) val customerId = inputColumns(1) val amountCol = inputColumns(2) val result = rdd.map &#123; row =&gt; val key = row(customerId).asInstanceOf[Long] val amount = row(amountCol).asInstanceOf[BigDecimal] (key, amount.doubleValue()) &#125; .reduceByKey(_+_) val outputColumns = Seq(customerId, amountCol) result.saveToPhoenix(outputTable, outputColumns, zkQuorum) &#125;&#125; 也可通过使用Spark DataFrame对Phoenix表间数据进行读写, 参考代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243import org.apache.spark.SparkConfimport org.apache.spark.rdd.RDDobject PhoenixAppSparkDF &#123; def main(args: Array[String]): Unit = &#123; val zkQuorum = Some("zk-n1:2181") val master = "spark-master" val conf = new SparkConf() .setAppName("Phoenix-Spark-DataFrame-Write") .setMaster(master) val sc = new SparkContext(conf) val inputTable = "ORDERS" val inputColumns = Seq("ORDER_ID", "CUST_ID", "AMOUNT") val outputTable = "CUSTOMER_STATS" runPhoenixAppDF(sc, zkQuorum, inputTable, inputColumns, outputTable) &#125; def runPhoenixAppDF(sc: SparkContext, zkQuorum: Option[String], inputTable: String, inputColumns: Seq[String], outputTable: String): Unit = &#123; val df = sc.phoenixTableAsDataFrame(inputTable, inputColumns, zkQuorum) val customerId = inputColumns(1) val amountCol = inputColumns(2) val result = df.rdd.map &#123; row =&gt; val key = row.getString(1) val amount = row.geString(2) (key.toLong, amount.toDouble) &#125; .reduceByKey(_+_) val outputColumns = Seq(customerId, amountCol) result.saveToPhoenix(outputTable, outputColumns, zkQuorum) &#125;&#125; 目前Phoenix-Spark插件暂不支持从Phoenix表中批量加载数据, 对于Java用户而言, 使用DataFrame API相对简单, 因为PhoenixRDD暂不支持直接从Java调用. 与Hive集成用户可以使用自定义PhoenixHiveHandler从Apache Phoenix表中读取数据至Hive表中. 首先要将phoenix-phoenix_version-hbase-hbase_version-hive.jar加入Hive环境变量(类路径)中, 可以参考以下命令行: 12# 开启Hive Shell, 键入以下指令, Jar包路径可以是本地文件路径也可以是HDFS、S3等其它分布式文件系统路径ADD JAR /path-to/phoenix-&lt;phoenix_version&gt;-Hbase-&lt;hbase_version&gt;-hive.jar 或者在开启Hive终端时指定Jar包路径: 1$ bin/hive --auxpath=/path-to/phoenix-&lt;phoenix_version&gt;-Hbase-&lt;hbase_version&gt;-hive.jar 也可以写入Hive配置文件hive-site.xml中, 参考如下: 1234&lt;property&gt; &lt;name&gt;hive.aux.jars.path&lt;/name&gt; &lt;value&gt;/path-to/phoenix-&lt;phoenix_version&gt;-Hbase-&lt;hbase_version&gt;-hive.jar&lt;/value&gt;&lt;/property&gt; 解决完Jar包依赖问题, 现在可以建表读取数据了, 可以在Hive中创建内部表或外部表, 区别在于数据表及数据生命周期的管理者不同, 如果是内部表, 数据及生命周期由Hive管理; 若为外部表, 只有元数据由Hive管理. 建表语句参考如下, 注意TBLPROPERTIES中phoenix.column.mapping映射Hive表中每一列至Phoenix, 映射关系为: Hive列:Phenix列, 任何需要传入Phoenix表中属性均可以通过使用TBLPROPERTIES传入. 12345678910111213141516171819-- 创建外部表, orders订单表CREATE EXTERNAL TABLE orders( id int, custid int, order_date date, amount double, quantity int)STORED BY 'org.apache.phoenix.hive.PhoenixStorageHandler'TBLPROPERTIES ( "phoenix.table.name" = "orders", "phoenix.zookeeper.quorum" = "zk_quorum", "phoenix.rowkeys" = "id, custid", "phoenix.column.mapping" = "id:order_id, custid:cust_id, order_date:order_date, amount:amount, quantity:quantity", "phoenix.table.options" = "SALT_BUCKETS=10"); 执行以上指令, 更新Hive元数据存储同时也会创建一张Phoenix表, 或者说, 外部表即订单表orders元数据将由Hive管理, 而实际数据存储于Phoenix表中. 与MR集成尽管Phoenix通过使用HBase底层API支持SELECT、UPSERT等子句拓展, 但有时需要执行一些大批量处理任务如构建索引、聚合大表等, 此时Driver API容易出现瓶颈(如客户端消耗过多内存、影响应用性能等), 该种情况下可以考虑使用MapReduce对Phoenix表进行读写. Phoenix可使用DBInputFormat及DBOutputFormat API进行MapReduce读写. 如用户可以从Phoenix表中读取数据, 执行如SELECT查询, 将底层Byte Stream转化为自定义Writable类. 自定义InputFormat类PhoenixInputFormat, 内部基于输入查询计算查询计划并根据输入Split数量进行优化, PhoenixOutputFormat将数据写入HBase前将Java类型数据序列化至Byte Stream. Apache Phoenix与MapReduce集成时, 需将依赖包phoenix-client-phoenix_version.jar打入MapReduce任务Jar包中, 确保Drive程序可以访问Phoenix表并执行查询计划. 示例代码参考如下, 该MapReduce任务从ORDERS表中读取数据并计算每位顾客消费金额, 并将结果数据存储至ORDER_STATS表中. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.conf.Configured;import org.apache.hadoop.hbase.HBaseConfiguration;import org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;import org.apache.hadoop.io.DoubleWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.NullWritable;import org.apache.hadoop.io.Writable;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.db.DBWritable;import org.apache.hadoop.util.Tool;import org.apache.phoenix.mapreduce.PhoenixOutputFormat;import org.apache.phoenix.mapreduce.util.PhoenixMapReduceUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.DataInput;import java.io.DataOutput;import java.io.IOException;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class OrderStatsApp extends Configured implemnts Tool &#123; private static final Logger LOG = LoggerFactory.getLogger(OrderStatsApp.class); public static main(String[] args) throws Exception &#123; int status = ToolRunner.run(new OrderStatsApp(), args); System.exit(status); &#125; public int run(String[] args) throws Exception &#123; try &#123; final Configuration configuration = HBaseConfiguration.create(getConf()); setConf(configuration); final Job job = Job.getInstance(configuraion, "phoenix-mr-job-order-stats"); final String selectQuery = "SELECT ORDER_ID, CUST_ID, AMOUNT FROM ORDERS"; PhoenixMapReduceUtil.setInput(job, OrderWritable.class, "ORDERS", selectQuery); PhoenixMapReduceUtil.setOutput(job, "ORDER_STATS", "CUST_ID", "AMOUNT"); job.setMapperClass(OrderMapper.class); job.setReducerClass(OrderReducer.class); job.setOutputFormatClass(PhoenixOutputFormat.class); job.setMapOutputKeyClass(LongWritable.class); job.setMapOutputValueClass(DoubleWritable.class); job.setOutputKeyClass(NullWritable.class); job.setOutputValueClass(OrderWritable.class); TableMapReduceUtil.addDependencyJars(job); job.waitForCompletion(true); return 0; &#125; catch (Exception e) &#123; LOG.error(String.format( "An exception [%s] occurred while performing the job: ", e.getMessage())); return -1; &#125; &#125; public static class OrderMapper extends Mapper&lt;NullWritable, OrderWritable, LongWritable, DoubleWritable&gt; &#123; private LongWritable customerId = new LongWritable(); private DoubleWritable amount = new DoubleWritable(); @Override protected void map(NullWritable key, OrderWritbale order, Context context) throws IOException, InterruptedException &#123; customerId.set(order.customerId); amount.set(order.amount); context.write(customerId, amount); &#125; &#125; public static class OrderReducer extends Reducer&lt;LongWritable, DoubleWritable, NullWritable, OrderWritable&gt; &#123; @Override protected void reduce(LongWritable key, Iterable&lt;DoubleWritable&gt; amounts, Context context) throws IOException, InterruptedException &#123; double totalValue = 0; for (DoubleWritable amount: amounts) &#123; totalValue += amount.get() &#125; context.write(NullWritable.get(), new OrderWritable(key.get(), totalValue)); &#125; &#125; public static class OrderWritable implements DBWritable, Writable &#123; private Long customerId; private Double amount; public OrderWritable () &#123; &#125; public OrderWritable(Long customerId, Double amount) &#123; this.customerId = customerId; this.amount = amount; &#125; public void write(PreparedStatement preparedStatement) &#123; preparedStatement.setLong(1, customerId); preparedStatement.setDouble(2, amount); &#125; public void readFields(ResultSet resultSet) throws SQLException &#123; customerId = resultSet.getLong("CUST_ID"); amount = resultSet.getDouble("AMOUNT"); &#125; public void write(DataOutput dataOutput) throws IOException &#123; dataOutput.writeLong(customerId); dataOutput.writeDouble(amount); &#125; public void readFields(DataInput dataInput) throws IOException &#123; this.customerId = dataInput.readLong(); this.amount = dataInput.readDouble(); &#125; &#125;&#125; 通常, 创建索引是一同步过程(非异步), 如果在大表上创建索引, 拓展困难. Apache Phoenix与MapReduce集成, 也支持异步创建索引. 与Flume集成Flume通常由Source、Channel、Sink组成, 支持Push(推送)和Pull(拉取)数据, 管道(Channel)作为Buffer队列避免数据陡增, 当管道中Events写入目的Sink并作为事务中一部分被Sink移除时才可视为已持久化, Sink可插拔, Phoenix提供自定义Sink, 便于与Flume集成. 进行集成时, Phoenix Flume插件需在Flume中注册, 可以拷贝Jar包phoenix-flume-phoenix_version-HBase-hbase_version.jar至$FLUME_HOME/plugins.d/phoenix-sink/lib目录下. 以下参考配置为从Kafka集群Stream数据至Apache Phoenix, 假定配置文件为phoenix-agent.conf 1234567891011121314151617181920212223242526272829# 主要组件配置, Source为Kafka, Sink为Phoenixagent.sources=kcollectoragent.sinks=phoenix-sinkagent.channels=memoryChannel# Source配置agent.sources.kcollector.type = org.apache.flume.source.kafka.KafkaSourceagent.sources.kcollector.channels = memoryChannelagent.sources.kcollector.zookeeperConnect = zk-n1:2181agent.sources.kcollector.topic = phoenix-consumeragent.sources.kcollector.groupId = flume_to_phoenixagent.sources.kcollector.kafka.consumer.timeout.ms = 100# Channel配置agent.channels.memoryChannel.type=memoryagent.channels.memoryChannel.byteCapacityBufferPercentage=20agent.channels.memoryChannel.transactionCapacity=100# Sink配置agent.sinks.phoenix-sink.type=org.apache.phoenix.flume.sink.PhoenixSinkagent.sinks.phoenix-sink.channel=memoryChannelagent.sinks.phoenix-sink.batchSize=100agent.sinks.phoenix-sink.table=PHNIX_TESTagent.sinks.phoenix-sink.ddl=CREATE TABLE IF NOT EXISTS PHNIX_TEST(uid VARCHAT NOT NULL, msg VARCHAR CONSTRAINT pk PRIMARY KEY(uid))agent.sinks.phoenix-sink.zookeeperQuorum=zk-n1agent.sinks.phoenix-sink.serializer=REGEXagent.sinks.phoenix-sink.serializer.rowkeyType=uuidagent.sinks.phoenix-sink.serializer.regex=([^]*)agent.sinks.phoenix-sink.serializer.columns=msg 开启终端运行以下命令行, 将Kafka中生产的每一条消息, 转化为String并写入Apache Phoenix中. 1$ bin/flume-ng agent -f conf/phoenix-agent.conf -c ./conf -n agent 与Pig集成用户可以通过使用PhoenixHBaseLoader以及PhoenixHBaseStorage加载、存储数据至Phoenix表中. 首先需要将Jar包phoenix-pig-phoenix_version-HBase-hbase_version.jar在Pig中注册, 参考Pig脚本如下: 1REGISTER /path/to/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jar 也可以在开启Pig终端时将Jar包路径作为参数传入, 参考指令如下: 1$ pig -Dpig.additional.jars.uris=/path/to/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jar script.pig 访问Phoenix表数据, 参考Pig脚本如下, PhoenixHBaseLoader内部将LOAD子句转化成SELECT查询并从表中多个Region获取数据. 1234567891011121314-- 指定表名REGISTER hdfs://pig/lib/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jarORDER = LOAD 'hbase://table/ORDERS' USING org.apache.phoenix.pig.PhoenixHBaseLoader('zookeeper_quorum_uri');-- 指定表中列REGISTER hdfs://pig/lib/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jarORDER = LOAD 'hbase://table/ORDERS/ORDER_ID, CUST_ID' USING org.apache.phoenix.pig.PhoenixHBaseLoader('zookeeper_quorum_uri');-- 指定SQL语句REGISTER hdfs://pig/lib/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jarORDER = LOAD 'hbase://query/SELECT ORDER_ID, CUST_ID FROM ORDERS' USING org.apache.phoenix.pig.PhoenixHBaseLoader('zookeeper_quorum_uri'); 存储数据至Phoenix, PhoenixHBaseStorage内部将Pig数据类型映射成对应Phoenix数据类型并序列化. 123456REGISTER hdfs://pig/lib/phoenix-pig-&lt;phoenix_version&gt;-HBase-&lt;hbase_version&gt;.jarA = LOAD '/path/to/data' USING PigStorage('\t') AS (a:chararray, b:chararray, c:datetime);STORE A INTO 'hbase://phoenix-table' USING org.apache.phoenix.pig.PhoenixHBaseStorage('$&#123;zookeeper.quorum&#125;', '-batchSize 100'); 注意, 在LOAD子句中不能使用AGGREGATE、GROUP BY、LIMIT或DISTINCT等关键字.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之Operation篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fops-intro%2F</url>
    <content type="text"><![CDATA[本文将对Cascading自定义操作进行简介. Cascading中一个Operation对应一个类, 可以通过new关键字实例化这些对象, 创建Pipe后, 通过参数传递形式将这些对象传入并绑定至管道(Pipe)中. Pipe中传入数据元组与特定的Operation进行绑定, 以便执行数据转换、计算逻辑. 示例代码如下: 12345678910111213// Each (单元组) PipeinPipe = new Each(inPipe, new CustomFunction());// 调用自定义FilterinPipe = new Each(inPipe, new CustomFilter());// 调用自定义ValueAssertioninPipe = new Each(inPipe, AssertionLevel.STRICT, new CustomValueAssertion());// Every (分组元组, 非单元组) Pipe, 调用自定义AggregatorinPipe = new Every(inPipe, new CustomAggregator());// 调用自定义BufferinPipe = new Every(inPipe, new CustomBuffer());// 调用自定义GroupAssertioninPipe = new Every(inPipe, AssertionLevel.STRICT, new CustomGroupAssertion()); Cascading中所有Operation源自Operation接口, 其它特定接口如Filter、Function、Aggregator、Buffer等均源自该接口. BaseOpertaion提供具体实现, 该类为Operation中多数具体类的基类. Cascading中Operation可以粗略地分为以下几类(若按Type划分, 请参考下文中Operation Type小节): Filter, 对数据进行过滤 Function, 执行特定数据转换或计算方法 Aggregator, 对数据集进行聚合、汇总 Buffer, 在一定数量的数据集执行数据计算 Assertion, 断言, Assertion适用于单元组Pipe(如Each)和分组元组Pipe(如Every)等. 关于Operation与Fields, 存在以下俩种方式绑定Function、Fields至Pipe中: 方式一: 绑定Function、所有Fields至Pipe中 1inPipe = new Each(inPipe, Fields.ALL, new CustomFunction()); 方式二: 绑定Funtion、特定Fields至Pipe中 1inPipe = new Each(inPipe, new Fields("name", "address"), new CustomFunction()); 类似地, 存在以下三种方式绑定Function并触发Fields处理于Pipe中: 方式一: 绑定Function、触发所有Fields至Pipe中处理 1inPipe = new Each(inPipe, new CustomFunction(), Fields.ALL); 方式二: 绑定Function、触发RESULTS Fields至Pipe中 1inPipe = new Each(inPipe, new CustomFunction(), Fields.RESULTS); 方式三: 绑定Function、触发特定Fields至Pipe中处理 1inPipe = new Each(inPipe, new CustomFunction(), new Fields("name", "address")); Operation TypeCascading中Operation可分为俩大类: 一类执行于单元组的Operation与另一类执行于Group元组(分组元组, 非单元组)的Operation. 单元组与Each管道(Pipe)相关, Group元组与Every Pipe相关. EachEach管道常用于处理单元组, Each Opeartion中存在Filter与Function. FilterFilter是所有Operation中最简单的, 执行该Operation时仅需实现一个方法isRemove(), 该方法传入一元组并判断是否为待移除元组. Filter内部调用逻辑, 参考如下: Filter实现代码, 参考如下: 123456public class CustomFilter extends BaseOperation&lt;Context&gt; implements Filter&lt;Context&gt; &#123; // `prepare()`、`cleanup()` 方法实现略 public boolean isRemove(FlowProcess flowProcess, FilterCall&lt;Context&gt; filterCall) &#123; // 具体过滤逻辑略 &#125;&#125; Cascading自带过滤器(Filter), 参考如下: Filter名称 说明 ExpressionFilter 传入一Expression字符串, 编译并通过名称或位置绑定输入元组、然后执行, 基于表达式返回Boolean值, 该Filter使用Janino编译 RegexFilter 基于正则表达式过滤 SampleFilter 基于采样比例对元组进行采样抽取, 其中初始化随机数生成函数的Seed值可选 Deubg 打印每项元组至标准输出 FilterNotNull 过滤掉每一项不含null值元组 FilterNull 过滤掉每一项含null值元组 And 传入一过滤器列表, 对列表中Filter进行逻辑与操作(即若满足列表中所有Filter条件则返回true) Or 传入一过滤器列表, 对列表中Filter进行逻辑或操作(即若满足列表中任一Filter条件则返回true) XOR 传入一过滤器集, 对其中Filter进行异或操作(如果所有Filter均返回true或false, 则最终结果返回false) Not 对传入的Filter取反 ScriptFilter 基于脚本内容过滤 示例代码如下: 123456789101112inPipe = new Each(inPipe, new RegexFilter("ECOMM"));// 从Data Stream中抽取20% 数据元组inPipe = new Each(inPipe, new SampleFilter(0.2));// 基于Expression过滤inPipe = new Each(inPipe, new ExpressionFilter("$0 + $1 &lt;= 10000"));// 写入所有元组至标准输出inPipe = new Each(inPipe, new Debug());//基于Field名过滤 inPipe = new Each(inPipe, new Fields("salary", "raise"), new ExpressionFilter("$salary + $raise &lt;= 10000"));// Or、And FilterinPipe = new Each(inPipe, new Or(new FilterOne(), new FilterTwo(), new FilterThree()));inPipe = new Each(inPipe, new And(new FilterOne(), new FilterTwo(), new FilterThree())); FuntionFunction比较通用, 执行特定计算或数据转换逻辑, 然后返回结果元组. Function内部调用逻辑, 参考如下(该Operation主要方法为operate()): Function实现代码, 参考如下: 123456public class CustomFunction extends BaseOperation&lt;Context&gt; implements Function&lt;Context&gt; &#123; // `prepare()`、`cleanup()` 方法实现略 pubic void operate(FlowProcess flowProcess, FunctionCall&lt;Context&gt; functionCall) &#123; // 具体处理逻辑略 &#125;&#125; Cascading自带Function, 参考如下: Functon名称 说明 DateFormatter 将Java时间戳转化为Java字符串, 即传入时间可为SimpleTimeFormat或Timezone、Locale对象 DateParser 将字符串转化为Java中Timestamp对象 RegexParser 基于正则解析 RegexPlacer 基于正则替换 RegexSplitGenerator 基于正则分割元组 ExpressionFunction 传入一Expression字符串, 该函数将编译成字节码, 并通过名称或位置绑定输入元组、然后执行并输出结果, 该函数使用Janino编译 ScriptFunction 可传入一些列脚本字符串, 该函数将编译成字节码, 并通过名称或位置绑定输入元组、然后执行并输出结果, 该函数使用Janino编译 FieldJoiner 将多项Fields通过可选的分隔符(默认为TAB)拼接成一项Field FieldFormatter 将多项Fields按照格式化字符串合并为一项Field Insert 插入部分Fields值至元组中 UnGroup 传入一组Field Selector及Value Field Selector, 为每项Value Field Selector输出分组元组 Identity 什么也没做, 仅写入输入元组至输出collector中 XPathParser 通过使用XPath表达式抽取数据 TagSoupParser 通过使用Tag Soup解释器引擎将HTML转换成合法的XHTML 示例代码如下: 12345678910// INSERT 值至Tuple中inPipe = new Each(inPipe, new Insert(new Fields("datasrc"), "ECOMM DATA"));// 将三项Fields合并成一项inPipe = new Each(inPipe, new FieldJoiner(new Fields("LastName", "FirstName", "MiddleName"), " "));// 基于Expression的函数inPipe = new Each(inPipe, new ExpressionFunction(new Fields("TotalSalary"), "$salary + $raise", Long.class));// 使用`UnGroup` 对元组进行分割// 注意 `UnGroup` 在Hadoop中仅为一Map进程(除非后续指定`GroupBy`)inPipe = new Each(inPipe, new UnGroup(new Fields("FirstName", "LastName"), new Fields[] &#123;new Fields("Salary"), new Fields("Raise")&#125;)); EveryEvery管道, 执行于一组元组之上(非单元组), 通常这些分组由GroupBy管道确定. 这些分组元组可以一次处理一项(Aggregator)或一次性处理所有(Buffer). AggregatorAggreagator常用于聚合(如求和、平均值等)操作, 在一组元组上执行具体聚合逻辑, 返回聚合结果值. Aggregator调用示意图如下: Aggreagator实现代码, 参考如下: 1234567891011121314public class CustomAggreagator extends BaseOperation&lt;Context&gt; implements Aggreagator&lt;Context&gt; &#123; // `prepare()`、`cleanup()` 方法实现略 public void start(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; // 具体实现略 &#125; public void aggregate(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; // 具体实现略 &#125; public void complete(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; // 具体实现略 &#125;&#125; Cascading中自带Aggregator, 参考如下(注意新版Cascading中, MinBy、MaxBy、FirstBy、AverageBy、SumBy及CountBy基类均为AggregateBy, AggregateBy与Hadoop中Combiner类似, 于Map端聚合部分结果、然后在Reduce端合并, AggregateBy通过自动插入GroupBy至Stream中执行Reducer函数): Aggregator名称 说明 First 输出任意一组元组第一项Record (新版Cascading中为FirstBy) Last 输出任意一组元组最后一项Record Min 输出组中包含最小值的Record (新版Cascading中为MinBy) Max 输出组中包含最大值的Record (新版Cascading中为MaxBy) Average 输出组中平均值 (新版Cascading中为AverageBy) Sum 对组中元组值进行求和 (新版Cascading中为SumBy) Count 对组中元组进行计数 (新版Cascading中为CountBy) 示例代码如下: 1234567891011// 对分组元组进行计数inPipe = new GroupBy(inPipe, new Fields("group"));inPipe = new Every(inPipe, Fields.ALL, new Count(new Fields("TotalRecords")), Fields.ALL);// 对分组元组求和inPipe = new GroupBy(inPipe, new Fields("ToSum"));inPipe = new Every(inPipe, new SumBy(new Fields(new Fields("Bonus"), new Fields("SumBonus"), Long.class)));// 找出部门年龄最小人员 (分组默认升序), 也可使用 `MinBy`inPipe = new GroupBy(inPipe, new Fields("Department"), new Fields("Age"));inPipe = new Every(inPipe, new First()); BufferBuffer允许在一个”窗口”上的元组进行操作, Buffer与Aggregator有些类似, 但同时传入一组元组进行处理, 而非单元组. 其中分组操作可由GroupBy和CoGroup管道定义, Buffer中operate()方法可传入一TupleEntries相关迭代器. Buffer内部调用逻辑示意图如下: Buffer实现代码, 参考如下: 123456public class CustomBuffer extends BaseOperation&lt;Context&gt; implements Buffer&lt;Context&gt; &#123; // `prepare()`、`cleanup()` 方法实现略 pubic void operate(FlowProcess flowProcess, BufferCall&lt;Context&gt; bufferCall) &#123; // 具体处理逻辑略 &#125;&#125; Cascading中自带Buffer, 有FirstNBuffer, 该Buffer可以接收Group中特定数量元组, 有些类似TOP N做法, 示例代码如下: 123// 每组选取前1000项Record, 按照自定义函数处理inPipe = new Every(inPipe, new FirstNBuffer(1000));inPipe = new Each(inPipe, new CustomFunction()); AssertionAssertion与Java中断言类似, 适用于条件未满足、抛出异常情形, Assertion常用于测试、Debug, 特别是单元测试中. Assertion与其它Operation不同之处在于, 一般的Assertion需继承BaseAssertion&lt;Context&gt;、实现ValueAssertion&lt;Context&gt;或GroupAssertion&lt;Context&gt;接口(取决于运用于Each还是Every管道). ValueAssertion&lt;Context&gt;接口中doAssert()执行主逻辑、getTrace()方法用于存储断言Fail相关信息以便Trace, ValueAssertion&lt;Context&gt;调用示意图如下: GroupAssertion&lt;Context&gt;接口, 需实现start()、aggregate()及doAssert()方法, start()方法用于断言初始化、开启新元组, 然后将组中每一项元组传入aggregate()方法中执行与Aggregator类似的计算, 处理完后调用doAssert()方法. GroupAssertion&lt;Context&gt;调用示意图如下: Assertion存在以下AssertionLevel: AssertionLevel.STRICT, 适用于生产Job级别 AssertionLevel.VALID, 适用于测试代码中 AssertionLevel.NONE, 关闭所有断言 Cascading中自带Asssertion, 参考如下: Assertion名称 说明 AssertEquals 构造器中传入一元组, 然后验证入参中所有待处理元组是否含有相同数量的Entries AssertEqualsAll 与上类似 AssertNotEquals 与上类似, 注意条件为非等 AssertExperssion 基于Expression验证所待处理元组, 基于Expression返回结果, 该类使用Janino编译 AssertGroupBase 该基类不常用, 一般继承该基类实现自定义Assertion AssetGroupSizeEquals 基于Size或正则断言 AssertGroupSizeLessThan 与上类似, Size判定条件为小于 AssertGroupSizeMoreThan 与上类似, Size判定条件为大于 AssertMatches 基于正则断言 AssertMatchesAll 基于正则断言 AssertNotNull 断言所有待处理元组不为空 AssertNull 与上类似, 判定条件为元组为空 AssertSizeEquals 判定传入Size与所有待处理元组Size是否相等 AssertSizeLessThan 与上类似, Size判定条件为小于 AssertSizeMoreThan 与上类似, Size判定条件为大于 示例代码如下: 12345678910// 验证每项元组中所有Fields非空inPipe = new Each(inPipe, AssertionLevel.STRICT, new AssertNotNull());// 验证所有元组长度为5inPipe = new Each(inPipe, AssertionLevel.STRICT, new AssertSizeEquals(5));// 基于Expression断言, 验证前俩项Field之和为10inPipe = new Each(inPipe, AssertionLevel.STRICT, new AssertionExpression("$0 + $1 ==10L", Long.class));// 验证Field中Salary(本薪) 和 Raise(提薪部分)之和小于 10000inPipe = new Each(inPipe, AssertionLevel.STRICT, new AssertionExpression("$salary +$raise &lt;10000L", Long.class));// 验证每组至少存在俩元组inPipe = new Each(inPipe, AssertionLevel.STRICT, new AssertGroupSizeMoreThan(1)); Operation类与接口Operation类与接口, 继承关系类图如下, 实际上Context作为一类型参数, 也可简单替换为&lt;T&gt;, 主要表明存储于Operation类的对象类型. Operation接口, 存在以下方法签名: 1234567891011121314public interface Operation&lt;Context&gt; &#123; // 接口中其它方法声明略 void prepare(FlowProcess flowProcess, OperationCall&lt;Context&gt; operationCall); void cleanup(FlowProcess flowProcess, OperationCall&lt;Context&gt; operationCall); void flush(FlowProcess flowProcess, OperationCall&lt;Context&gt; operationCall); int getNumArgs(); Fields getFieldDeclartion(); boolean isSafe();&#125; BaseOperation类中提供了许多获取Operation参数的方法, 如调用getFieldDeclaration()方法返回Fields对象, 包含所有创建的Fields信息; getNumArgs()返回输入Fields数量等. 调用isSafe()方法, 若返回true, 表明在同一数据集上运行多次该Operation, 最终得到同一结果, 没有副作用, 具有幂等性. 下图为基本Operation内部调用逻辑示意图, 通过调用prepare()方法初始化, 调用operate()方法对要处理元组执行具体计算、转换逻辑, 处理完成后调用cleanup()方法进行内存释放、关闭文件句柄、数据库连接等. 通常, prepare()方法在Operation执行前调用, 常用于分配context对象并将其存储于OperationCall&lt;Context&gt;中, 实际上prepare()方法还可以做很多事情, 如从磁盘上加载数据、对任务进行反馈通知等. 当所有数据处理任务完成后, 可以调用cleanup()方法, 该方法常用于释放Context对象及分配的内存. ContextContext作为用户定义类型, 由Operation分配, 该对象可传入Operation接口方法中调用, 换句话说, Context可用于存储方法调用的状态信息. 由于Operation是有类型的, 类型参数为Context, 实现Operation接口的子类须指明具体泛型参数. Cascading中并不存在具体类或接口名为Context, Context作为泛型参数引入, 一是类型安全需要, 二是代码复用需要. FlowProcessFlowProcess允许Operation访问底层处理系统相关数据元素, 如Cascading任务以本地模式运行时可访问不同Property值, 若以Hadoop模式运行时可访问JobConf中封装的所有Hadoop类. FlowProcess由Cascading系统创建、可传入Operation接口方法中, 允许访问系统计数器及其它特定Cascading标识与资源等, 注意FlowProcess可不带泛型参数. OperationCall该对象封装了所有Operation需指定的参数, 由Pipe调用该对象进行实际数据处理. OperationCall&lt;Context&gt; 允许用户访问Context对象存储状态. 每一个Operation类型均有源自OperationCall&lt;Context&gt;的接口, 如Filter有FilterCall&lt;Context&gt;, Function有FunctionCall&lt;Context&gt;等. 下表为常见接口中参考方法:]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Enigne大作战 -- Apache Drill之网络报文分析]]></title>
    <url>%2Fbigdata%2Fdrill%2Fnetanalysis%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Drill与网络报文分析相关的一些常见分析技巧. 捕获的网络报文数据, 常见格式为PCAP或PCAP-NG(注意这些格式均为Binary, 二进制数据), 可以通过Wireshark来分析这些PCAP数据, 但Wireshark本身受单机内存限制, 无法分析大规模、大批量网络报文数据. Drill报文分析Apache Drill可直接分析这些PCAP或PCAP-NG报文数据, 无需安装其它插件或依赖包, Drill可用于分析PCAP(或PCAP-NG)中以下数据字段: 协议类型(如TCP/UDP) IP地址, 如源IP地址, 目的IP地址 源端口, 目的端口 源MAC地址, 目的MAC地址 报文创建时间 报文长度 TCP会话及Flag 二级制报文数据(Binary) Drill分析PCAP报文样本数据, 脚本参考如下: 123456789-- 统计TCP会话中报文数分布SELECT tcp_session, COUNT(*) AS packet_countFROM dfs.net_data.`scan.pcap`GROUP BY tcp_sessionHAVING COUNT(*) &gt; 1 查看具体给定TCP会话中各项报文数据, 如下: 12345SELECT * FROM dfs.net_data.`scan.pcap`WHERE tcp_session=6346604732028469374 如上图所示, 第一项报文为SYN(见Flag字段), 然后接着一系列ACK/SYN报文而非ACK报文. Drill报文聚合下面编写一Drill UDAF对这些报文数据进行聚合, 判定某项给定会话是否为Syn泛洪攻击. 该UDAF主逻辑参考如下: 首先, 对TCP会话进行分组 若Flag已设置为SYN, 计数器累加 若Flag已设置为SYN|ACK, 计数器累加 若会话从未关闭(从未接收ACK), 返回true; 否则返回false 代码参考如下(注意TCP三次握手协议, TCP为可靠连接): 12345678910111213141516171819202122232425// 此处仅给出Drill UDAF中`add()`方法及`output()`方法实现逻辑,// `setup()` 及 `reset()` 方法相对简单, 略// 假定该UDAF注册函数名为 `is_syn_scan`@Overridepublic void add() &#123; if (syn.value == 1 &amp;&amp; connectionStatus.value == 0 ) &#123; // 尝试新建连接, 接收SYN 并等待 SYN|ACK connectionStatus.value = 1; &#125; else if(connectionStatus.value == 1 &amp;&amp; synAck.value == 1) &#123; // 若Flag为 SYN|ACK, 连接状态(Status)设置为2, 并等待最终ACK connectionStatus.value = 2; &#125; else if(connectionStatus.value == 2 &amp;&amp; syn.value == 0 &amp;&amp; ack.value == 1) &#123; // 接收到ACK, 连接建立 connectionStatus.value = 3; &#125; &#125;@Override public void output() &#123; if (connectionStatus.value == 2) &#123; out.value = 1; &#125; else &#123; out.value = 0; &#125;&#125; 假定该UDAF注册函数名为is_syn_scan, 部署成功后, 使用参考如下: 123456SELECT tcp_session, is_syn_scan(tcp_session, tcp_flags_syn, tcp_flags_ack)FROM net_data.`scan.pcap`GROUP BY tcp_session 此外, 也可用于HAVING子句中, 参考如下: 1234567SELECT tcp_sessionFROM net_data.`scan.pcap`GROUP BY tcp_sessionHAVING is_syn_scan(tcp_session, tcp_flags_syn, tcp_flags_ack)]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Engine大作战 -- Apache Drill之ML Pipeline构建篇]]></title>
    <url>%2Fbigdata%2Fdrill%2Fmlpipe%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Drill如何与机器学习中Pipeline进行交互, 如参与Pipeline构建与模型预测等. ML PipelineApache Drill并不支持机器学习, Drill本身包含没有机器学习相关的包或库, 因此并不能直接使用Drill进行模型训练与预测. 虽然Drill并不支持机器学习迭代训练, 但可以作为机器学习Pipeline中一环, 参与模型迭代与优化. 以监督型机器学习为例, 常见的机器学习迭代过程如下: 虽然Drill并不直接支持模型训练, 但在查询时可利用训练好的模型进行预测, 本文以H2O为例, 进行分类预测(采用GBM模型). H2O允许用户序列化或导出训练模型, 模型可以导出为POJO(Plain Old Java Object)或MOJO(Maven Old Java Object), 模型导出, 代码参考如下: 12345678910111213141516171819202122232425262728293031import h2ofrom h2o.estimators.gbm import H2OGradientBoostingEstimatordef main(data_path, col_target, col_fields, output_path): h2o.init() df = h2o.load_dataset(data_path) df[col_target] = df[col_target].asfactor() model = H2OGradientBoostingEstimator( distribution='bernoulli', ntrees=100, max_depth=4, learn_rate=0.1) model.train(y=col_target, x=col_fields, training_frame=df) model_file = model.download_mojo( path=output_path, get_genmodel_jar=True)if __name__ == '__main__': data_path = '/path/to/the/dataset' output_path = '/path/to/save/mojo' # 预测列 col_target = 'CAPSULE' # 输入特征 col_fields = ['AGE', 'RACE', 'DCAPS', 'VOL', 'GLEASON'] main(data_path, col_target, col_fields, output_path) 执行上面这段代码, 在输出目录output_path下得到一Jar包, 该Jar包包含训练好的模型代码, 拷贝该Jar包及h2o-genmodel.jar包于Drill节点UDF路径下. 下面再封装一Drill UDF, 方便Drill调用训练好的模型进行预测. UDF封装注意, 部署封装的UDF时, 需将输入参数(即特征)转化为Java中Double类型, UDF代码参考如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768@FunctionTemplate( name="binomal_prediction", scope=FunctionTemplate.FunctionScope.SIMPLE, nulls=FunctionTemplate.NullHandling.NULL_IF_NULL)public static class BinomalPrediction implements DrillSimpleFunc &#123; /** * 以下输入参数(即特征列), 包含年龄,种族,相关分子标记等, 具体参考上面的 * Python脚本, 基于输入特征进行预测 */ @Param Float8Holder age; @Param Float8Holder race; @Param Float8Holder dcapes; @Param Float8Holder vol; @Param Float8Holder gleason; @Workspace // `model`于`setup()`方法中实例化, 于`eval()`方法中进行模型预测 hex.genmodel.easy.EasyPredictModelWrapper model; @Output BitHolder out; @Override public void setup() &#123; String modelFile = "/path/to/mojo"; try &#123; model = new hex.genmodel.easy .EasyPredictModelWrapper(hex.genmodel.MojoModel) .load(modelFile); &#125; catch (Exception e) &#123; // 异常处理略 &#125; &#125; @Override public void eval() &#123; hex.genmodel.easy.RowData row = new hex.genmodel.easy.RowData(); row.put("AGE", age.value); row.put("RACE", race.value); row.put("DCAPS", dcaps.value); row.put("VOL", vol.value); row.put("GLEASON", gleason.value); try &#123; hex.genmodel.easy.prediction.BinomialModelPrediction p = model.predictBinomial(row); if (p.label.equals("l")) &#123; out.value = 1; &#125; else &#123; out.value = 0; &#125; &#125; catch (Exception e) &#123; // 异常处理略 &#125; &#125;&#125; 预测查询使用封装好的UDF及导出的训练模型, 可以对样本数据进行预测分析, 参考如下: 12345678910-- 调用Drill UDF, UDF注册名为`binomal_prediction`, 具体实现请参考上面的Java代码SELECT binomial_prediction( `age`, `race`, `dcaps`, `vol`, `gleason`) AS predictionFROM dfs.model_data.`data_sample.csv`LIMIT 5; prediction True False True True False 看完, 如果感觉”云里雾里”, “不明觉厉”. 请直接看代码即可, 代码比文字更具有说服力.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flink学习手札之State篇]]></title>
    <url>%2Fbigdata%2Fflink%2Fstate%2F</url>
    <content type="text"><![CDATA[Youtube上观看的Flink学习笔记, 有段时间了, 由于是边看视频边记得笔记, 逻辑有些乱, 还请见谅! 有时间再重新整理下! Flink状态语义Flink自带的DataStream Operators、Sources、Sinks具有状态, 用于缓冲Record或维护部分结果状态. 如Window Operator可为ProcessWindowFunction, 收集输入数据Record, 也可为 ReduceFucntion,ProcessFunction会记住调度计时器输出结果, 以及一些Sink函数维持事务状态提供恰好一次语义性. Operator StateFlink支持三种类型的Operator State: list state, list union state, broadcast state list state list union state broadcast state 状态原语Flink支持多种状态原语(State primitives): 状态原语 常见方法 ValueState[T] value(); update(value: T) ListState[T] add(value: T); addAll(values: java.util.List[T]); get(): Iterable[T]; update(value: java.util.List[T]) MapState[K,V] get(key: K); put(key: K, value: V); contains(key: K); remove(key: K) etc. (iterators method etc..) ReducingState[T] add(value: T); get(): Iterable[T] //(single entry); （提供了ListState[T]相同方法,除了 addAll()及update()) AggregatingState[I, O] (与ReducingState类似, 但使用AggregateFunction进行聚合) get(): Iterable[T] //(single element) 状态后端 状态后端 说明 MemoryStateBackend 不宜用于生产环境,低延迟,容易造成gc暂停,堆内存溢出,受限于TaskManager内存,TM故障易丢失状态 FsStateBackend 存储本地状态至TM JVM堆内存,写入状态至远程文件系统,受限于TaskManager内存,有GC pauses RocksDBStateBackend 存储所有状态至本地RocksDB实例,适用于状态量数据庞大应用,支持增量Checkpoint,数据写磁盘序列化/反序列化开销大 State Operator性能取决于多重因素,State数据类型、StateBackend、State Primitives. StateBackend对状态对象进行序列化反序列化. 对于RocksDBBackend使用MapState[K,V]比ValueState[HashMap[K,V]]更加高效, 如果数据元素经常频繁加入列表很少访问,使用 ListState[T]比ValueState[List[T]]更加高效. 建议: 仅每次调用函数时更新状态. Checkpoint和函数调用同步, 多重状态更新并未带来额外好处, 反而会增加单次函数调用更新多重状态带来的序列化开销. RocksDBStateBackend中ListState实现,在读取数据构造Iterable前反序列化所有list entries,但是增加单个值至ListState很廉价,仅需对追加的值进行序列化即可. RocksDBStateBackend中MapState在进行读写时,仅有要读写的KV值才被序列化/反序列化. 遍历MapState时,仅有实际被访问的KV值被RocksDB预先反序列化. 应用示例代码, 参考如下: 12345678910val env = StreamExecutionEnvironment.getExecutionEnvironmentenv.enableCheckpointing(10000L) // 10 Seconds checkpoint interval// Set Maxium Parallelism of Keyed State Operatorsenv.setMaxParallelism(512) // App maximum parallelismval alerts: DataStream[(String, Double, Double)] = keyedSensorData .flatMap(new TemperatureAlertFunction(1.8)) .setMaxParallelism(1024) // Set maximum parallelism for this operator and override// Setting a unique identifier for an operatoralerts.uid("TempAlert") Operator唯一性标识符和最大并行度, 均Baked into a savepoint, 不能更改. 如果标识符或Operators最大并行度变更, 不能成功从Savepoint重启. (任务必须重新部署上线)计算Flink算子(Operator)最大并行度, 逻辑参考如下:一Operator默认最大并行度取决于第一版应用Operator的并行度, 通常最大并行度为: 128 , (如果并行度小于128, 否则使用下面条件取最小值); min { nextPowerOfTwo(parallelism + (parallelism / 2)), 2^15} Queryable StateQueryable State并不适用于应用重启或应用拓展(rescaling), 仅当应用运行时才可访问. QS仅支持 keyed state, 适用于重要查询, 如实时Dashboards或其它监控程序. 示例代码, 参考如下: 12345678910111213141516// Configuring keyed state to be queryableoverride def open(parameters: Configuration): Unit = &#123; val lastTempDescriptor = new ValueStateDescriptor[Double]("lastTemp", classOf[Double]) lastTempDescriptor.setQueryable("lastTemperature") lastTempState = getRuntimeContext.getState[Double](lastTempDescriptor)&#125;val tenSecMaxTemp: DataStream[(String, Double)] = sensorData.map(r =&gt; (r.id, r.temperature)) .keyBy(_._1) .timeWindow(Time.seconds(10)) .max(1)// Write a DataStream into a queryable state sinktenSecMaxTemp .keyBy(_._1) .asQueryableState("maxTemperature") 任何JVM应用程序均可通过Flink运行的QueryableStateClient, QS开发时需添加依赖 flink-queryable-state-client-java, 如何使用, 以下代码为一个小例子: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546object TemperatureDashboard &#123; val proxyHost = "127.0.0.1" //TaskManger host address val proxyPort = 9069 // QSClient Proxy listening port, 9069 default val jobId = "d2447b1a5e0d952c372064c886d2220a" //Acquire it by Rest API,logs or Web UI val numSensors = 5 val refreshInterval = 10000 def main(args: Array[String]): Unit = &#123; val client = new QueryableStateClient(proxyHost, proxyPort) val futures = new Array[CompletableFuture[ValueState[(String, Double)]]](numSensors) val results = new Array[Double](numSensors) val header = (for (i &lt;- 0 until numSensors) yield "sensor_" + (i + 1)) .mkString("\t| ") println(header) // print header line of dashboard table while (true) &#123; for (i &lt;- 0 until numSensors) &#123; futures(i) = queryState("sensor_" + (i + 1), client) &#125; for (i &lt;- 0 until numSensors) &#123; results(i) = futures(i).get().value()._2 &#125; val line = results.map(t =&gt; f"$t%1.3f").mkString("\t| ") println(line) Thread.sleep(refreshInterval) &#125; client.shutdownAndWait() &#125; def queryState(key: String, client: QueryableStateClient): CompletableFuture[ValueState[(String, Double)]] = &#123; client.getKvState[String, ValueState[(String, Double)], (String, Double)]( JobID.fromHexString(jobId), "maxTemperature", key, Types.STRING, new ValueStateDescriptor[(String, Double)]( "", // state name not relevant here Types.TUPLE[(String, Double)]) ) &#125;&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Flink</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之SubAssembly篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fsubassembly%2F</url>
    <content type="text"><![CDATA[本文将介绍Cascading中SubAssembly相关概念及使用. Cascading中管道(Pipe)构成部分, 也称管道子组件(Pipe SubAssembly), 通过使用这些自带的SubAssembly或者自定义的SubAssembly, 可以很方便地构建一Cascading Pipe. Cascading自带SubAssemblyCascading中, 包含以下自带的SubAssembly: cascading.pipe.assembly.Coerce, 可以通过使用Corece将Field转换成另一类型, 示例代码如下: 12// 将字符串类型(String)的`timestamp`转换成Long类型pipe = new Coerce(pipe, new Fields("timestamp"), Long.class); cascading.pipe.assembly.Discard, 丢弃元组中特定Fields, 示例代码如下: 1pipe = new Discard(pipe, new Fields("timestamp")); cascading.pipe.assembly.Retain, 保留元组中特定Fields, 示例代码如下: 1pipe = new Retain(pipe, new Fields("year", "month")); cascading.pipe.assembly.Rename, 为特定Field重命名, 示例代码如下: 1pipe = new Rename(pipe, new Fields("timestamp"), new Fields("datetime")); cascading.pipe.assembly.Unique, 对元组去重, 保留唯一性元组, 该SubAssembly内部使用GroupBy及FirstNBuffer实现, 示例代码如下: 1pipe = new Unique(pipe, new Fields("year", "month"), Fields.ALL); AggregateBy, 与MapReduce中Combiner有些类似, 对Map端聚合进行优化, AggregateBy通过Functor进行优化, AggregateBy.Functor存在以下方法签名: 12345678public interface AggregateBy.Functor extends Serializable &#123; // 获取待聚合、已声明的Fields Fields getDeclaredFields(); // 传入Tuple和Context进行聚合 Tuple aggregate(FlowProcess flowProc, TupleEntry args, Tuple context); // 获取聚合结果元组 Tuple complete(FlowProcess flowProc, Tuple context);&#125; AggregateBy使用一名为LRU(Least Recently Used)的内部Buffer缓存聚合值, 该LRU缓存存在阈值(Threshold), 当阈值满后存入计算中的聚合值, 当LRU满了若检测到新的Group要聚合, 则移除老的Entry. 以下聚合器均为AggregateBy子类: MinBy, 求组中最小值 MaxBy, 求组中最大值 SumBy, 对组中元组求和 AverageBy, 求组中元组平均值 CountBy, 对组中元组计数 FirstBy, 求组中第一项值, 注意并不存在LastBy 示例代码如下: 12345678// `SumBy`聚合器使用示例Pipe inPipe = new Pipe("AggregateBy");// 以雇员`EmployeeName`进行分组, 对雇员薪资进行求和(求和部分为涨薪总和`TotalRaise`), // Value部分为涨薪部分`Raise`inPipe = new SumBy(inPipe, new Fields("EmployeeName"), new Fields("Raise"), new Fields("TotalRaise"), Double.class);// 打印所有结果元组inPipe = new Each(inPipe, new Debug()); Cascading自定义SubAssembly以下代码, 示意了如何创建一自定义SubAssembly: 123456789101112131415161718192021import cascading.operation.Debug;import cascading.pipe.Each;import cascading.pipe.Every;import cascading.pipe.GroupBy;import cascading.pipe.Pipe;import cascading.pipe.SubAssembly;import cascading.tuple.Fields;public class SubAssemblyEx extends SubAssembly &#123; public SubAssemblyEx(Pipe inPipe) &#123; inPipe = new Each(inPipe, new SentenceFunction()); inPipe = new Each(inPipe, new Debug()); inPipe = new GroupBy(inPipe, new Fields("document"), new Fields("sentnum")); inPipe = new Every(inPipe, new TokenBuffer(), new Fields("docname", "sentnum", "wordnum", "word")); inPipe = new Each(inPipe, new Debug()); setTails(inPipe); &#125;&#125; SubAssemblyEx有关测试代码, 如下: 12345678910111213141516171819public class SubAssemblyExTest &#123; public void main(String[] args) &#123; Fields fieldDeclarationInput = new Fields("document", "text"); Fields fieldDeclartionOutput = new Fields("docname", "sentnum", "wordnum", "word"); Scheme inputScheme =new TextDelimited(fieldDeclarationInput, true, "\t"); Scheme outputScheme = new TextDelimited(fieldDeclartionOutput, "\t"); Tap srcTap = new FileTap(inputScheme, args[0]); Tap sinkTap = new FileTap(outputScheme, args[1], SinkMode.REPLACE); Pipe inPipe = new Pipe("InPipe"); Pipe pipeProc = new SubAssemblyEx(inPipe); Flow flow = new LocalFlowConnector(); flow.connect("process", srcTap, sinkTap, pipeProc); flow.complete(); &#125;&#125; 如果想使用多个独立的Pipe SubAssembly, 参考代码如下: 1234567891011121314public class SubAssemblyTailsEx extends SubAssembly &#123; // 返回两个独立的Pipe Assembly public SubAssemblyTailsEx(Pipe inPipe) &#123; Pipe pipeSentence = new Pipe("pipeSentence", inPipe); pipeSentence = new Each(pipeSentence, new SentenceFunction()); Pipe pipeToken = new Pipe("pipeToken", pipeSentence); pipeToken = new GroupBy(pipeToken, new Fields("document"), new Fields("sentnum")); pipeToken = new Every(pipeToken, new TokenBuffer(), new Fields("docname", "sentnum", "wordnum", "word")); setTails(pipeSentence, pipeToken); &#125;&#125; SubAssemblyTailsEx测试代码如下: 12345678910111213141516171819202122232425262728293031public class SubAssemblyExTest &#123; public void main(String[] args) &#123; Fields fieldDeclarationInput = new Fields("document", "text"); Fields fieldDeclartionOutput = new Fields("docname", "sentnum", "wordnum", "word"); Scheme inputScheme =new TextDelimited(fieldDeclarationInput, true, "\t"); Scheme outputScheme = new TextDelimited(fieldDeclartionOutput, "\t"); Tap srcTap = new FileTap(inputScheme, args[0]); Tap sinkTap = new FileTap(outputScheme, args[1], SinkMode.REPLACE); Fields fieldSentenceOutput = new Fields("document", "sentnum", "sentence"); Fields sentenceOutputScheme = new TextDelimited(fieldSentenceOutput, "\t"); Tap sentenceSinkTap = new FileTap(sentenceOutputScheme, args[2], SinkMode.REPLACE); Pipe inPipe = new Pipe("InPipe"); SubAssembly pipeSplit = new SubAssemblyTailsEx(inPipe); Pipe pipeSentence = new Pipe(pipeSplit.getTails()[0]); Pipe pipeToken = new Pipe(pipeSplit.getTails()[1]); FlowDef flowDef = FlowDef.flowDef() .setName("TextFlow") .addSource(inPipe, srcTap) .addTailSink(pipeSentence, sentenceSinkTap) .addTailSink(pipeToken, sinkTap) FlowConnetor flowConnector = new LocalFlowConnector(); Flow flow = flowConnector.connect(flowDef); flow.complete(); &#125;&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, Apache Phoenix UDF实战]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-udf%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Phoenix中自定义函数(UDF, User Defined Function)使用. 用户自定义函数(UDF)可以访问HBase表整行数据, 通过HBase扫描每一项KV(Key-Value)值中一部分触发回调(Callback), 通常传入UDF中evaluate方法的Tuple为Row的当前状态. 配置注册自定义函数(UDF)需要变更HBase配置文件hbase-site.xml中几项配置, 参考如下: 属性名 值 phoenix.functions.allowUserDefinedFunctions true hbase.dynamic.jars.dir ${hbase.rootdir}/lib hbase.local.dir ${hbase.tmp.dir}/local/ UDF代码实战假如有这样一需求: 根据输入字符串判定是否存在元音字母, 将该逻辑封装为一UDF, 查询数据时调用该UDF即可. 参考代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import org.apache.hadoop.hbase.io.ImmutableBytesWritable;import org.apache.phoenix.compile.KeyPart;import org.apache.phoenix.expression.Expression;import org.apache.phoenix.expression.function.ScalarFuction;import org.apache.phoenix.schema.tuple.Tuple;import org.apache.phoenix.schema.types.PBoolean;import org.apache.phoenix.schema.types.PDataType;import org.apache.phoenix.schema.types.PVarchar;import java.sql.SQLException;import java.util.List;public class HasVowelsFunction extends ScalarFunction &#123; private static final String FUNC_NAME = "hasVowels"; @Override public PDataType getDataType() &#123; return PBoolean.INSTANCE; &#125; @Override public String getName() &#123; return FUNC_NAME; &#125; public HasVowelsFunction() &#123; &#125; public HasVowelsFunction(List&lt;Expression&gt; children) throws SQLException &#123; super(children); &#125; @Override public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) &#123; Expression child = children.get(0); if (!child.evaluate(tuple, ptr)) &#123; return false; &#125; String inputStr = (String) PVarchar.INSTANCE.toObject(ptr, child.getSortOrder()); if (inputStr == null) &#123; return true; &#125; boolean vowelFound = false; for (char chr: inputStr.toCharArray()) &#123; if (vowelFound) &#123; break; &#125; switch(chr) &#123; case 'a': case 'e': case 'i': case 'o': case 'u': ptr.set(PBoolean.INSTANCE.toBytes(true)); vowelFound = true; break; default: &#125; &#125; if (!vowelFound) &#123; ptr.set(PBoolean.INSTANCE.toBytes(false)); &#125; return true; &#125; /** * 刚开始写Phoenix UDF时, 对以下俩方法感到疑惑, 点开源码, 看到以下 * 注释, 于是顺手把注释给拷贝过来, 以防下次懵逼. * * Determines whether or not a function may be used to form * the start/stop key of a scan * @return the zero-based position of the argument to traverse * into to look for a primary key column reference, or * &#123;@value #NO_TRAVERSAL&#125; if the function cannot be used to * form the scan key. */ public int getKeyFormationTraversalIndex() &#123; return NO_TRAVERSAL; &#125; /** * Manufactures a KeyPart used to construct the KeyRange given * a constant and a comparison operator. * @param childPart the KeyPart formulated for the child expression * at the &#123;@link #getKeyFormationTraversalIndex()&#125; position. * @return the KeyPart for constructing the KeyRange for this * function. */ public KeyPart newKeyPart(KeyPart childPart) &#123; return null; &#125; public OrderPreserving preservesOrder() &#123; return OrderPreserving.NO; &#125;&#125; UDF部署注册UDF, 首先需将UDF打成的Jar包放到HDFS中(路径随意), 参考指令如下, 默认Phoenix拷贝UDF的Jar包至${hbase.local.dir}. 1$ hdfs dfs -copyFromLocal udf-vowel.jar /hbase/lib/ 注册为Phoenix自定义函数, 参考指令如下: 123jdbc:phoenix:localhost:2181:/hbase&gt; CREATE FUNCTION hasVowels(varchar) RETURN BOOLEAN AS 'HasVowelsFunction' USING JAR '/hbase/lib/udf-vowel.jar'; 注册Phoenix自定义函数, 参考语法如下: 12CREATE [TEMPORARY] FUNCTION &#123;function_name&#125;RETURN &#123;phoenix_data_type&#125; AS &#123;class_name&#125; USING JAR &#123;hdfs_jar_path&#125; 显然, 注册UDF时, Phoenix存储元数据于SYSTEM.FUNCTION系统表中, 这些元数据包括如UDF Jar包路径、函数名、返回类型、函数参数个数等信息. UDF限制 目前仅支持ScalarFunction, 暂时不支持自定义聚合函数(UDAF)、自定义表生成函数(UDTF). 每次执行UDF时, 动态的Class Loader拷贝UDF Jar包至Phoenix客户端路径 ${hbase.local.dir}下, 当删除UDF时Jar包需手动删除. 由于Jar包于HBase RegionServer上加载, 任何UDF变更意味着重新打成Jar包,并添加至 hbase.dynamic.jars.dir(即${hbase.rootdir}/lib). 如果RegionServer宕机, 需重新部署UDF. 查询UDF函数, 需手动查询系统表SYSTEM.FUNCTION .]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, 浅析Apache Phoenix事务]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-txn%2F</url>
    <content type="text"><![CDATA[本文将对Apache Phoenix事务进行剖析. ACID 原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持续性(Durability) 事务控制 提交(Commit) 回滚(Rollback) 存储点(Savepoint). 可以通过回滚恢复的数据库状态. 事务设置(Set Transaction), 如有些数据库支持通过SET TRANSACTION子句设置事务名, 通过事务名便于区分和理解. Phoenix事务关于HBase对于事务支持, 可以参考官方文档. 通常HBase同一RowKey的Cell数据位于同一RegionServer, HBase支持Region级别的Cell数据(或Rows上批量)原子性操作, 通过checkAndPut、checkAndDelete、increment/append等维护Cell数据原子性, 通过MultiRowMutationEndPoint支持Region级别跨行等批量操作. 但HBase并不支持跨Region、跨表或基于多RPC调用的原子性操作. HBase默认不支持完备的ACID语义, 但可通过一些第三方组件如Apache Tephra获取更加广泛的事务语义. 事务管理器于ZooKeeper中注册, 利用ZK进行协同, HBase与事务管理器间交互示意图如下: 通常事务管理器维护着一写指针(指向数据库写入ID), 为每一项事务提供唯一性事务ID并维护事务状态(In-Progress进行、Commited已提交、Invalid无效事务), 必要时解决事务冲突问题. 事务管理器简单而快速、保存所有必要状态至内存中并持久化于预写日志(WAL)中. 可以配置事务管理器处于HA高可用状态, 一主(活跃)一备(备用), 以便发生故障时快速转移. 开启事务(示意图如下), 读指针、写指针及当前状态, 当客户端调用开启事务, 事务管理器孵化一新事务, 写指针自增并追加事务日志. 将事务状态存入内存, 在一定程度上可提高事务性能. 提交事务时(示意图如下), 如果事务成功, In-Progress指针自减, Commited指针自增, 最终写入事务日志记录事务完成. 客户端通过RPC调用事务管理器开启事务, 事务管理器开启事务并将状态从New改为In-Progress, 当客户端执行完如Put/Delete等操作时, 客户端通过调用Commit RPC提交更新至HBase, 事务管理器接收更新并检测事务冲突, 若无冲突将更新写入HBase并记录版本号. 若客户端提交更新失败, 初始化Abort(放弃操作), 若Abort成功, 事务完整、可回滚; 如Abort失败, 事务无效并将其写入日志. Phoenix事务生命周期示意图如下: 多版本并发控制多版本并发控制(MVCC, Multiversion concurrency control), 用于处理并发事务. 通过对每位用户数据及时写快照, 只有当事务完成或提交时用户才能看到这些变更, 任何数据更新写入新快照同时记录新的版本数, 并确保所有版本数据不会覆写老数据. HBase使用MVCC进行数据读取, 避免行锁, HBase中多版本读写大致过程如下: 数据读取: 每次进行读操作时记录数据读取时间戳于Read Point 所有写入及已写入数值(Write Number)不大于已完成数值, 即此时Read Point数值最大 将写入数值不大于读取时Read Point的特定数据行(或列)对应Data Cell返回 数据写入: 获取行锁后, 每次执行写入操作记录写入数值(Write Number) 将步骤1获取的写入数值存储至每项Data Cell的Write Store中 通过声明写入数值, 标志着写入操作完成 乐观并发控制乐观并发控制(OCC, Optimistic Concurrency Control), 适用于事务间互不干扰情形, 避免了锁表、锁行开销. 如果数据正由其它事务修改, OCC在事务提交前会验证每一项数据修改, 然后回滚索引变更. OCC适用于短期事务、分区分割等场景. 事务管理器TephraApache Tephra作为一事务管理器, 可以为分布式存储如HBase提供事务管理, 如多版本控制器和事务回滚. Tephra使用快照隔离, 利用HBase的数据版本为事务读写提供多版本并发控制(MVCC), 通过为每一个用户保留数据快照进行多本版并发控制. Tephra事务控制允许跨HBase表、Region, 允许RPC调用, 支持ACID语义. 配置默认Phoenix没有启用事务, 为开启事务, 需在HBase配置文件hbase-site.xml中启用参数phoenix.transactions.enabled, 参考配置如下, 为使配置生效需重启RegionServer. 12345678910111213141516&lt;property&gt; &lt;name&gt;phoenix.transactions.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定事务快照路径 --&gt;&lt;property&gt; &lt;name&gt;data.tx.snapshot.dir&lt;/name&gt; &lt;value&gt;/tmp/tephra/snapshots&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定事务超时时间 --&gt;&lt;property&gt; &lt;name&gt;data.tx.timeout&lt;/name&gt; &lt;value&gt;60&lt;/value&gt;&lt;/property&gt; 配置完毕, 开启事务管理器Tephra, 参考指令如下: 12$ # Phoenix安装包路径bin目录下存在Tephra二进制可执行文件$ ./bin/tephra start 开启事务可以在建表时设置事务或后续更新表时支持事务, 在建表时开启事务参考语句如下: 1234567891011-- 建表时开启事务SQL语法CREATE TABLE table_name (column(s) data type(s)) TRANSACTIONAL=true;-- 创建供应商表时开启事务CREATE TABLE SUPPLIER( SUPPLIER_ID BIGINT NOT NULL PRIMARY KEY, SUPPLIER_NAME VARCHAR(30),CITY VARCHAR(40), STATE VARCHAR(30), ZIP INTEGER(10), COUNTRY VARCHAR(100)) TRANSACTIONAL=true; 在更新数据表时开启事务, 参考语句如下: 12345-- 在更新数据表时开启事务, SQL语法ALTER TABLE table_name SET TRANSACTIONAL=true;-- 如在CUSTOMER表上开启事务ALTER TABLE CUSTOMER SET TRANSACTIONAL=true; 注意, 若在非事务表上启用事务, 该表后续不能改回非事务状态(事务表). 提交事务当Phoenix处于事务执行模式, 任何查询中调用的Statement将初始化一新事务, 数据处于Raw状态直至提交. 可以通过!commit指令提交事务, 以下仅为示例脚本: 123456789-- 假定Phoenix处于事务执行模式, 开启新事务SELECT * FROM ORDERS;-- 插入、删除部分数据UPSERT INTO ORDERS VALUES (10250,'2015-5-7', 108, 50,'A1100');DELETE FROM ORDERS WHERE ORDER_ID='10248';-- 提交事务!commit Phoenix事务限制 需手动清理无效事务列表. 失败或不合法事务会被加入一无效事务列表中, 该列表由Tephra维护, 发生重大合并时需手动清理该列表. Tephra开发者后续会着手解决这个问题, 毕竟多数数据库支持自动清除无效事务. 在事务表上创建异步索引(如执行CREATE INDEX ASYNC子句)前, 需对数据做重大归并(Major Compaction), 否则索引中会出现事务未提交或无效事务. 创建事务表时数据版本数(值)需设置合理, 否则会导致部分重要日志数据丢失.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, Apache Phoenix之性能优化篇]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-tuning%2F</url>
    <content type="text"><![CDATA[本文将对Apache Phoenix性能优化进行小结. Phoenix性能优化建议: 在进行数据加载操作时, 优先考虑Phoenix批量加载; 创建索引时, 默认索引创建为一同步过程(非异步), 如果数据表很大, 可能比较耗时, 此时可以考虑异步创建索引; 开启Phoenix Tracing服务, 全方位监测Phoenix各项Metrics, 确保HBase集群或Phoenix服务健壮性; 可以利用一些第三方Benchmark、性能测试工具, 如Pherf等, 对Phoenix进行性能测试等, 以便更好地进行优化. Phoenix批量加载Apache Phoenix通过MapReduce作业, 允许批量加载CSV或JSON数据集至Phoenix表中, Phoenix批量加载工具内部为数据表生成对应HFile, 吞吐量高、高效利用集群资源, 比安装包路径下bin/psql.py脚本(该脚本使用HBase Put API)好用, 进行批量操作时也可以指定索引表名. 启用批量加载参考指令如下: 123456$ # 设置环境变量$ export HADOOP_CLASSPATH = $(hbase mapredcp):/path-to-hbase-conf$ # 加载CSV数据集至Phoenix表$ hadoop jar phoenix-&lt;version&gt;-HBase-&lt;hbase-version&gt;-client.jar org.apache.phoenix.mapreduce.CsvBulkLoadTool --table ORDERS --input orders.csv$ # 加载JSON数据集至Phoenix表$ hadoop jar phoenix-&lt;version&gt;-HBase-&lt;hbase-version&gt;-client.jar org.apache.phoenix.mapreduce.JsonBulkLoadTool --table ORDERS --input orders.json 批量加载其它相关参数如下: 参数 说明 —input 数据输入路径, 必须指明 —zookeeper ZK Quorum URI —schema 数据表Schema —table 数据表, 必须指明 —index-table 索引表 —import-columns 数据列, 通过逗号分割 —ignore-errors 忽视Job中产生的任何错误 —output 临时HFile输出路径 —delimiter 仅用于CSV数据集, 默认分隔符为逗号 —quote 仅用于CSV, 默认为双引号(Double Quote) —arrary-delimiter 数组元素分隔符, 默认为冒号(:) 注意事项 默认每个列族批量加载HFile超过32个,会抛出IOException异常,可以适当增加Region大小(默认为10GB),或修改HBase配置文件hbase-site.xml中hbase.mapreduce.bulkload.max.hfiles.perRegion.perFamily参数. 批量加载JSON数据集时, JsonBulkLoadTool任务并不允许JSON嵌套, JSON中列表内部映射为Phoenix中数组类型. 当导入CSV数据时, 若列为数组类型, 可使用不同分隔符分割数组元素, 数组默认分隔符为冒号. 如果目的表为新建的Phoenix表, 请确保该表已预分割(Pre-split), 因为Job中Reducer数量取决于表中Region数量. 进行批量加载时, 若使用参数—output指定HFile输出路径, 请确保执行该指令时具有对应的用户权限, 如HFile须由”hbase”用户生成等. Phoenix Tracing Server为更好地监测Apache Phoenix, Phoenix集成了Apache HTrace, HTrace作为一分布式Tracing组件, 支持对HBase等组件进行Tracing. Phoenix支持Tracing客户端及服务端, 并提供一Web UI界面可视化这些Traces信息. 首先了解下Tracing中几个相关概念: Trace, 用户初始化请求于TraceScope, Trace管理Span的生命周期. Span, 每一项Trace由多项Span组成, 每一项Span由一伪随机数标识, 对应一RPC或执行块(Block), Span可深度嵌套, 每一项Span具拥有其对应父Span信息, Span可跨网段. Span的开始、结束时间、描述信息及其它相关信息具有声明. Span Receivers, 或者说采集器, 从Trace源采集Span并写入存储, 如LocalFileSpanReceiver、StandardOutSpanReceiver、ZipkinSpanReceiver、TraceMetricSource等. 配置Hadoop Metrics框架通过使用MetricsSource及MetricsSink生产并消费Metrics. Phoenix提供一自定义Sink, 可接收客户端及服务端Trace等信息于默认系统表SYSTEM.TRACING_STATS中. 为启用Tracing, 需在客户端和服务端进行配置. 客户端配置参考如下: 1234567891011# Metrics Sinkphoenix.sink.tracing.class=org.apache.phoenix.trace.PhoenixMetricsSinkphoenix.sink.tracing.context=tracing# 每10秒从所有Source采样*.period=10# Tracing频率, 可以将以下配置写入hbase-site.xml中phoenix.tracing.frequency=[never | always | probability]# 当Tracing频率设置为 `probability`时, 可配置其阈值phoenix.trace.probability.threshold = 0.05 也可通过代码进行配置, 参考如下: 12345Properties props = new Properties();props.setProperty("phoenix.trace.frequency", "probability");props.setProperty("phoenix.trace.probability.threshold", 0.5)final Connection conn = DriverManager.getConnection("jdbc:phoenix:localhost", props); 服务端配置参考如下: 12345678# Metrics Sinkphoenix.sink.tracing.class=org.apache.phoenix.trace.PhoenixMetricsSinkphoenix.sink.tracing.context=tracing# 确保接收Server的Tracehbase.sink.tracing.class=org.apache.phoenix.trace.PhoenixMetricsSinkhbase.sink.tracing.writer-class=org.apache.phoenix.trace.PhoenixTableMetricsWriterhbase.sink.tracing.context=tracing 默认所有Trace写入系统表SYSTEM.TRACING_STATS, 如需更改, 修改HBase配置文件hbase-site.xml中参数phoenix.trace.statsTableName即可, 如下: 1234&lt;property&gt; &lt;name&gt;phoenix.trace.statsTableName&lt;/name&gt; &lt;value&gt;&#123;your_tracing_table&#125;&lt;/value&gt; &lt;/property&gt; 运行可以通过以下指令, 在Phoenix终端中开启或禁用Tracing: 12345# 启用Tracingjdbc:phoenix:PHOENIX-N1:2181&gt; TRACE ON;# 禁用Tracingjdbc:phoenix:PHOENIX-N1:2181&gt; TRACE OFF; 也可通过运行以下Python脚本开启Tracing Server, 并通过一Web UI界面查看这些Traces, 如Trace分布、计数、Timeline、依赖等. 12# 在Phoenix安装包路径下键入以下指令$ ./bin/traceserver.py start 执行以上指令, 运行一Jetty Server(默认监听端口8864), 如需更改Tracing Server监听端口, 修改HBase配置文件hbase-site.xml中以下参数即可: 12345&lt;!-- 默认端口为8864, 可自行修改 --&gt;&lt;property&gt; &lt;name&gt;phoenix.traceserver.http.port"&lt;/name&gt; &lt;value&gt;8864&lt;/value&gt;&lt;/property&gt; Trace请求被封装至MetricsRecord并写入数据表(默认系统表SYSTEM.TRACING_STATS)中, 可以通过以下指令查看表中数据: 123456$ bin/sqlline.pyjdbc:phoenix:PHOENIX-N1:2181&gt; SELECT * FROM SYSTEM.TRACING_STATS;# 查看系统表 SYSTEM.TRACING_STATS 的Schemajdbc:phoenix:PHOENIX-N1:2181&gt; !describe SYSTEM.TRACING_STATS 异步创建索引Phoenix创建索引默认为一同步过程(非异步), 比较耗时. 随着Phoenix后续不断优化, 也支持异步创建索引, 主要通过MapReduce任务实现, 异步创建索引参SQL语法如下: 1CREATE INDEX index_name ON schema_name.table_name (columns) ASYNC 也可通过命令行(本质上运行相关Jar包)异步创建索引, 参考如下: 123456$ # 设置环境变量$ export HADOOP_CLASSPATH = $(hbase mapredcp):/path-to-hbase-conf$ hadoop jar phoenix-&lt;version&gt;-HBase-&lt;hbase-version&gt;-client.jar \ org.apache.phoenix.mapreduce.index.IndexTool \ --schema MY_SCHEMA --data-table MY_TABLE --index-table ASYNC_IDX \ --output-path /hdfs/path/for/hfiles 执行完以上指令后, Phoenix内部将索引状态标记为INACTIVE, 当MapReduce任务执行完后, 索引状态变为ACTIVE, 此时可接收查询.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shapeless初体验之Poly与Type Class篇]]></title>
    <url>%2Fshapeless%2Fpoly%2F</url>
    <content type="text"><![CDATA[本文将接着介绍Shapeless中Poly用法, 希望你能Get到Poly的一些使用技巧. 牛刀小试假定有这样一个需求, 存在产品A和产品B, A与B的属性存在差异, 现在希望设计一泛型接口对A(或B)进行属性判定并转换成B(或A). 没看明白需求? 没关系, 下面使用代码量化下 12345678910111213141516171819// 假定存在产品A和B, 产品属性存在差异 (当然实际业务场景中产品属性更复杂些, 本例进行了简化)// 假定产品A存在以下三个属性: 产品名称, 价格, 是否有评分 (当然实际业务场景, 价格使用BigDecimal更合适)case class ProductA(name: String, price: Double, hasScore: Boolean)// 假定产品B存在以下三个属性: 产品名称, 价格是否实惠, 排名(或评分等级)case class ProductB(name: String, isExpensive: Boolean, rank: Double)// 现在希望存在类似于以下接口, 以便产品A转换成产品BProductA("Some Product", 106.99, true).mapTo[ProductB](SomeConversionRules)// 为了简化说明, 假定 产品A -&gt; 产品B 转换逻辑, 伪代码参考如下val productA = ProductA(name, price, hasScore)productA match &#123; case (name, price, hasScore) =&gt; // 假定超过 $100 认为偏贵 val isExpensive = if (price &gt; 100d) true else false val rank = if (hasScore) 1d else 0d ProductB(name, isExpensive, rank) case _ =&gt; // Do Nothing&#125; 由于是设计一泛型接口, 所以不能直接使用上面的模式匹配逻辑代码, 上面的模式匹配代码也仅仅只是做个说明. 泛型是个好东西, 特别是面临快速代码复用迭代时. 明确了产品A到产品B的转换逻辑, 可以先开始写 SomeConversionRules 代码 12345678910111213/** * 使用Shapless中的`Poly1`. 单例对象 `SomeConversionRules` 中的各隐式值 * 你可以先简单理解成 ProductA -&gt; ProductB (或ProductB -&gt; ProductA) * 各自对应属性类型间转换关系 */ object SomeConversionRules extends Poly1 &#123; // double -&gt; boolean implicit val doubleCase: Case.Aux[Double, Boolean] = at(_ &gt; 100d) // boolean -&gt; double implicit val booleanCase: Case.Aux[Boolean, Double] = at(if(_) 1d else 0d) // string -&gt; string implicit val stringCase: Case.Aux[String, String] = at(identity)&#125; 技巧本例将使用隐式转换与类型类设计接口. 首先, 回到产品A到产品B的映射关系上, 先简单定义一个 ProductMapper 特质 1234trait ProductMapper[A, B, P] &#123; // 定义 `apply()` 工厂方法, ProductA -&gt; ProductB ( A -&gt; B) def apply(product: A): B&#125; 现在利用隐式方法实例化 ProductMapper (本例使用隐式转换, 好处在于灵活, 对于同一接口源码而言, 上下文确定, 对于实现productA.mapTo[ProductB], 可以减少很多不必要的显示接口调用, 相对灵活) 12345678910111213141516171819// Generic Product Mapperimplicit def genericProductMapper[ A, B, P &lt;: Poly, ARepr &lt;: HList, BRepr &lt;: HList] ( implicit aGen: Generic.Aux[A, ARepr], bGen: Generic.Aux[B, BRepr], mapper: hlist.Mapper.Aux[P, ARepr, BRepr]): ProductMapper[A, B, P] = &#123; new ProductMapper[A, B, P] &#123; //注意 `bGen.from` 与 `aGen.to` 调用的是 `Generic[T]` 特质中方法 def apply(a: A): B = bGen.from(mapper.apply(aGen.to(a))) &#125;&#125; 其中, Generic Shapeless源码参考如下: 1234567891011121314151617181920object Generic &#123; /** `Aux[T, Repr0]` 实际上为一 `Generic[T]` 特质 * 实际上 `Aux[T, Repr0]` 中类型参数 `Repr0` 也可替换为 `U` * 即 `Aux[T, U]`, 只需保证 `U` 为&#123;T&#125;泛型表征, 可组合于&#123;Coproduct&#125;与&#123;HList&#125;类型 */ type Aux[T, Repr0] = Generic[T] &#123; type Repr = Repr0 &#125; def apply[T](implicit gen: Generic[T]): Aux[T, gen.Repr] = gen implicit def materialize[T, R]: Aux[T, R] = macro GenericMacros.materialize[T, R]&#125;trait Generic[T] extends Serializable &#123; /** The generic representation type for &#123;T&#125;, which will be composed of &#123;Coproduct&#125; and &#123;HList&#125; types */ type Repr // T -&gt; Repr def to(t : T) : Repr // Repr -&gt; T def from(r : Repr) : T&#125; hlist.Mapper 源码参考如下: 1234567891011121314151617181920212223trait Mapper[HF, In &lt;: HList] extends DepFn1[In] with Serializable &#123; type Out &lt;: HList &#125;object Mapper &#123; def apply[F, L &lt;: HList](implicit mapper: Mapper[F, L]): Aux[F, L, mapper.Out] = mapper type Aux[HF, In &lt;: HList, Out0 &lt;: HList] = Mapper[HF, In] &#123; type Out = Out0 &#125; implicit def hnilMapper1[HF]: Aux[HF, HNil, HNil] = new Mapper[HF, HNil] &#123; type Out = HNil def apply(l : HNil): Out = HNil &#125; implicit def hlistMapper1[HF &lt;: Poly, InH, InT &lt;: HList, OutT &lt;: HList] (implicit hc : Case1[HF, InH], mt : Mapper.Aux[HF, InT, OutT] ): Aux[HF, InH :: InT, hc.Result :: OutT] = new Mapper[HF, InH :: InT] &#123; type Out = hc.Result :: OutT def apply(l : InH :: InT): Out = hc(l.head) :: mt(l.tail) &#125;&#125; 现在实现 productA.mapTo[ProductB] 中 mapTo 方法主逻辑, 可以考虑通过隐式类拓展ProductMapper 并通过生成器模式实现 mapTo 方法 123456789implicit class ProductMapperOperation[A](product: A) &#123; class Builder[B] &#123; def apply[P &lt;: Poly](poly: P)(implicit pm: ProductMapper[A, B, P]): B = pm.apply(product) &#125; // 使用生成器模式 def mapTo[B]: Builder[B] = new Builder[B]&#125; 效果12scala&gt; ProductA("Some Product", 106.99, true).mapTo[ProductB](SomeConversionRules)res0: ProductB = ProductB("Some Product", true, 1.0) 以上代码只是个小例子, 该接口适用场景: 产品A与产品B存在关联(比如产品属性间存在关联逻辑), 或者开发时版本迁移问题(不同版本中可能存在同一产品属性间Migrate问题) 希望你能Get到Shapeless中Poly的一些使用技巧, 或者类型类与隐式转换在泛型接口设计上的一些思考.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
        <tag>Shapeless</tag>
        <tag>Generic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之自定义操作(Custom Operations)篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fcustops%2F</url>
    <content type="text"><![CDATA[本文将介绍如何编写Cascading自定义操作. 常见用例分析尽管Cascading自带很多实用的Operations, 但有时须编写自定义Operation, 常见用例如下: 加载某些外部数据时(通常也可使用prepare()方法), 可能需要编写自定义操作, 如不同数据类型(如在StopList上使用HashJoin或CoGroup管道). 注意, 可以通过使用cascading.hadoop.tap.DistCacheTap将文件存入Hadoop分布式缓存中充当Source而非Sink. 如某种复杂的过滤或函数要求, 通常可以使用Expression类, 但有时为了性能和可维护性, 需要开发者自行实现. 某些情况下, Cascading并不提供特定数据结构或持久化类, 如在图处理方面可能需编写Custom Operations. 有时, 你需要一过滤器或函数对多个Field进行简单的比较或计算, 可以使用ExpressionFilter或ExpressionFunction, 这些类使用灵活、允许实现自定义操作. 但请注意Janino编译器使用情况, Janino作为一迷你Java编译器, 有时会产生很大的”Footprint”, 通常Janino将输入作为字符串传入, 将传入的Java程序编译成字节码, 绑定输入输出变量然后执行. 常见自定义Operation实现Filter编写一自定义过滤器, 通常该Filter需继承cascading.operation.BaseOperation, 并重写以下方法: cleanup() flush() getFieldDelcaration() getNumArgs() isSafe() prepare() 现在来看个简单示例, 编写一自定义Filter, 接收元组为行号和文本, 过滤包含特定文本元组, 参考代码如下: 1234567891011121314151617181920212223242526import cascading.flow.FlowProcess;import cascading.operation.BaseOperation;import cascading.operation.Filter;import cascading.operation.FilterCall;import cascading.tuple.Fields;import cascading.tuple.TupleEntry;public class SampleFilter extends BaseOperation implements Filter &#123; String filterWord = ""; static Fields fieldInputs = new Fields("line_num", "line"); public SampleFilter(String word) &#123; // 期望传入两个Field参数 super(2); filterWord = word &#125; /** * 由于SampleFilter实现了Filter接口, 只需实现`isRemove()`方法即可 */ public boolean isRemove(FlowProcess flowProcess, FilterCall call) &#123; // 获取参数的 TupleEntry TupleEntry arguments = call.getArguments(); return arguments.getString(1).contains(filterWord); &#125;&#125; 测试代码, 参考如下: 1234567891011121314151617public class TestFilter &#123; public static void main(String[] args) &#123; Scheme mainScheme = new TextDelimited( new Fields("line_num", "line" ), true, "," ); Tap source = new FileTap(mainScheme, args[0] ); Tap sink = new FileTap(mainScheme, args[1], SinkMode.REPLACE); Pipe inPipe = new Pipe("InPipe"); inPipe = new Each(inPipe, new SampleFilter("test")); Flow flow = new LocalFlowConnector() .connect(source, sink, inPipe ); flow.complete(); &#125;&#125; Function与Filter有些类似, Cascading函数需继承类cascading.operation.BaseOperation, 重写以下方法: cleanup() flush() getFileDeclaration() getNumberArgs() isSafe() prepare() operate() 通常Cascading中Function拥有以下三个方法: prepare(), 为输出元组分配上下文(Context) operate(), 具体执行逻辑 cleanup(), 释放内存 以下这段实例代码, 读取文本文档并将文档切割成语句, 该函数运用于一Tuple Stream, 假定其中每一项Tuple代表一文档, 输出文本文件包含文档名、语句编号以及每行语句. 12345678910111213141516171819202122232425262728293031323334353637383940public class SentFunc extends BaseOperation&lt;Tuple&gt; implements Function&lt;Tuple&gt; &#123; static Fields fieldDeclaration = new Fields("document","text"); static Fields fieldOutput = new Fields("document","sentnum", "sentence"); public SentFunc() &#123; super(2, fieldOutput); &#125; @Override public void prepare(FlowProcess flowProcess, OperationCall&lt;Tuple&gt; call) &#123; call.setContext(Tuple.size(3)); &#125; public void operate(FlowProcess flowProcess, FunctionCall&lt;Tuple&gt; call) &#123; TupleEntry arguments = call.getArguments(); String[] sentences = NLPUtils.getSentences(arguments.getString(1)); int sentCounter=0; for (String sent: sentences)&#123; // 获取之前创建的元组 Tuple result = call.getContext(); // 元组成员为: 文档名、 语句编号、语句 result.set(0,arguments.getString(0)); result.set(1,sentCounter); result.set(2,sent); // 返回结果元组 call.getOutputCollector().add(result); sentCounter++; &#125; &#125; @Override public void cleanup(FlowProcess flowProcess, OperationCall&lt;Tuple&gt; call ) &#123; call.setContext(null); &#125;&#125; 其中NLPUtils.getSentences()方法, 参考代码如下: 1234567public static String[] getSentences(String text) &#123; String[] sentences = text.split("[.?!]"); for (int i=0; i&lt; sentences.length; i++) &#123; sentences[i] = sentences[i].trim(); &#125; return sentences;&#125; Aggregator实现Cascading中Aggregator接口, 需实现以下三个方法: start() aggregate() complete() 实现自定义聚合器, 通常有以下俩种方式: 实现Aggregator接口, 并实现以上三个方法 与实现自定义Cascading函数有些类似, 需重写prepare()、cleanup()等方法 下面看个简单例子, 假定产品销售数据如下(第一行为列名, 数据列分别为店名、产品名称、售出数量、退回数量), 现在需计算每种产品实际售出量. 1234567StoreName,ProductName,Sold,ReturnedStoreA,Product1,10,2StoreB,Product1,20,5StoreA,Product2,100,20StoreB,Product2,50,1StoreA,Product3,20,10StoreB,Product3,10,3 参考代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import cascading.flow.FlowProcess;import cascading.operation.Aggregator;import cascading.operation.AggregatorCall;import cascading.operation.BaseOperation;import cascading.operation.Operation;import cascading.tuple.Fields;import cascading.tuple.Tuple;import cascading.tuple.TupleEntry;public class SampleAggregator extends BaseOperation&lt;SampleAggregator.Context&gt; implements Aggregator&lt;SampleAggregator.Context&gt; &#123; public class Context &#123; long value = 0; &#125; public SampleAggregator() &#123; // 期望传入两个参数 super(2, new Fields("actual_sold")); &#125; public SampleAggregator(Fields calcFields)&#123; super(2, calcFields); &#125; public void start(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; aggregatorCall.setContext(new Context()); &#125; public void aggregate(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; TupleEntry arguments = aggregatorCall.getArguments(); Context context = aggregatorCall.getContext(); context.value += (arguments.getInteger(0) - arguments.getInteger(1)); &#125; public void complete(FlowProcess flowProcess, AggregatorCall&lt;Context&gt; aggregatorCall) &#123; Tuple result = new Tuple(); Context context = aggregatorCall.getContext(); result.add(context.value); aggregatorCall.getOutputCollector().add(result); &#125;&#125; 测试代码如下: 123456789101112131415161718192021222324252627282930public class TestAggregator &#123; public static void main(String[] args) &#123; Scheme sourceScheme = new TextDelimited( new Fields("store_name","product_name", "number_sold","number_returned"), true, "," ); Tap source = new FileTap(sourceScheme, args[0]); Scheme sinkScheme = new TextDelimited( new Fields("product_name", "actual_sold") ); Tap sink = new FileTap(sinkScheme, args[1], SinkMode.REPLACE); Pipe assembly = new Pipe( "total" ); assembly = new GroupBy(assembly, new Fields("product_name")); assembly = new Every(assembly, new Fields("number_sold","number_returned"), new SampleAggregator(new Fields("actual_sold")), Fields.ALL); FlowConnector flowConnector = new LocalFlowConnector(); Flow flow = flowConnector.connect(source,sink,assembly); flow.complete(); &#125;&#125; 第二种聚合器实现方式, 参考代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 public class SampleAggregator2 extends BaseOperation&lt;SampleAggregator2.Context&gt; implements Aggregator&lt;SampleAggregator2.Context&gt; &#123; public class Context &#123; long value = 0; Tuple tuple = Tuple.size(2); &#125; public SampleAggregator2() &#123; super(2, new Fields("actual_sold")); &#125; public SampleAggregator2(Fields calcFields) &#123; super(2, calcFields); &#125; @Override public void prepare(FlowProcess flowProcess, OperationCall&lt;SampleAggregator2.Context&gt; aggregatorCall) &#123; aggregatorCall.setContext(new SampleAggregator2.Context()); &#125; @Override public void cleanup(FlowProcess flowProcess, OperationCall&lt;SampleAggregator2.Context&gt; aggregatorCall) &#123; aggregatorCall.setContext(null); &#125; public void start(FlowProcess flowProcess, AggregatorCall&lt;SampleAggregator2.Context&gt; aggregatorCall) &#123; Context context = aggregatorCall.getContext(); context.value = 0; context.tuple.clear(); &#125; public void aggregate(FlowProcess flowProcess, AggregatorCall&lt;SampleAggregator2.Context&gt; aggregatorCall) &#123; TupleEntry arguments = aggregatorCall.getArguments(); Context context = aggregatorCall.getContext(); context.value += (arguments.getInteger(0)-arguments.getInteger(1)); &#125; public void complete(FlowProcess flowProcess, AggregatorCall&lt;SampleAggregator2.Context&gt; aggregatorCall) &#123; Context context = aggregatorCall.getContext(); Tuple result = context.tuple; result.add(context.value); aggregatorCall.getOutputCollector().add(result); &#125;&#125; BufferBuffer可以视为基于内存的聚合器(Aggregator), 与聚合器类似, 执行于一系列元组, 也可接收迭代器迭代. 以下这段代码, 将上述SentFunc中生成语句进行分词, 这些语句可以根据空格、冒号、分号进行分词. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import java.util.Iterator;import com.ai.utils.NLPUtils;import cascading.flow.FlowProcess;import cascading.operation.BaseOperation;import cascading.operation.Buffer;import cascading.operation.BufferCall;import cascading.tuple.Fields;import cascading.tuple.Tuple;import cascading.tuple.TupleEntry;public class TokenBuffer extends BaseOperation implements Buffer &#123; static Fields fieldDeclaration = new Fields("document", "sentnum", "sentence"); static Fields fieldOutput = new Fields("documentname", "sentnumber", "wordnum", "word"); public TokenBuffer() &#123; super(3, fieldOutput); &#125; public void operate(FlowProcess flowProcess, BufferCall bufferCall) &#123; int sentnum = 0; TupleEntry group = bufferCall.getGroup(); Iterator&lt;TupleEntry&gt; arguments = bufferCall.getArgumentsIterator(); Tuple result = Tuple.size(4); int tokenCount = 0; while(arguments.hasNext()) &#123; Tuple tuple = arguments.next().getTuple(); String tokens = NLPUtils.getToken(tuple.getString(2)); for (int i = 0; i &lt; tokens.length; i++)&#123; String token = tokens[i]; if (token == null || token.isEmpty()) continue; tokenCount++; result.set(0, group.getString("document")); result.set(1, sentnum); result.set(2, tokenCount); result.set(3, token); bufferCall.getOutputCollector().add(result); if (i == tokens.length - 1) &#123; if (!NLPUtils.isAbbreviation(token)) &#123; sentnum++; tokenCount = 0; &#125; &#125; &#125; &#125; &#125;&#125; 其中NLPUtils.getTokens()方法, 代码参考如下: 123public static String[] getTokens(String sentence) &#123; return sentence.split("[("[("[ ,;:]+");&#125; 其中NLPUtils.isAbbreviation()方法, 参考代码如下: 123456789101112131415static HashSet&lt;String&gt; abbrevs = new HashSet&lt;String&gt;();static &#123; loadTestData();&#125;public static boolean isAbbreviation(String token) &#123; token = token.toUpperCase(); if (abbrevs.contains(token)) return true; return false;&#125;private static void loadTestData() &#123; // 加载样本数据至abbrevs该HashSet中&#125; 测试代码, 参考如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import cascading.flow.Flow;import cascading.flow.local.LocalFlowConnector;import cascading.operation.Debug;import cascading.pipe.Each;import cascading.pipe.Every;import cascading.pipe.GroupBy;import cascading.pipe.Pipe;import cascading.scheme.Scheme;import cascading.scheme.local.TextDelimited;import cascading.tap.SinkMode;import cascading.tap.Tap;import cascading.tap.local.FileTap;import cascading.tuple.Fields;import com.ai.learning.SentFunc;import com.ai.learning.TokenBuffer;public class TestBuffer &#123; public static void main(String[] args) &#123; Fields fieldDeclarationInput = new Fields("document","text"); Fields fieldDeclarationOutput = new Fields("documentname","sentnumber","wordnum", "word"); Scheme inputScheme = new TextDelimited(fieldDeclarationInput, true,"\t"); Scheme outputScheme = new TextDelimited(fieldDeclarationOutput,"\t"); Tap docTap = new FileTap(inputScheme, args[0]), SinkMode.REPLACE); Tap sinkTap = new FileTap(outputScheme, args[1], SinkMode.REPLACE); Pipe inPipe = new Pipe("InPipe"); inPipe= new Each(inPipe, new SentFunc()); inPipe = new GroupBy(inPipe, new Fields("document"), new Fields("sentnum")); inPipe = new Every(inPipe, new TokenBuffer(), fieldDeclarationOutput); Flow flow = new LocalFlowConnector .connect("process", docTap, sinkTap, inPipe); flow.complete(); &#125;&#125; Assertion以下代码, 实现了一简单断言, 判断输入文件中Field是否为空: 123456789101112131415161718192021222324252627282930313233import cascading.flow.FlowProcess;import cascading.operation.ValueAssertion;import cascading.operation.ValueAssertionCall;import cascading.operation.assertion.BaseAssertion;import cascading.tuple.TupleEntry;public class SampleAssertion extends BaseAssertion implements ValueAssertion &#123; public SampleAssertion() &#123; super("argument '%s' failed Sample Assertion, in tuple: %s"); &#125; @Override public void doAssert(FlowProcess flowProcess, ValueAssertionCall assertionCall) &#123; TupleEntry input = assertionCall.getArguments(); int pos = 0; for(Object value : input.getTuple()) &#123; if(checkForEmptyString(value)) fail(input.getFields().get(pos), input.getTuple().print()); pos++; &#125; &#125; private boolean checkForEmptyString(Object value) &#123; if (value == null || value.toString().isEmpty()) return true; return false; &#125;&#125; 测试代码: 12345678910111213141516171819public class TestAssertion &#123; public static void main(String[] args) &#123; Scheme mainScheme = new TextDelimited( new Fields("name", "address", "phone"), true, "," ); Tap source = new FileTap(mainScheme, args[0]); Tap sink = new FileTap(mainScheme, args[1], SinkMode.REPLACE); Pipe inPipe = new Pipe("InPipe"); inPipe = new Each(inPipe, new Debug()); inPipe = new Each(inPipe, AssertionLevel.STRICT, new SampleAssertion()); Flow flow = new LocalFlowConnector() .connect(source, sink, inPipe); flow.complete(); &#125;&#125; 小结 通常, 一个管道中定义了一操作符实现某种功能特性. Operations通常可分为两类: 在单元组上执行(Each)以及分组元组上执行(Every). 缓冲器(Buffers)和聚合器(Aggregators)操作对象为一系列元组(分组元组). 元组可变, 但Operations不应修改这些元组, 须拷贝一份并传入Pipeline下一操作符中. 处理元组时, 不要修改, 否则可能会抛出异常. 当然为提高性能, 也可缓存元组. 注意复用已分配内存, 如在prepare()方法中分配、存储于上下文(Context)中、并在cleanup()方法中释放. 有时, 某些函数可能会运行俩次, 可通过重写isSafe()方法、返回false解决.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, Apache Phoenix索引剖析]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-idx%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Phoenix二级索引相关概念及使用. 二级索引为高效访问数据, HBase表数据默认基于RowKey字典序排列并在RowKey基础上维护一特殊的索引, 以便加快数据访问. 由于HBase不支持二级索引, 有时候需要考虑替代方案, 幸运地是Phoenix支持二级索引, 可以在Phoenix表间构建多重索引, 二级索引在提升数据检索效率和提升灵活度同时, 也增加了与服务端数据同步上的复杂性. Apache Phoenix通过使用自定义协处理器于多项索引间同步数据. 对于给定查询而言, Phoenix查询计划器和优化器会选择最优查询计划, 如查询中包含索引列, Phoenix内部使用索引表重写查询来获取数据. 如果Phoenix表中存在只写或仅追加行, 可以通过设置表属性IMMUTABLE_ROWS为true(置于CREATE TABLE子句前或ALTER TABLE子句后), 减少数据在写入同时维护索引带来的Overhead; 若选择不设置该属性, 当数据变更时将在服务端维护自增索引. Phoenix支持全局索引和局部索引. 全局索引全局索引适用于读取密集型任务, 当进行Put/Delete等写入操作值数据表和索引时存在部分性能影响, HBase协处理器可以提供Hooks将预读写日志及RegionServer的不同活动及时通知它们(数据表和索引), 这些Hooks有助于写入必要数据至索引表中. 全局索引适用于如Scan类查询, 因为Phoenix会重写Query并选择最优查询计划如从索引表而非数据表获取数据. 全局索引内部构成示意图如下: 索引创建语法如下: 12345CREATE INDEX index_nameON table (expression)INCLUDE (column_refs)[ASYNC][table_options] [SPLIT ON (constant)] 如在表customer上构建索引, 参考如下: 1jdbc:phoenix:PHOENIX-N1:2181&gt; CREATE INDEX customer_state_indx ON customer (state); 开启HBase Shell, 查看索引表: 123$ hbase shellhbase(main):001:0&gt; scan 'customer_state_indx' 发现索引表RowKey格式为: {index_column} {primary_table_rowkey}. 一旦索引创建, Phoenix会将索引表与主表同步, 由于该过程同步(非异步), 可能需要等待一段时间才能查询数据. 查看索引状态, 参考指令如下: 1jdbc:phoenix:PHOENIX-N1:2181&gt; !tables customer_state_indx 索引状态, 有以下几种, 只要当索引处于ACTIVE状态时, Phoenix才可使用索引表, 否则使用主表进行查询. BUIDLING USABLE UNUSABLE ACTIVE INACTIVE DISABLE REBUILD 创建全局索引时, 注意区分Immutable表和Mutable表. 每张HBase表, 隐式而言, 属于Mutable表; 但有些表如存储时间序列数据表, 通常为仅追加、写入表, 不会频繁Update, 这种情况下, 可设置表属性(参数)IMMUTABLE_ROWS=true, 参考语句如下: 1jdbc:phoenix:PHOENIX-N1:2181&gt; ALTER TABLE ORDERS SET IMMUTABLE_ROWS = true; 由于上面将ORDERS表设置为Immutable表, 因而在查询每位顾客消费金额时将对全表扫描, 如下: 现在, 在ORDERS表上创建二级索引, 如下: 1jdbc:phoenix:PHOENIX-N1:2181&gt; CREATE INDEX CUSTOMER_ORDER_INDX ON ORDERS (CUST_ID, ORDER_ID) include (amount); 然后执行相同聚合SQL语句, 查询每位顾客消费金额, 可以看到在CUSTOMER_ORDER_INDX上执行全表扫描, 但执行效率更高, 因为跳过了客户端排序. 对于Immutable表而言, 索引维护在客户端, 即Phoenix内部基于主表和输入数据更新索引表, 写入顺序为主表然后索引表. 当然将表设置为Immutable表并不能防止表更新, 如果数据表有更新(如Update等操作), 可能会产生数据不一致状况. 对于Mutable表而言, Phoenix通过自定义RegionObservers及WAL Observers, 当主表产生Mutation(如执行Put/Delete操作)时, 会对索引表更新并写入, 在协处理器内部多线程并行写. 如果索引表写入失败, 索引更新失败, Phoenix支持以下几种故障处理策略: 可以禁用失败索引, 不在Query中使用, 故障发生后会自动重建索引, 重建成功后, 索引处于ACTIVE状态. Kill对应RegionServer, 通过该种方式重放预写日志(WAL)进行恢复. 如果写入索引表时发生故障, 可以通过回放预写日志(WAL)重试、恢复; 若写入数据表失败, 客户端需重试Mutation避免数据不一致. 局部索引局部索引基于Region, 对于本地索引而言, 主表和索引表(实际上无独立索引表)数据均位于同一Region中, 适用于写入密集型任务, 避免网络交换压力.局部索引主要组件构成, 示意图如下, 由于没有独立的索引表, 索引表元数据信息存储于系统表SYSTEM.CATALOG中. 由于局部索引存储于同一主表中不同列族, 无需独立表, 索引表数据存储于L#0列族中, Phoenix中局部索引表RowKey为: region_startkey + index_id + index_column_value + master_table_rowkey. 局部索引与RegionServer交互示意图如下: 局部索引创建指令参考如下: 12-- 在 ITEM 表上增加局部索引jdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; CREATE LOCAL INDEX ITEM_SUPPLIER_LINDX ON ITEM(supplier_id); 执行上面这句SQL, 发现表中新增一列族L#0, 其中L代表局部索引而0为默认列族名, 如果在创建局部索引中包含其他列族中列, 如”cf1:c”, 可能多出几个列族如L#cf1(存储”c”列中KV值). 函数式索引函数式索引(Functional Index)提供了可以通过表达式(Expression)在表上一列或多列创建索引的能力, 在表上计算表达式同时, 会在索引表上同步生成对应UPSERT指令. 通过在数据写入时存储已计算好的Expression, 可避免部分数据读取开销, 包含该Expression的查询会重定向至索引表并获取对应数据信息. 创建函数式索引参考指令如下: 123-- 在SUPPLIER表上创建函数式索引, -- 当SELECT查询包含UPPER(SUPPLIER_NAME)这一Expression时, 会重定向至索引表而非SUPPLIER表CREATE INDEX SUPPLIER_UPPER_NAME_INDEX ON SUPPILER (UPPER(SUPPLIER_NAME)) INCLUDE (STATE) Covered Index除了在Key列创建二级索引外, 还可以包含数据表中其他列至索引中, 当所有查询中列均可从索引中获取时, 有助于提高读性能, 避免频繁地调用数据表. Covered Index创建指令参考如下: 12345-- 创建Covered Index语法CREATE INDEX INDX_NAME ON TABLE_NAME (COL1, COL2...) INCLUDE (COLX, COLY);-- 在ORDERS表上创建索引, 以CUST_ID和ORDER_ID作为Key列, AMOUNT作为包含列CREATE INDEX CUSTOMER_ORDER_INDEX ON ORDERS(CUST_ID, ORDER_ID) INCLUDE (AMOUNT); Covered Index创建, 虽然在主表和索引表上存在数据冗余问题, 但性能提升上可以抵消这种存储开销. 索引一致性 如果数据表为Immutable(IMMUTABLE_ROWS=true)、非事务表, 任何数据写入或索引表时发生的故障, 需由客户端处理(如采取重启等方式解决问题), 当数据表写入成功但索引写入失败, 索引将处于数据不一致状态. 事务表总是处于一致性状态. 对于局部索引而言, 数据和局部索引可能处于非一致性状态, 但Phoenix确保同步, 由于局部索引处于同一RegionServer, 因而整个过程非常快. 自Phoenix 4.X系列版本, 局部索引位于数据表中不同列族, HBase默认ACID语义可保证数据一致性. 若数据表为Mutable、非事务表, 当Query产生一Failure时, 数据或索引处于不一致状态, 如果数据表写入成功, 但索引写入滞后, 有以下几种参考配置可以改变这种状况: Phoenix默认允许数据表写入, 而不允许索引表. 当Phoenix开启一后台进程重建索引时, 索引表被标记为DISABLED状态, 该过程中无需显式配置, 一旦索引表与数据表同步, 索引表状态更新为ACTIVE. 数据表禁止后续写入直至索引自动重建、索引同步, 在该种情况下, 索引仍被标记为ACTIVE并接收查询, 直到与数据表同步时才接收新的写入. 当Block写入数据表、索引写入产生Failure时, 可以设置phoenix.index.failure.block.write属性;可设置phoenix.index.failure.handling.rebuild参数, 当发生故障需要重建索引时, 由于该参数默认为true, 因为Phoenix默认会在后台重建索引. 手动重建、禁止索引表写入, 适用于索引奔溃需要重建情形, 当写入索引失败时, Phoenix更新索引状态为REBUILD. 可设置phoenix.index.failure.handling.rebuild参数为false, 禁止Phoenix自动重建索引, 显式重建索引, 参考指令如下: 12-- 如果使用 ASYNC 关键字, 创建索引会开启MapReduce任务构建, 而非同步重建索引ALTER INDEX IF EXISTS INDEX_TABLE ON DATA_TABLE REBUILD [ASYNC]]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之性能优化篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Ftuning%2F</url>
    <content type="text"><![CDATA[Hadoop及MapReduce性能优化, 一直是广大数据开发人员所关心的问题, 本文仅对Cascading开发提供部分性能优化建议. 如上图所示, Cascading性能调优, 粗略地可分为三部分性能优化: Cascading调优(对应图中最上面两层)、Hadoop性能优化以及底层操作系统、硬件调优. Cascading性能优化涉及代码逻辑层Data Flow构建、Pipeline和Operator设计和选型、Taps和Sehemes定制、Connectors选取等, 由于Cascading本身运行于Hadoop之上, 所以还需考虑数据分区、Reducer数量、Buffer大小设置等其它Hadoop配置调优. 本文仅对前两部分(Cascading及Hadoop调优部分)进行说明、小节. Cascading优化小节 首先尽可能并行运行Cascading应用程序. 其中会涉及到Pipeline分割, 对于并行数据输入可能产生的冗余读取问题, 可以考虑顺序化处理避免数据冗余问题. 尽可能减少处理的数据量. 通过减少一些不必要处理的数据, 从而减少一些不必要的网络I/O及磁盘I/O. 磁盘I/O源于数据持久化于Taps(包括checkpoint)、网络I/O源自运行的Reducers等. 常见参考措施如下: 明确要处理的数据量. 如输入Taps的数据集大小、数据格式、通常数据处理的Record数量等. 尽早执行过滤操作. 通常大数据处理任务按”流水线”方式处理, 尽早执行数据过滤, 可较少后续要处理的数据量, 提升整体性能. 尽早移除不相关的Fields. 如使用输入、输出Selector移除无光数据, 也可使用Retain组装(指定要保留的数据): 123Pipe main = new Pipe("main");main = new Each(main, ...);pipe = new Retain(pipe, new Fields("name", "address", "zip")); 尽可能移除冗余数据. 假如一Stream元组存在唯一主键, 可使用Unique移除冗余数据: 123Pipe pipe = new Pipe("main");pipe = new Each(pipe, ..., new CustomFunction(), new Fields("key", "value"));pipe = new Unique(pipe, new Fields("key")); 借鉴MapReduce中Combiner思想, 先在Map端聚合部分数据, 然后在Reducer端合并, 减少Reducer端输入数据量. 说简单点, 尽可能利用Cascading中Combiner技巧. 防止Join时数据倾斜.通常Join在Reducer端进行, 假如存在数据倾斜, 通常存在多个Reducer比其它Reduer处理的数据量大, 对于Hadoop任务而言, 运行最长的任务决定整体运行时间. 为防止数据倾斜, 可考虑使用Cascading Filter对倾斜的Keys值进行分割, 然后在数据子集上并行Join. Join时, 尽量使用如HashJoin等内存优化型Join. 如进行Join操作时, 可以考虑Map端Join、或MapReduce时考虑将小表放在左边以便加载至内存等. 谨慎使用CoGroup、GroupBy. 这俩Operator均运行于Reducer端, 这意味着这些Operator的Mapper将执行一Full Hadoop Job, 产生磁盘I/O、比较耗时. 谨慎评估使用这些Operator, 以便提升任务的执行效率. 合理分区. Hadoop基于数据目录读取输入数据, 合理分区, 有助于提升数据读写效率, 减少一些不必要的磁盘I/O开销. Cascading中存在几种Tap, 有助于减少I/O开销, 如GlobHfs: 123456// 假定某电商数据按时间分区, `GlobHfs`允许Unix形式"glob"读取HDFS目录中数据、或正则匹配// 本例中仅读取该电商2015年第一季度数据String inPath = "/ecomm/2015/q1/*";GlobHfs sourceGlob = new GlobHfs(sourceTextLineSchema, inPath);// `MultiSourceTap`, 作为一组合Tap, 将多项Tap高效地视为同一Tap, 通常这些Tap共享同一SchemeTap sourceTap = new MultiSourceTap(sourceGlob); Checkpoint优化. Checkpoint常用于容错, 对于常见的复杂计算、Join或涉及大量I/O开销操作, 可考虑使用Checkpoint. 当数据任务从Checkpoint重启、恢复时, 要求下游Pipeline提前感知文件格式, 如提供Taps中Fields列表给需要Checkpoint的用户等. 由于Checkpoint会序列化至磁盘, 刷写临时文件至磁盘, 推荐使用快速而高效的序列化格式进行序列化, 如使用SequenceFile等: 1234567891011121314151617import cascading.scheme.hadoop.SequenceFile;// 略去Taps、路径path等其它代码Fields checkpointFields = new Fields(...);Scheme seqScheme = new SequenceFile(checkpointFields);Tap checkpointTap = new Hfs(seqScheme, path);// 定义Pipeline, 进行数据处理Pipe pipe = new Pipe("main");Checkpoint checkpoint = new Checkpoint("checkpoint-one", pipe);// 略去Pipeline具体处理逻辑// 于下一Pipeline中添加Checkpoint, 便于容错、恢复Pipe nextPipe = new Each(checkpoint, checkpointFields, ...);FlowDef flow = new FlowDef() ... .addCheckpoint(checkpoint, checkpointTap); 合理设计Data Flow. 每次调试Cascading程序时, 注意评审生成的DOT文件, 可视化这些DOT文件, 评估生成的数据处理流程(Data Flow), 及时进行优化、提高并行度等. JVM调优. 如尽可能复用对象, 减少GC, 如在Cascading任务中调用prepare()方法将可复用对象存于Context中; 合理使用容器类型, 较少内存消耗、提升执行效率; JVM参数调优, 如初始堆、最大堆参数设置等. Hadoop优化小节 适当增加Reducer数量. Reducer数过少, 并行度低, 影响MapReduce或Cascading任务运行效率, 可适当增加Reducer数量, 提高并行度. Cascading中通常在Pipeline中设置Reducer数: 1pipe.getStepConfigDef().setProperty("mapred.reduce.tasks", 13); 合理设置Mapper数量. Mapper数量由Hadoop配置参数dfs.block.size(Hadoop 2.X系列为dfs.blocksize)大小和输入数据大小决定, 或者说Mapper数量等于输入数据大小总量除以该配置参数大小. Block大小可全局增长, 也可通过以下命令行适当增加: 1$ hadoop fs -D fs.local.block.size=&lt;size&gt; -put &lt;local_file&gt; &lt;hdfs_file&gt; 也可在Cascading程序中进行配置: 123properties.set("dfs.block.size", 256*1024*1024);// 也可在Pipeline中适当增加BlockSize大小, 以下代码设置BlockSize为256MBpipe.getStepConfigDef().setProperty("dfs.block.size", 256*1024*1024); 谨慎使用自定义Writables. Writable通常用于在Mapper与Reducer间快速而高效地进行序列化和传输, 由于自定义Writable会产生其它的Payload信息于Record, 建议谨慎使用自定义的Writable类型. 可以考虑使用Hadoop Token(信令), Hadoop Token通过替换自定义Writable中部分元数据信息(如Key中部分元数据, 后续可映射回实际Writable类型, 如保持原先长度、类型等),可以快速而高效地对自定义Writable类型进行编码. 通常Cascading中并不需要太多自定义Writable类型, 元组本身较为灵活、可嵌套, 便于组合成复杂类型, 对于Cascading而言, 除非特定业务场景, 通常无需使用自定义Writable类型. 监控和避免数据溢出. 当内存Buffer满了(通常会清空并刷写至磁盘为其它输入数据预留存储空间), 可能会发生数据溢出. 通常, Hadoop中数据溢出发生于Mapper端和Reducer端: Mapper端当数据累积准备发送至Reducer端时; Reducer端当数据达到并在聚合前进行排序时. 可以参考以下日志, 判定数据是否溢出: 12345678910111213141516171819202122232425262716:44:01 INFO input.FileInputFormat: Total input paths to process : 216:44:01 INFO mapred.JobClient: Running job: job_201510112103_000116:44:08 INFO mapred.JobClient: map 0% reduce 0%16:44:18 INFO mapred.JobClient: map 40% reduce 10%16:44:27 INFO mapred.JobClient: map 60% reduce 20%16:44:34 INFO mapred.JobClient: map 80% reduce 30%16:44:40 INFO mapred.JobClient: map 100% reduce 70%16:44:44 INFO mapred.JobClient: map 100% reduce 100%16:44:46 INFO mapred.JobClient: Job complete: job_201412332103_000116:44:46 INFO mapred.JobClient: Counters: 1716:44:46 INFO mapred.JobClient: Job Counters16:44:46 INFO mapred.JobClient: Launched reduce tasks=416:44:46 INFO mapred.JobClient: Launched map tasks=416:44:46 INFO mapred.JobClient: Data-local map tasks=4…16:44:47 INFO mapred.JobClient: FileSystemCounters16:44:47 INFO mapred.JobClient: FILE_BYTES_READ=89412000016:44:47 INFO mapred.JobClient: HDFS_BYTES_READ=37206000016:44:47 INFO mapred.JobClient: FILE_BYTES_WRITTEN=37390000016:44:47 INFO mapred.JobClient: HDFS_BYTES_WRITTEN=164756000016:44:47 INFO mapred.JobClient: Map-Reduce Framework…16:44:47 INFO mapred.JobClient: Map input records=150124…16:44:47 INFO mapred.JobClient: Reduce output records=9123516:44:47 INFO mapred.JobClient: Spilled Records=1803… 日志中表明存在1803项Records在排序阶段、Reduer阶段运行前溢出至磁盘. 以下两项配置, 与数据溢出相关: io.sort.mb(Hadoop 2.X系列为mapreduce.task.io.sort.mb): 排序时分配的Buffer大小 io.sort.spill.percent(Hadoop 2.X系列为mapreduce.task.io.sort.spill.percent): 当达到一定比例(默认75%)Buffer大小时发生溢出 如果JVM 内存参数设置够大、合理, 可以有效避免或较少数据溢出, 从而提升Cascading或MapReduce任务执行效率. 尽可能使用压缩. 对数据进行压缩, 可大大较少磁盘存储开销及I/O开销, 当然缺点在于增加了CPU计算开销. 如果Hadoop生产集群CPU计算能力强(适用于计算密集型作业), 采用数据压缩带来的这点CPU开销可以忽略. 由于Hadoop将数据Split至Data Blocks中, 建议使用可以切割(Splittable, 可并行读取)的数据压缩格式, 如bzip2、LZO等, 提高性能. 如果采用不可分割的数据压缩格式, 该数据将作为一个整体从头到尾读取, Hadoop将整块数据提交至Mapper或Reducer处理, 运行效率低. 选择合适的数据存储格式. 通常你会选择使用文本格式(如CSV、TSV、JSON等)对数据进行存储, 但文本格式数据比较耗存储, 相对于Avro、Protobuf、Thrift、SequenceFile、ORC、Parquet等Binary格式数据读写效率低. 这些Binary格式数据, 可以快速而高效地进行序列化和反序列化, 请结合具体业务逻辑选取合适的数据存储格式. 适当增加副本数量(或提高复制因子). 假如某些业务场景数据非常重要, 为保证高可用, 可能保存多份数据副本: 12$ # 假如集群中存在20个DataNode, 以下指令能保证每个节点下具有一份/data/ecomm/crucialdata数据副本$ hadoop fs -setrep -R -w 20 /data/ecomm/crucialdata JVM复用. Hadoop每次运行一Mapper或Reducer时, 将开启一JVM进程. 这些JVM实例存在初始化开销, 可通过以下设置减少JVM初始化时间(重置JVM而非结束或重启)、多次复用JVM: &lt;property&gt; &lt;!-- Hadoop 2.X系列对应配置参数为 mapreduce.job.jvm.numtasks --&gt; &lt;name&gt;mapred.job.reuse.jvm.num.tasks&lt;/name&gt; &lt;value&gt;-1&lt;/value&gt; &lt;/property&gt; 适当增加内存. 对于一些比较耗时的聚合计算(如AggregateBy等), 可以考虑适当增加Buffer大小; 对于一些常见的In-Memory Join, 也可适当增加内存, 提高执行效率. 利用监测与调优工具. 如Concurrent Driven产品, 有助于对Cascading和Hadoop任务进行诊断检测以及性能调优.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云中漫步, 邂逅Apache Phoenix]]></title>
    <url>%2Fbigdata%2Fhbase%2Fphoenix-intro%2F</url>
    <content type="text"><![CDATA[Apache Phoenix由Salesforce.com开源, 于2014年5月成为Apache顶级项目, Phoenix最初作为Salesforce内部项目主要为HBase等大数据组件提供支持易用性、High Level级别的SQL支持. Apache Phoenix充分利用HBase作为存储数据库, 支持低延迟OLTP处理分析, 便于与Hadoop其它生态组件集成, 如Hive、Pig、Spark、Flume等. Apache Phoenix支持标准SQL及JDBC API, 支持完整ACID(原子性、一致性、隔离性及持续性)语义, 也兼容如Schema读取、延迟绑定等NoSQL数据库特性. SQL ON HBASE Apache Phoenix架构示意图如下, Phoenix提供C/S服务, 服务端使用自定义HBase协处理器处理索引、Join、事务、Schema及元数据管理, 服务端拥有自定义Observer和Endpoint协处理器支持这些特性; 客户端拥有解释器、关系型代数及查询计划组件用于解析给定SQL语句并基于代价(Cost-based)优化模型选择最佳优化计划, 然后执行并内部转化为SCAN、PUT、DELETE等HBase操作. 其中服务端返回的数据结果被映射为Java中的ResultSets. Apache Phoenix与HBase通信示意图如下: Apache Phoenix与其它SQL on Hadoop组件比较如下: Phoenix主要特点 支持事务 Apache Phoenix支持事务, 支持所有事务级别的ACID语义. 通过Apache Tephra支持HBase行级别事务语义, Tephra通过多版本并发控制实现提供并发事务间快照隔离. 支持二级索引 二级索引不同于主索引, 其值可能存在冗余, 通常对访问频繁、主索引排序困难的大表建二级索引. HBase不支持二级索引, 行键有序、其访问模式也是基于行键, Phoenix支持二级索引, 可以大大提高数据检索效率, 减少对HBase表全局扫描. 支持自定义函数(UDF) Phoenix支持自定义函数(UDF), 自定义函数可以是临时函数也可以是持久化函数, 自定义临时函数适应于特定用户连接、对于其它用户连接不可访问; 自定义持久化函数对应元数据信息存储于系统表中(如SYSTEM.FUNCTION等); Phoenix也支持租户特定函数, 此类函数存在于特定租户会话或连接中, 其它租户不可访问. 支持视图 Phoenix支持标注SQL中视图语法, 视图支持这一特征对于HBase表很关键, 可以通过视图方式创建多张虚拟表复用底层同一张物理表数据. 多租户 Apache Phoenix支持多租户场景, 可以通过特定租户配置属性创建表, 该特定租户在连接时注入租户ID, 建立连接后便可访问租户数据. 虽然租户可以看到普通表中所有数据, 但只能看到多租户表中自身表数据. Query Server Phoenix Query Server支持其它Java客户端, 通过自带的独立Server暴露一Thin Client, Thin Client通过使用JSON与Phoenix查询服务器(Phoenix Query Server, 简称PQS)交互, PQS作为一HTTP服务支持JSON和Protocol Buffer, PQS默认使用Protocol Buffer(比JSON使用更加高效), Thin Client底层由Apache Calcite’s Avatica组件实现. Skip Scan Skip Scan通过使用组合多列索引查找唯一值, Skip Scan适用于Range查询或基于给定一系列Key值全局扫描, Skip Scan充分利用HBase过滤器中的SEEK_NEXT_USING_HINT枚举, 基于过滤器给定提示(Hint)指定下一个需要Seek的键, 并存储每列中需要查找的一系列Key值详细信息, 每次传入一Key, 会判断是否在组合中, 若不在, 继续迭代下一Key值. 支持数据类型Phoenix提供一系列数据类型, 支持原始类型和复杂类型, 每种数据类型内部映射成Java或SQL对应类型, 对于数值类型和时间类型的Unsigned(无符号)版本仅支持正值. 有时候需要考虑无符号时间类型数据, 如数据值被org.apache.hadoop.hbase.utils.Bytes序列化时. Phoenix数据类型映射关系如下: Data Type Java Mapping 备注 TINYINT java.lang.Byte SMALLINT java.lang.Short INTEGER java.lang.Integer BIGINT java.lang.BigInteger FLOAT java.lang.Float DOUBLE java.lang.Double BOOLEAN java.lang.Boolean True/False, 内部映射成0/1 DECIMAL java.math.BigDecimal 可以指定精度并拓展 VARCHAR java.lang.String 可变长度, 内部映射成UTF-8 CHAR java.lang.String 固定长度, 内部映射成UTF-8 BINARY byte[] 固定长度字节数组 VARBINARY byte[] 可变长度字节数组 TIME java.sql.Time 默认格式 yyyy-MM-dd hh:mm:ss, 内部表示为基于GMT的Epoch(单位为ms) ARRAY java.sql.Array 除了VARBINARY其它原始类型均可声明为单纬数组 原始数据类型HBase中所有数据均被存储为Bytes, 与HBase相反, Phoenix提供了一自定义DataType映射为java.sql.Types中定义的不同类型. 每种数据类型均有编码器和解码器在Raw Bytes和Java原始类型间转化, Phoenix支持的原始数据类型有: boolean、char、varchar、decimal、int、short、long、float、double、date等时间类型. 对于每种数值类型均有对应的Unsigned(无符号)版本处理原始类型值. 复杂数据类型与其它NoSQL数据库支持复杂数据类型如结构体Struct、Array、Map等不同, Phoenix目前仅支持Array类型. CRUDApache Phoenix中每张数据表至少包含一个列族, Phoenix作为HBase的SQL层引擎, 和多数列式数据库一样, 在数据建模方面需注意”Query First”, 基于查询访问模式梳理Schema. 在建表时注意反模式的运用, 因为如果和关系型数据库一样正常建表、表间Join开销大. 当Apache Phoenix执行UPSERT语句(UPDATE/INSERT, 与Cassandra中UPSERT语句类似), Phoenix解析对应SQL语句并转化为HBase Put操作, 当Region Server接收到请求后, 首先写入预写日志(WAL)及Memstore(写入预读写日志为保证数据持续性), 只有数据写入WAL和Memstore后才视为写入完成. 当Phoenix执行SELECT语句时, 首先通过解析器解析, 然后准备一系列查询计划并综合多种考虑因素(如表索引、代价模型等)从中选出最优计划, 由一系列HBase Scan操作物化, 通过线程池ExecutorService并行执行, 最终在客户端聚合结果. 命令行CRUD可以通过安装包中的sqlline.py脚本启动Apache Phoenix命令行终端, 如下: 1$ python sqlline.py PHOENIX-N1:2181:/hbase Phoenix CRUD操作, 示例如下, 注意user表中, id为主键, 列first_name和last_name被映射为列族d中列, 如果没有指定列族, 数据列内部默认映射为列族0中列, 建表时可以通过定义DDL属性 DEFAULT_COLUMN_FAMILY=your_column_family_name 覆写默认列族. 12345678910111213141516171819-- CREATEjdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; CREATE TABLE user( id INTEGER NOT NULL PRIMARY KEY, d.first_name VARCHAR, d.last_name VARCHAR);-- UPSERT, 以下SQL将转化成HBase Put操作jdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; UPSERT INTO user VALUES(1, 'Emma', 'Roberts');jdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; UPSERT INTO user VALUES(2, 'Bella', 'Thorne');-- DELETEjdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; DELETE FROM user WHERE id=2;-- ALTERjdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; ALTER TABLE user ADD salary DECIMAL;-- SELECTjdbc:phoenix:PHOENIX-N1:2181:/hbase&gt; SELECT * FROM user; Java代码CRUDApache Phoenix, Java代码CRUD参考如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class PhoenixJdbc &#123; public static void main(String[] args) &#123; Connection connection = null; Statement statement = null; ResultSet rs = null; PreparedStatement ps = null; try &#123; Class.forName("org.apache.phoenix.jdbc.PhoenixDriver"); connection = DriverManager.getConnection("jdbc:phoenix:PHOENIX-N1:2181:/hbase"); System.out.println("Connection established...."); statement = connection.createStatement(); statement.executeUpdate( "create table user (id INTEGER NOT NULL PRIMARY KEY, d.first_name VARCHAR,d.last_name VARCHAR)"); statement.executeUpdate("upsert into user values (1,'Emma','Roberts')"); statement.executeUpdate("upsert into user values (2,'Bella','Thorne')"); connection.commit(); ps = connection.prepareStatement("select * from user"); rs = ps.executeQuery(); System.out.println("Table Values"); while (rs.next()) &#123; Integer id = rs.getInt(1); String name = rs.getString(2); System.out.println("\tRow: " + id + " = " + name); &#125; &#125; catch (SQLException | ClassNotFoundException e) &#123; e.printStackTrace(); &#125; finally &#123; if (ps != null) &#123; try &#123; ps.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; if (rs != null) &#123; try &#123; rs.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Phoenix</tag>
        <tag>Apache HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之基本概念篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fbasic%2F</url>
    <content type="text"><![CDATA[本文将介绍Cascading基本概念. Data FlowCascading数据处理模型基于Data Stream与数据操作(如过滤、聚合、断言、函数处理等), Cascading API允许开发者组装管道子组件(SubAssembly, 如Stream分割、分组、合并及Join等)定义数据处理流(Data Flow). 下面以酿酒流程为例, 处理流程示意如下, 首先对酿造原料进行发酵, 对发酵酒精进行过滤, 经过多道工艺(如增加调料、改进口感等)处理, 最后得到醇香可口的佳酿. 对应Cascading代码, 参考如下: 1234567891011121314151617Scheme liquidFlowScheme = new TextDelimited(new Fields("liquid"), true, ",");String sourceContainerLocation = "The Path To Source Container";Tap sourceContainer = new FileTap(liquidFlowScheme, sourceContainerLocation);Scheme drinkScheme = new TextDelimited(new Fields("drink"), true, ",");String sinkContainerLocation = "The Path To Sink Container";Tap sinkContainer = new FileTap(drinkScheme, sinkContainerLocation);Pipe pipe = new Each(pipe, new Filter());Pipe topPipe = new Each(pipe, new AddFlaver1());Pipe midPipe1 = new Each(pipe, new AddFlaver2());Pipe midPipe2 = new Each(pipe, new AddFlaver3());Pipe bottomPipe = new Each(pipe, new AddFlaver4());Pipe outPipe = new Merge(topPipe, midPipe1, midPipe2, bottomPipe);Flow flow = new LocalFlowConnector().connect(sourceContainer, sinkContainer, outPipe);flow.complete(); Cascading本身利用高级API模拟待处理的Data Flow, 无需过多暴露底层处理复杂性(如MapReduce实现等). 在详细介绍Cascading前, 需了解以下几个概念: Tuple, 元组, 即Data Record, Cascading将所有待处理数据视为元组, 与MapReduce、Spark中RDD(当然有些特殊的RDD除外, RDD本身的KV键值对通常以元组形式出现)数据处理类似 Pipe, 执行数据操作的数据流, 通常这些数据操作包括如数据过滤、聚合、转换、计算及汇总等 Pipe Assembly, 管道子组件, 常用于连接管道分支 Tap, Data Source(数据源)或Data Sink(通常指结果数据持久化的地方, 可以是文件系统, 也可为数据库), Taps须与管道子组件绑定, 如Data Source Tap常作为管道输入数据, Data Sink Tap作为管道结果输出数据 Flow, 包含Tap与管道子组件的系统, 通常多项数据集于Flow中计算、转换并输出 Cascade, 一系列Flow, 如果某项Flow依赖其它Flow输出, 该Flow并不会立即执行, 需待条件满足后执行 Record抽象本节将介绍Cascading中Record相关抽象, 即Cascading处理数据流基本数据结构与Schema. Tuple元组, 本身比较常见, 可以通过偏移(即下标)和名称(如Named Tuple)进行访问, 元组本身可以允许不同数据类型. 元组有些类似于数据库中Record概念, 如每列可以基于序数位置访问. 由于Java语言本身并不支持元组(Scala与Python等语言对元组支持已嵌入语言级别), 需要通过对象封装或以类的形式实现, Cascading中元组常见方法参考如下: 1234567891011121314// 如创建一元组result, 该元组对象Size为3// Tuple result = Tuple.size(3)public static Tuple size(int size);// 通过下标位置访问元组中元素// 如 tuple.getObject(0) 访问元组中第一项Field(对应Record中第一列)public Object getObject(int pos);// 基于下标访问元组中元素public boolean getBoolean(int pos);public String getString(int pos);public float getFloat(int pos);public double getDouble(int pos);public int getInteger(int pos); Fields可以通过Fields访问元组中元素, Fields存储了Field元数据(如名称、类型、类型变换、比较器等), Fields代表了元组中成员名或充当元组的Selector引用元组中元素值. 一Fields实例可能包含了一系列Field名与位置(元组下标)信息, Field值也可为Comparable以便进行排序. 实例化Fields比较简单, 代码参考如下: 1Fields fields = new Fields("id", "ssn", "gender", "name"); Fields可充当元组元数据, 便于控制和Map待处理数据. Fields既可充当声明器也可充当选择器, 声明器声明特定类型或特定值Field, 选择器用于选取元组中给定引用Field. Cascading中存在一Field Sets概念, 用于控制元组传入或处理, 参考如下: cascading.tuple.Fields.ALL, 代表当前所有可用的Field cascading.tuple.Fields.UNKNOWN, 声明Field时并不知晓Field名称或数量, 是用于处理任意长度元组中Field声明 cascading.tuple.Fields.ARGS, 适用于Fields作为输入参数执行某些Operation cascading.tuple.Fields.RESULT, 适用于Fields作为某些Operation输出结果而选用时 cascading.tuple.Fields.GROUP, 适用于对Fields进行分组(如进行GroupBy)时 Feilds也支持类型转换, 如将字符串类型的timestamp字段转换成Long类型, 代码参考如下: 12345// Cascading通过`cascading.tuple.coerce.Coerce`进行类型转换pipe = new Coerce(new Fields("timestamp"), Long.class);// 或者也可通过Field声明时指定类型, 如下Fields field = new Fields("id", Long.class); TupleEntryTupleEntry适用于需要将Field元数据封装至元组中. 当TupleEntry创建后其Fields不可变更, 但其Tuple实例可以修改或替换, 元组中元素不可增加或移除(原因在于TupleEntry内部存储了一Map&lt;String, Integer&gt;, 该Map与Fields实例相关). TupleEntry允许通过Field名访问元组, TupleEntry中Fields形成元组的元数据(如定义了列名及数据类型等)并充当元组的Selector. TupleEntry使用, 参考代码如下: 123Fields selector = new Fields("id", "ssn");Tuple tuple = Tuple.size(2);TupleEntry tupleEntry = new TupleEntry(selector, tuple); SchemeScheme不仅可用于读取数据, 也可用于解析和转换数据, 换句话说, Scheme适用于Data Source和Data Sink数据定义. Cascading中存在以下几种预定义Scheme: TextLine, 可按行分割(换行符通常为CR, CR LF, NL) TextDelimited, 文本可按分割符分割, 如CSV或TSV文件, 可跳过Header, SequnceFile, Hadoop SequnceFile, binary形式KV键值对 NullScheme, 当需要Scheme时充当占位符, 需要时可作为Scheme参数 Cascading中较为常见的Scheme有TextLine, TextLine存在以下构造器: 123456// 如果`sourceFields`仅有一项Field, 仅返回随后元组的文本行public TextLine(Fields sourceFields) &#123; /* 构造器实现略 */&#125;;public TextLine(Fields sourceFields, Fields sinkFields) &#123; /* 构造器实现略 */&#125;;// `charsetName`, 字符集, 支持字符集为: UTF-8、UTF-16BE、UTF-16LE、UTF-16、ISO-8859-1、US-ASCII等public TextLine(Fields sourceFields, Fields sinkFields, String charsetName) &#123; /* 构造器实现略 */&#125;; TextDelimited, 对应Scheme可按分隔符分割, 如CSV或TSV等, 这些Scheme也支持跳过Header, TextDelimited类为TextLine子类. TextDelimited默认并不会写入Header, 如果构造器中指定hasHeader为true, skipHeader与writeHeader也将设置为true. TextDelimited也支持写入Header至文件中, Header中Field名称直接取自Field声明, 如果Fields声明为Fields.ALL或Fields.UNKNOWN, 将直接使用Field声明中Field名作为Header中Field名称. TextDelimited构造器, 参考如下: 12345678public TextDelimited(boolean hasHeader, String delimiter) &#123; /* 构造器实现略 */&#125;;public TextDelimited(boolean hasHeader, String delimiter, String quote) &#123; /* 构造器实现略 */&#125;;public TextDelimited(Fields fields) &#123; /* 构造器实现略 */&#125;;public TextDelimited(Fields fields, boolean skipHeader, boolean writeHeader, String delimiter) &#123; /* 构造器实现略 */&#125;;public TextDelimited(Fields fields, boolean skipHeader, boolean writeHeader, String delimiter, String quote) &#123; /* 构造器实现略 */&#125;; TextDelimited使用, 示例代码如下: 12345// 没有Header, 默认按TAB分割Scheme scheme = new TextDelimited();// 有Header, 按逗号分割(即CSV文件)Scheme scheme = new TextDelimited(true, ","); SequenceFile, Hadoop序列化文件, 包含Binary形式KV键值对, 可进行高效读写. SequenceFile构造器, 参考如下: 1public SequenceFile(Fields fields) &#123; /* 构造器实现略 */ &#125;; WritableSequenceFile为SequenceFile子类, 可用于读写Hadoop Writable对象, 写时将KV键值对序列化至Sequence File, 读时KV键值对封装至Cascading元组并传入管道子组件(Pipe SubAssembly)中. WritableSequenceFile构造器, 参考如下: 123456public WritableSequenceFile(Fields fields, Class&lt;? extends Writable&gt; valueType) &#123; /* 构造器实现略 */ &#125;;public WritableSequenceFile(Fields fields, Class&lt;? extends Writable&gt; keyType, Class&lt;? extends Writable&gt; valueType) &#123; /* 构造器实现略 */ &#125;; WritableSequenceFile使用, 示例代码如下: 12345Tap tapValue = new Hfs(new WritableSequenceFile( new Fields("sink_text"), Text.class), getOutputPath("value"), SinkMode.REPLACE); 元组也可通过Scheme描述, Scheme包含了Field定义, 如People的Scheme包含姓名、年龄、性别、联系方式、地址等, 代码参考如下: 1Scheme peopleScheme = new TextLine(new Fields("name", "gender", "age", "phone_number", "address")); 也可通过Fields与Types数组形式组合Scheme, 代码参考如下: 12345Fields[] pFields = new Fields[] &#123;new Fields("name"), new Fields("gender"), new Fields("age"), new Fields("phone_number"), new Fields("address")&#125;;Type[] pType = new Type[] &#123;String.class, String.class, Integer.class, Long.class, String.class&#125;;// 注意Field名与类型对应Scheme pScheme = new TextLine(new Fields(pFields, pType)); 也可通过Fluent接口形式指定Fields中某项成员类型, 如: 123456Fields pFields = new Fields("name", "gender", "age", "phone_number", "address");pFields.applyType("name", String.class) .applyType("gender", String.class) .applyType("age", Integer.class) .applyType("phone_number", Long.class) .applyType("address", String.class); 数据流控本节主要介绍Cascading数据流处理相关概念, 如Flow、Pipe、Cascade等, Cascading主要通过定义Pipe、Flow或Cascade控制整个Data Flow处理流程. Tap在管道组件(Pipe Assembly)执行前, 需与Tap进行绑定, 即Data Source与Data Sink, Tap主要用途如下: Source Tap提供数据用于下游消费 Sink Tap用于持久化数据 Tap即可充当Source也可充当Sink Cascading中存在以下几种Tap类型: Hfs, 该Tap可访问Hadoop File(文件URL通常为 hdfs:///path/to/your/data) Lfs, Hfs子类, 可访问本地文件, 这些文件通常存储于Hadoop集群中, 但可通过本地文件名访问而非HDFS名 Dfs, Hfs子类, 可访问HDFS文件, 但通常使用Hfs FileTap, 访问本地文件而非Hadoop集群文件 Tap使用, 示例代码如下: 12345Scheme sourceScheme = new TextLine(new Fields("text_field"));Scheme sinkScheme = new TextLine(new Fields("dep", "stats"));String inputPath = "Input Path Here";Tap source = new HfS(sourceScheme, inputPath);Tap sink = new Hfs(sinkScheme, SinkMode.REPLACE); 其中SinkMode可用于处理输出数据, 如防止覆写等, SinkMode存在以下几种选项: KEEP, 如果文件存在写入失败 REPLACE, 替换文件 (Hadoop模式下先删除整个路径然后重建目录并重新分配文件) UPDATE, 如果文件系统允许(Hadoop模式下不允许UPDATE, 主要在于HDFS文件为Immutable, 可追加写入但不可修改), 可复用文件 Pipe数据通过管道传输,转换和计算, Pipe可用于执行数据转换、Join、分组、合并、分割等计算, 基于数据操作, Cascading中管道可分为以下几种: Cascading中Operation类型可以粗略地分为以下几类: Filter, 对数据进行过滤 Function, 执行特定数据转换或计算方法 Aggregator, 对数据集进行聚合、汇总 Buffer, 在一定数量的数据集执行数据计算 Assertion, 断言, Assertion适用于单元组Pipe(如Each)和分组元组Pipe(如Every)等. EachEach管道常用于处理单元组, Each主要包括Filter与Function. Each示例代码参考如下: 12// 基于正则过滤inPipe = new Each(inPipe, new RegexFilter("ECOMM")); EveryEvery管道, 执行于一组元组之上(非单元组), 通常这些分组由GroupBy管道确定(GroupBy或CoGroup管道均可产生Every Pipe). 这些分组元组可以一次处理一项(Aggregator)或一次性处理所有(Buffer). Every示例代码参考如下: 123// 对分组元组进行计数inPipe = new GroupBy(inPipe, new Fields("group"));inPipe = new Every(inPipe, Fields.ALL, new Count(new Fields("TotalRecords")), Fields.ALL); 分组与排序GroupBy常用于分组, 也可用于二级排序(除非特别指定, 否则默认不会开启二级排序). 如图所示, 假定薪资数据数据源(部门,姓名,薪资,涨幅)如下所示, 需以部门分组, 薪资排序, 代码参考如下: 123456Pipe payroll = new Each("payroll", new Fields("division", "name", "salary", "raise"), new Identity());Fields groupFields = new Fields("division");Fields sortFields = new Fields("salary");Pipe assembly = new GroupBy(payroll, groupFields, sortFields); Join与MergeMerge可用于Pipe合并, 如图所示, 人力资源数据处理中存在两Pipe, 其中一Pipe负责读取库内现有数据(暂未更新), 另一Pipe读取更新后的数据, 现在需要合并两Pipe, 代码参考如下: 12345678Pipe lhs = new Each("hrdata", new Fields("name", "address", "phone"), new Identity());Pipe rhs = new Each("hrdata_update", new Fields("name", "address", "phone"), new Identity());// Merge PipePipe merge = new Merge(lhs, rhs); Cascading中Join Pipe包括CoGroup与HashJoin. CoGroup对输入元组按照给定Key(可能为一项也可能为多项)分组, 然后按照分组Key执行Join或聚合, 有些类似于SQL中JOIN. 接着以上面的人力资源数据与薪资为例, 以Name字段作为连接键进行Join, 示意图如下: 代码参考如下: 1234567891011Pipe lhs = new Each("hrdata", new Fields("name", "address", "phone"), new Identity());Pipe rhs = new Each("payroll", new Fields("name", "division", "salary"), new Identity());Fields joinKey = New Fields("name");// 需对薪资数据中Name字段重命名, 否则会造成冲突导致程序报错无法运行Fields resultFields = new Fields("name", "address", "phone", "name2", "division", "salary");Pipe join = new CoGroup(lhs, joinKey, rhs, joinKey, resultFields); HashJooin作为一高度优化的Join, 将右边Stream加载至内存(如果满足条件, 性能比CoGroup要好, 原因在于如果整项数据集能加载至内存, HashJoin将变成Map端Join), 如果该Stream数据量过大可能会溢出部分数据至磁盘并产生内存错误. 同样以上面的数据为例, 假如薪资数据集可以加载至内存, 此时可以考虑使用HashJoin, 示意图如下: 代码参考如下: 123456789101112131415161718Pipe lhs = new Each("hrdata", new Fields("name", "address", "phone"), new Identity());Pipe rhs = new Each("payroll", new Fields("name", "division", "salary"), new Identity());Fields joinKey = New Fields("name");Fields resultFields = new Fields("name", "address", "phone", "name2", "division", "salary");Pipe join = new HashJoin(lhs, joinKey, lhs, joinKey, resultFields);// 也可设置Spill参数SpillableProps props = SpillableProps.spillableProps() .setCompressSpill(true) .setMapSpillThreshold(50 * 1000);props.setProperties(join.getConfigDef(), ConfigDef.Mode.REPLACE); Flow将一项或多项管道组件与Taps进行绑定, 可构成一Flow, Flow可编译为一项或多项MapReduce任务(或Tez、Apache Flink Task, 取决于后端计算引擎). Flow可视为执行于Pipe元组数据流的一系列数据操作(执行用户定义的数据处理流程). 一Flow可有多项输入输出, 每项Tap也可接收或产生一系列元组. Flow也可用于创建执行图(Execution Graph), Execution Graph通常为一系列处理器(Processor, 即与Operations绑定的管道Pipe)和连接组合, 代表着数据传输和转发流, Exection Graph通常为有向无环图(DAG, Directed Acyclic Graph), 即两个Pipe间数据流为单向(不可形成环), 整个Graph也不可形成环, 示意图如下: FlowConnectorFlowConnector将Cascading执行图(Execution Graph)转化为可执行的Job, Cascading中主要存在以下几种类型的FlowConnector: LocalFlowConnector HadoopFlowConnector Hadoop2TezFlowConnector FlowConnector使用, 示例代码如下: 12345FlowConnector flowConnector = new FlowConnector();FlowDef flowDef = FlowDef.flowDef() .addSource(inPipe, srcTap) .addTailSink(inPipe, sinkTap)flowConnector.connect(flowDef).complete(); FlowConnector使用特定的FlowPlanner构建执行图(Execution Graph), 该FlowPlanner可用于向底层运行框架如Hadoop或Tez等发出请求并执行Flow. Flow可复用代码, 也可与现有的MapReduce任务进行交互, 如封装已运行的MapReduce任务于Flow中, 构建复杂的Data Flow, 编写端到端的数据应用等. CascadeCascading中一Cascade可连接一系列Flow, 允许多项Flow作为一逻辑单元执行. 当单个Flow变得过大时, 可以考虑拆分为多项Flow, 以便提高代码可读性与模块化, 这些拆分的Flow可以通过Cascade进行连接. 一项简单的Cascade示意图如下: 参考代码如下: 12345678// flowOne与flowTwo具体实现略, // 其中flowOne输出为flowTwo输入Flow flowOne = ...Flow flowTwo = ...Cascade cascade = new CascadeConnector() .connect(flowOne, flowTwo);cascade.complete();]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Engine大作战 -- Apache Drill之基本概念篇]]></title>
    <url>%2Fbigdata%2Fdrill%2Fintro%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Drill相关概念, 如Drill基本组成, 架构等. Apache Drill, 作为一低时延查询引擎, 非常适合交互式查询, 支持集成BI工具如Tableau等. 大数据生态组件中, Apache Impala, Hive LLAP以及Presto也适合交互式查询, 运行效率远超Hive/Pig, 尽管Impala很快, 但由于Impala采用C++开发, 部署和构建, 相对于其它组件, 并非易事. Drill支持多种文件格式, 采用Java开发, 适合广大Java开发人员, 与其它查询引擎不同, Apache Drill不仅可以读取HDFS上数据, 还可以读取其它存储系统文件, 如Amazon S3, Kafka, MapR-FS等. Apache Drill与Impala, Presto组件不同之处在于, Drill在查询数据前, 并不要求开发人员定义元数据. 尽管Drill也可使用Hive元数据, 但Drill可直接查询数据文件, 无需指定元数据, 等待元数据刷新. 查询非存储需要注意的是Drill并非数据库, Drill作为一低延时查询引擎, 本身并不提供存储服务. Drill支持多种外部存储系统, 如HDFS, Amazon S3, MapR-FS等, 并不限制用户存储选型(如非得使用HDFS作为数据源等). Drill视数据文件为Table, 由于文件是顺序化扫描, 因而Drill不支持索引, 不存在CREATE INDEX子句, 与多数大数据查询引擎类似, 通常这些查询引擎使用分区代替索引, 以便快速地对数据进行定位查找. 由于HDFS中新增文件是Immutable类型(仅追加写入, UPDATE之类的更新较少), Drill并不支持INSERT, UPDATE, DELETE等操作. 每项文件均有自身的Schema, Drill也称Shema-Free或Schema-On-Read式查询引擎, Drill没有创建表、列或索引Schema的DDL(数据定义语言, Data Definition Language). 结合以上几点, Apache Drill仅为一大数据查询引擎, 适合对多种异构数据, 不同存储系统数据进行查询, 不适合存储也不提供存储. Drill拓扑术语Apache Drill相关拓扑(或Data Flow)术语对应速查表如下: Drill 对应MapReduce 对应Spark Query Job Job Major Fragment Map 或 Reduce Stage Minor Fragment Mapper, Reducer Stage Operator N/A Task Exchange Shuffle Shuffle Drill架构Drill主要包含以下四个组件: Drill客户端, Drill客户端连接Foreman, 提交SQL语句, 并接收Query最终执行结果 Foreman, Drill Server, 用于维护用户会话状态, 处理查询. Drill客户端连上Drill后, 会随机连接一个Drillbit作为Foreman Worker Drillbit, 实际执行Query组件 Zookeeper Server, 对Drill集群中的Drillbit进行协调 如上图所示, Drill运行于数据节点, Drill通过HDFS客户端API从HDFS上读取数据, 由于Drillbit与数据位于同一节点, 读为本地读(同一节点同一Rack), Drill使用Zookeeper进行协同, 每项Drillbit向Zookeeper进行注册, 以便被其它Drillbit以及Drill客户端发现. Drill也可通过Zookeeper进行配置(如存储及数据格式配置等)以及准入控制等. 可以通过Drill客户端(如JDBC/ODBC接口, 命令行等)或BI工具(如Tableau), 连接Drill, 客户端通过连接Zookeeper获取Drillbit运行状况, 然后随机连接一个Drillbit(即Foreman), 执行对应Query. 小结下Drill执行Query的处理流程: 首先, 通过Drill客户端连接Drill集群(不同数据节点的Drillbit通过Zookeeper协同), 然后通过Zookeeper定位Drillbit, 随机连上一个Drillbit充当Foreman, 通过Foreman解析SQL, 然后分发Work至其他Woker Drillbit (等效于MapReduce中Map阶段) Drillbit从文件系统读取数据, 执行Query处理, 处理完后发送结果至Foreman, Foreman进行结果归并 (等效于MapReduce中Reduce阶段) Foreman返回结果至Drill客户端 低时延特性Apache Drill作为一低时延的查询引擎, 主要存在以下三种机制减少时延. 代码生成通常, 多数大数据组件如Spark或Hadoop会分发应用代码至各节点运行, 如MapReduce分发应用代码至每项Mapper或Reducer, 而Spark中每项应用拥有独立的一组Executor执行Task. Apache Drill并不会进行代码分发, 主要原因有以下几点: Drill使用功SQL作为输入语言, 避免了执行特定应用代码 每次进行查询时, Drill在每项Drillbit上生成Java代码并运行, 单个Drillbit可处理一定数量的查询 Drill将SQL语句转换成物理执行计划, 发送至Drillbit, 为获取最佳性能, 每项Operator将自身对应物理计划转换成Java代码, 然后进行批量数据处理计算. 本地代码生成, 不仅避免了复杂的代码分发, 也是基于Drill Schema读取的一种方式. Drill 代码生成主要用于过滤, 聚合, Join及其它计算. 只用当Operator观测到第一个Batch数据时, 才能知晓每列的数据类型, 只有知道了列的数据类型, 才可以判断是否执行整型还是浮点型数值计算. 不同的Scan操作可能会观测到不同版本的文件Schema, 因为每项Fragment可能会有不同的Schema及生成代码. Apache Drill并不能提前进行代码生成, 同一代码并非适用于所有Fragment. Long-Lived DrillbitMapReduce与Hive拓展性不错, 但批量计算耗时长, 除了与MapReduce Shuffle写磁盘有关外, 还有一点: YARN资源分配问题, YARN需为每一项Mapper以及Reducer开启一新的Process, 处理完后再销毁, 对于流水线式的数据批处理任务而言, 无疑增加了启动开销及其它系统资源消耗. Spark执行效率高, 一方面是基于内存计算, 另一方面在于每项Spark应用会复用同一组Executor, 减少了JVM启动开销. Apache Drill做法与Impala以及Hive LLAP(Live Long AND Process)有些类似, Impala通过使用Impalad进程, 长时间保活, 避免了频繁的销毁与创建, 执行效率高. 通常, Apache Drill每个节点分配一Executor(即Drillbit), 由于Drillbit是长时间运行, 当Drillbit接收到数据便可立即执行. 当然, 这种方式也带来了一个缺点: 缺乏资源隔离, 比如执行一Query时占用内存过多可能会导致其他Query分配不到内存, 换句话说消耗内存过多的Query可能会拖慢其它Query执行, 特别是当Apache Drill负载过重时. Apache Drill提供了准入控制功能, 可减少这种问题产生. 网络交换Apache Drill基于内存计算, 无需像MapReduce那样将临时数据写磁盘, 可直接通过网络将Drillbit上游数据发送至下游Drillbit即可. Drill Operator中用于处理数据的Buffer, 基于Netty网络层, Drill通过特定的握手机制实现Backpressure, 当下游消费端跟不上上游生产端时, 向生产端发信号要求放缓. 尽管, Apache Drill使用网络交换避免数据刷写磁盘, 但Drill有时也需写磁盘, 如执行Buffer操作符时, 比如排序, 哈希聚合, 哈希Join等, 需将其对应输入数据缓存, 如果内存放不下了, Drill会Spill部分数据写入磁盘, 虽然Spill可保持Query完整, 但Spill本身相对于内存处理慢很多. 如果Query执行慢于预期, 可能原因有以下几点:数据倾斜某些Operator, 等待输入数据, 执行条件不充分执行Buffer Operator时, 数据Spill至磁盘可以借助Apache Drill提供的Query Profile进行问题定位与排查. Query执行细节本节将探讨Drill Query执行细节, 或者说Drill Query是如何进行的. SQL 会话状态Drill作为查询引擎, 支持SQL, 通常SQL是有状态的, 每次数据库执行SQL, 均伴随着用户会话, 通过Drill客户端随机连接一Drillbit(即Foreman), 所有后续查询将于同一Drillbit提交, 以便复用会话状态. 换句话说, Foreman会话维护连接状态. 通常, Drillbit维护的状态包含: 数据库(如通过USE DATABASE语句指定DB) 或 Workspace(如通过USE WORKSPACE指定) 会话选项, 如通过UPDATE SESSION指定的会话选项 正在执行的Query状态 (Drill可并行执行多项Query) 临时表, 如通过CREATE TEMPORARY TABLE AS语句创建的临时表 用户会话状态, 伴随着连接, 连接关闭, 会话终止. 如果由于网络原因导致失去Drill连接, 重连时需要重建用户会话, 因而Drill客户端并不支持自动重连(假如Drill客户端支持自动重连, Query运行正常, 下次也可能运行失败, 如会话状态缺失导致等). 准备阶段Drill运行SQL语句, 通常包含以下两大步骤: 准备阶段, 将SQL解析, 翻译, 将抽象语法树转换成逻辑计划, 然后转换成物理执行计划 执行物理计划, 产生结果 准备阶段, 也可细分为以下几个阶段: 解析SQL语句为抽象语法树(AST)或内部解析树 对内部解析树执行语义分析, 如所选数据库名称, Schema, 表和列以及Drill定义函数等 将SQL解析树转换成逻辑计划 基于代价优化模型, 将逻辑计划转换成物理计划 将物理计划转换成执行计划, 分发Work至Woker Drillbit Drill使用Apache Calcite进行SQL解析与翻译(对应以上步骤1-4), Drill查询生命周期参考如下: 解析与语义分析解析阶段, 主要检查SQL语法, 如果存在SQL语法错误, Drill将显示一长串错误消息表明具体错误原因. 接着进行命名查找, 尽管在准备阶段, Drill已知晓数据库和表, 但Drill并不知道列名, 不知道列的数据类型(直到运行Query时才知道列的数据类型), 因而Drill仅在运行时才能发现类型错误. 此时, Drill会接受所有列名, 即使表中不存在的列名. 主要原因在于准备阶段, Drill并不知晓这一系类可用的列, 表也只是一系列数据文件, 甚至存在新版文件包含请求列, 而老版文件不存在情形. Drill作为一Schema-On-Read引擎, 能解决基于元数据系统(如Hive等)并不能解决的问题. 逻辑计划与物理计划Drill使用Apache Calcite进行SQL解析, 翻译并转换成逻辑计划, 如Drill判定用户进行表间Join, 在下一步执行物理计划时, 基于开销模型(或代价模型,Cost-Based), 选取开销最小的Join操作符执行Join. 通过Drill Web Console可查看每项Query Profile, Query Profile包含了Query逻辑计划与物理计划的可视化信息. 查询计划, 基本上可视为基于Major Fragment分组的一些列操作符, 这些操作符包括如: 扫描文件, 过滤, 执行Join等. 通常, 这些操作符也可组合成管道(Pipeline). 由于Drill是分布式的, 数据有时需要在不同的Drillbit间交换(对应MapReduce或Spark中Shuffle), 比如执行GROUP BY时, 从所有扫描操作符收集数据行, 然后发送至Drillbit进行分组聚合. 无需交换的一系列操作符, 也称Major Fragment, 在Drill Web Console中, 同一Fragment的操作符使用相同颜色标明. 每个Major Fragment开启一扫描或交换接收器, 以交换发送器或发送至Drill客户端结束. 这些操作符构成了一解析树, 根节点为Screen Operator(与Drill客户端对话), 叶节点为读取数据的Scan Operator. 数据从叶节点流至临时节点, 并最终将结果流转至根节点(Screen Operator). 从内部节点角度来看, 数据源也称上游, 目标数据也称下游, Drill Web Console中上游朝下, 下游朝上. 分发基于物理计划分发Work至Woker Drillbit, 由于每项Major Fragment单线程执行, Drill基于Major Fragment分发, 比如扫描文件时, Drill将Fragment切分为Slice, 如扫描文件夹时每一输入文件对应一Slice或对应每项文件的HDFS Block, 最终结果为一系列Slice(也称Minor Fragment), 作为Drill运行的最小工作单元. Drill分发这些Minor Fragment至Worker Drillbit执行, 这些Fragment可并行处理, Drill基于哈希键(用于Join或分组)对数据进行分组. Drill单独切分每项Major Fragment, 如果Query越复杂, 比如有10个Major Fragment, Drill将利用系统70%的内核进行并行处理, 由于每项Query可并行处理, 特殊情况Drill将创建更多的线程(可能超过系统允许创建最大线程数), 有可能导致应用崩溃. 可以通过启用Drill准入控制功能, 限制Query数量. Drill使用Zookeeper进行Drillbit协同, 假如新增一Drillbit至Drill集群, 只要新增Drillbit向Zookeeper进行注册, Drill便可使用该Drillbit执行Query. Major Fragment(对应Screen Operator)其实并不特殊, 因为最终会产生Minor Fragment, 这些Minor Fragment最终运行于Drillbit. 语句执行Drill执行完查询计划后, 开始执行, Drill中存在以下两种抉择: 返回计划给用户 (即执行EXPLAIN PLAN语句返回结果) 于Drill集群中执行计划 (通用方式) Foreman负责编排查询过程, 具体职责参考如下: 等待执行 (等待资源分配, 输入数据等) 发送Fragment至Drillbit执行 监控执行进度, 进行监测以防发生故障 追踪Fragment, 等待完成 等所有Major Fragment完成后, 关闭查询并写入Query Profile (可以通过Drill Web Console查看) Drill执行每项Query时, 使用状态机对每项Fragment进行追踪, Drill Web Console收集相关信息并展示Query状态, 当Query完成时, 最终状态将写入Query Profile. 可以通过研究整个Query的Profile信息, 以便后续进行Query优化等. 数据表征Drill以Minor Fragment形式分发Work至Drillbit, 每项Minor Fragment包含一系列Operator, 通常叶Fragment包含一项或多项扫描操作符. 现在问题来了, Drill执行Query时, 数据行如何进行处理? Drill作为一大数据查询引擎, 如果逐行进行数据处理, 十分低效. 尽管Drill也可逐行处理数据, 但Drill会对行进行分组为Record Batch, 每项Record Batch大小为几千行到65536行, Record Batch作为Shuffle交换的单位以及将结果数据返回给Drill客户端的单位. JDBC或ODBC Driver接收Record Batch, 进行遍历并返回每一行. 假定某项Query数据包含一百万行, Drill可能读取数据集并细分为20个Record Batch(假定每个Batch 5万条Record), Minor Fragment流转Record Batch于每项Operator, 当Batch到达Fragment顶部时, 将发送给下一Minor Fragment进行处理. Drill作为一列式查询引擎, 基于列存储数据, 这些基于列的数据也称值向量. 行可简单视为值向量的索引, 因而这些Record Batch也可简单视为值向量集. Drill Web Console中Query Profile通常会显示每项Operator或Fragment处理的Record Batch数量; 开发Drill拓展程序时, 需与Drill中值向量及Record Batch交互. Apache Drill后期将使用SIMD(Single Instruction Multiple Data, 单指令多数据流)技术, 加快Query执行效率, 现阶段使用SIMD主要存在以下两个问题:Drill使用SQL数据类型, 包含Null空值, 而SIMD指令并不支持Null值Drill基于SQL, SQL通常逐行处理而非列, 使用SIMD技术处理列存在难点]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Engine大作战 -- Apache Drill之用户接口篇]]></title>
    <url>%2Fbigdata%2Fdrill%2Fdbc%2F</url>
    <content type="text"><![CDATA[Apache Drill主要提供以下几种用户编程接口: JDBC ODBC REST 本文将对这几种用户接口进行说明与代码实战. RESTApache Drill提供REST用户接口, Drill的REST API支持Web Console URL, 如: 1http://hostname:8047/some-function 通过Drill REST API可以获取以下信息: Cluster (cluster.json), 获取Drillbits信息 Options (options.json), 获取系统数据类型、名称、会话选项等信息 Query (query.json), 执行查询, 可以通过POST请求执行Query Profiles (profiles.json), 获取运行Query的Profile信息 Staus (status.json), 获取Drill状态(Status) Storage (storage.json), 获取可插拔的存储配置, 允许创建、修改或删除这些存储配置, 可以通过POST请求进行变更 REST接口主要存在以下俩点限制: REST接口不适合大数据集查询 REST接口本身无状态, 不能使用USE或ALTER SESSION等指令 本节将使用Python作为Drill REST API调用的编程语言, 目前Python可通过drillpy或pydrill连接Apache Drill, 这俩Python模块均对Drill REST接口进行了封装. Drillpydrillpy与Python中DBAPI标准兼容, 可以与其它模块中数据库连接进行交互, drillpy安装指令参考如下: 1$ pip install drillpy drillpy连接Drill执行Query, 基本步骤如下: 首先创建连接(connection)对象 然后创建Cursor对象 通过在Cursor对象上调用execute()方法执行Query 通过调用fetchone(), fetchmany()或fetchall()方法获取查询结果, fetchall()及fetchmany()均返回DataFrame, fetchone()返回一Pandas Series对象 示例代码, 参考如下: 1234567891011from drillpy import connecthost = 'DRILL HOST'db = 'YOUR DB NAME'# 默认端口为 8047conn = connect(host=host, db=db, port=8047)cursor = conn.cursor()query_string = 'YOUR SQL QUERY HERE'query_result = cursor.execute(query_string)result_df = query_result.fetchall() 如果Query中含有参数, 参考代码如下: 12345# param_one与param_two参数值任意, 此处仅为示例代码param_one = 'Args One'param_two = 16 query_string = 'SELECT * FROM table_test WHERE field_one = ? AND field_two = ?'query_result = cursor.execute(query_string, (param_one, param_two)) Pydrillpydrill与Python中DBAPI标准不兼容, 该模块也对Drill REST接口进行封装, 鲁棒性更佳, 除了简单执行Query外还可访问其它Drill REST接口提供的信息. 除了执行Query, pydrill还支持以下功能: 访问Drill查询计划(Query Plan)及其它相关信息 访问Drill使用相关统计信息 激活可插拔的Drill存储并获取相关信息, 也可禁用这些可插拔的Drill存储 pydrill也可将查询结果直接转换为Pandas中的DataFrame, pydrill安装指令参考如下: 1$ pip install pydrill pydrill连接Drill执行Query, 基本步骤与drillpy有些类似: 首先创建连接对象, 可通过isActive()方法验证连接建立是否成功 执行Query 遍历查询结果或转换为DataFrame 示例代码, 参考如下: 12345678910111213from pydrill.client import pydrillhost = 'YOUR DRILL HOST'# 端口默认为 8047drill = pydrill(host=host, port=8047)# 检测是否成功建立连接, 若连接建立失败抛出异常if not drill.is_active(): raise ImproperlyConfigured('Please make sure Drill is running')query_string = 'YOUR SQL QUERY HERE'query_result = drill.query(query_string)# 将查询结果转换为 DataFramedf = query_result.to_dataframe() JDBC使用Drill JDBC接口, 需拷贝Drill JDBC Driver至Server主机, Drill默认包含了JDBC Driver(参考路径为$DRILL_HOME/jars/jdbc-driver/drill-jdbc-all-version.jar). 通常Drill的JDBC连接URL为: 12# 请将YOUR-HOST替换为Drill主机名或IP地址, 端口默认为31010jdbc:drill:drillbit=YOUR-HOST:31010 如果要连接分布式环境中Drill主机, 需给出ZooKeeper节点地址及端口, URL形式参考如下. 如果存在多个ZK节点, Drill将随机连接其中一个然后随机选取一Drillbit, 如果所选ZK节点下线或宕机了, Drill将连接其它ZK节点. 12345# 此处仅给出ZK节点及Schema配置# 除了这两项配置外, 还传入其它配置, 其它配置项略jdbc:drill:zk=zkhost1:2818, zkhost2:2181, zkhost3:2181;schema=mongdb JDBC连接URL中, 还可传入以下配置项(这些配置项值须与drill-override.conf中配置保持一致): Cluster ID, 同drill-override.conf配置中集群名, 默认为drillbits1, Port, 连接端口, 默认为31010 Schema, 可选, 连接默认可插拔存储 Tries, 连接尝试次数, 默认值为5 Directory, Drill集群ZK Root Znode, 默认为root Java程序可通过Drill JDBC连接Drill执行Query, 基本过程如下: 设置Drill JDBC Driver 通过调用DriverManager.getConnection()方法创建Connection对象 通过调用connection.createStatement()方法创建Statement对象 在Statement对象上调用executeQuery()方法执行Query 遍历查询结果, 进行后续处理 代码参考如下: 12345678910111213141516171819202122232425import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.Statement;public class DrillJDBCTest &#123; public static void main(String[] args) &#123; String conn = "jdbc:drill:drillbit=localhost:31010"; String queryString = "SELEC * FROM ecomm.some_table"; try &#123; Class.forName("org.apache.drill.jdbc.Driver"); Connection connection = DriverManager.getConnection(conn); Statement st = connection.createStatement(); ResultSet rs = st.executeQuery(queryString); // 遍历查询结果 while(rs.hasNext()) &#123; System.out.println(rs.getString(1)); &#125; &#125; catch(Exception e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; Python代码可以通过JayDeBeApi模块连接Drill并调用JDBC接口, 示例代码参考如下: 123456789101112131415161718192021import jaydebeapiimport pandas as pddriver = 'org.apache.drill.jdbc.Driver'conn_string = 'jdbc:drill:drillbit=localhost:31010'user_name = 'USER NAME'passwd = 'SOME PASSWORD'driver_path = '/path/to/drill-jdbc-all-version.jar'conn = jaydebeapi.connect(driver, conn_string, [user_name, passwd], driver_path)cursor = conn.cursor()query_string = 'SELECT * FROM ecomm.table_one LIMIT 100'cursor.execute(query_string)cursor.fetchall()# 执行Query并返回一DataFramedf = pd.read_sql(query_string, conn) ODBCApache Drill提供ODBC接口, 使用Drill ODBC接口须安装ODBC Driver, ODBC Driver安装过程可以参考Drill官方文档. Mac或Unix机上除了安装ODBC Driver外, 还需安装ODBC Driver管理器(如iODBC等). Drill ODBC Driver(即MapR ODBC Driver)安装完后, 需安装以下三项配置文件(安装完ODBC Driver后这些文件通常会拷贝至/opt/mapr/drill/Setup/ 目录下), 须拷贝这三项配置文件至用户主目录下并重命名为隐藏文件. .odbc.ini, 包含用户ODBC 数据源定义 .mapr.drillodbc.ini, 包含了Driver配置 .odbcinst.ini, 可选, ODBC Driver定义 然后需设置以下环境变量指向这些配置文件: 123export ODBCINI=~/.odbc.iniexport MAPRDRILLINI=~/.mapr.drillodbc.iniexport LD_LIBRARY_PATH=/usr/local/lib 如需连接分布式环境下Drill, 须指定以下变量: ZKQuorum, 逗号分割的ZK节点列表 ZKClusterID, Drillbit集群名, 须在drill-override.conf文件中有定义, 默认为drillbits1 Python代码可以通过pyODBC模块连接Drill并调用ODBC用户接口, 示例代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445import reimport pyodbcimport pandas as pdcnf = """Driver = /opt/mapr/drillodbc/lib/universal/libmaprdrillodbc.dylibConnectionType = DirectZKQuorum = ZKClusterID =Catalog = DRILLAuthenticationType = No AuthenticationAdvancedProperties = CastAnyToVarchar=trueHandshakeTimeout = 5QueryTimeout = 180TimestampTZDisplayTimezone = utcExcludedSchemas = sys,INFORMATION_SCHEMANumberOfPrefetchBuffers = 5HOST = localhostPORT = 31010"""cnf_lst = [re.sub(r'(\t+|\s+)=\s+', '=', i) \ for i in cnf.split('\n') if i != '']cnf = ';'.join(cnf_lst)user_id = 'USER ID'passwd = 'SOME PASSWORD'conn = pyodbc.connect(cnf, UID=user_id, PWD=passwd, autocommit=True)conn.setdecoding(pyodbc.SQL_CHAR, encoding='utf-8')conn.setdecoding(pyodbc.SQL_WCHAR, encoding='utf-8')conn.setencoding(encoding='utf-8')query_string = 'SELECT * FROM ecomm.table_one LIMIT 100'cursor = conn.cursor()cursor.execute(query_string)query_result = cursor.fetchall()n = 5# 执行Query并返回一DataFramedf = pd.read_sql(query_string)df.sample(n)]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flink学习手札之DataStream API初探]]></title>
    <url>%2Fbigdata%2Fflink%2Fdstream%2F</url>
    <content type="text"><![CDATA[Youtube上观看的Flink学习笔记, 有段时间了, 由于是边看视频边记的笔记, 逻辑有些乱, 还请见谅! 有时间再重新整理下! Data Source常见API Socket Based File Based socketTextStream(host,port) readFile(inputFormat:FileInputFormat[OUT], path:String) socketTextStream(host,port,delimiter) readFileStream(filePath:String, interval:Long, watchType: FileMonitoringFunction.WatchType) socketTextStream(host,port,delimiter,maxRetry) readFile(fileInputFormat, path, watchType, interval, pathFilter, typeInfo) FileMonitoringFunction.WatchType 说明 ONLY_NEW_FILES 仅处理新文件 PROCESS_ONLY_APPENDED 仅处理追加文件 PROCESS_WITH_APPENDED 不仅需要重新处理之前文件也需要处理追加文件 Data Sink常见API 方法 说明 writeAsText() - writeAsCsv() Row及Fields 分隔符也可指定 print()/printErr() 写入标准输出 writeUsingOutputFormat() 自定义OutputFormat,需继承OutputFomat进行序列化和反序列化 writeToSocket() 给定合理的序列化及格式化需定义SerializationSchema 物理分区 类型 示例 说明 Random Partitioning inputStream.shuffle() 随机分区 Reblancing Partitioning inputStream.rebalance() 使用round robin方式进行分发,便于处理数据倾斜 Rescaling inputStream.rescale() 仅发生于单节点,并不要求数据于网络间传输,于operations间分发数据,于数据子集上进行转换并归并 Broadcasting inputStream.broadcast() 分发数据于每个分区 Custom Partitioning inputStream.partitionCustom(partitioner, “someSkey”) inputStream.partitionCustom(partitioner, 0) //对于自定义分区器需有高效的Hash函数 时间语义 时间类型 说明 Event Time 生产设备事件触发时间,如IoT设备传感器捕获时间.这些事件事件在进入Flink前需嵌入Record中,处理时抽取出来并作为窗口衡量因素之一, EventTime可用于处理乱序事件 Ingestion Time 特定事件进入Flink时间,IngestionTime不能用于处理乱序事件,所有基于时间操作均需引用该时间戳 Processing Time 机器执行流式数据处理时间,进行事件处理时处理窗口仅考虑此时间戳.最简单的流式处理方式(并不要求处理机器与生产机器同步),在分布式环境中具有非确定性,依赖于系统流速 示例代码, 参考如下: 1234567val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment()// TimeCharacteristic.IngestionTime/ProcessingTimeenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)/** 有俩种分配Watermark和时间戳的方式: 直接源自数据源属性; 使用Timestamp Assigner * Flink支持预定义的时间戳抽取器及Watermark生成器,可参考官方文档 */env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime) 窗口类型 类型 说明 Global Windows 永不终结除非指定触发器,如果不指定Trigger,并不会触发计算 Tumbling Windows 基于特定时间创建,固定窗口不重叠,适用于给定时间窗口计算 Sliding Windows 窗口重叠,窗口固定有滑动时间参数 Session Windows 基于输入数据确定窗口范围,窗口开始时间、大小灵活,会话窗口可关闭时间配置灵活 Transformation算子如: Map/FlatMap/Filter/Reducer/Fold/Aggregations/KeyBy, 示例代码参考如下: 12345678910inputStream.map &#123;el =&gt; el * 5&#125;inputStream.flatMap &#123; str =&gt; str.split("\\W")&#125;inputStream.filter&#123; _ != 0&#125;inputStream.reduce&#123; _ + _ &#125;inputStream.fold("init")((str, el) =&gt; &#123;str +"["+ el + "]"&#125;)// sum/min/max/minBy/maxBy etc.//`max`返回Stream最大值, 而`maxBy`返回Stream拥有最大值的key; 该规则同样适用于`min`/`minBy`inputStream.sum(0)inputStream.sum("some-attribute")inputStream.keyBy("some-key") 窗口相关, 如Window/WindowAll/Window Join, 示例代码参考如下: 1234567891011//`WindowAssigner`: Tumbling windows, Sliding windows, global &amp; session windowsinputStream.keyBy(0).window(TumblingEventTimeWindows.of(Time.seconds(10)))// 不可并行, 运行于non-partitioned数据流上inputStream.windowAll(TumblingEventTimeWindows.of(Time.seconds(10)))// Window Join. 5s窗口Join俩Stream,当inputStream第一个属性值与anotherStream第二个属性值相等时inputStream.join(anotherStream) .where(0) .equalTo(1) .window(TumblingEventTimeWindows.of(Time.seconds(5))) .apply &#123;...&#125; 类集合操作相关API, 如Union/Split/Select/Project, 示例代码参考如下: 1234567891011121314inputStream.union(stream1, stream2, ...)// Split Streamval spliter = (num: Int) =&gt; (num % 2) match &#123; case 0 =&gt; List("Even") case 1 =&gt; List("Odd")&#125;val splitStream: SplitStream[Int] = inputStream.split(spliter)// Select specific stream from the split streamval even = splitStream select "Even"val odd = splitStream select "Odd"val all = splitStream.select("Even", "Odd")// Projectval input: DataStream[(Int, Double, String, String)] = ???val out: DataStream[(String, String)] = input.project(3, 2) 外部连接器Flink外部连接器, 速查表参考如下: Kafka Connector RabbitMQ Connector Cassandra Connector ElasticSearch Connector File System Sink Connetor Twitter Connector 示例代码, 参考如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/************************************************************************************************************** * Kafka Connector 示例 **************************************************************************************************************/val topicName = "topic-name"val brokerList = "localhost:9092"val stringSchema = new SimpleStringSchema()val properties = new Properties()// kafka-0.8及以下版本需要指定ZKQuaromproperties.setProperty("bootstrap.servers", "kafka-bootstrap-host:9092")properties.setProperty("zookeeper.connect", "zkhost:2181") properties.setProperty("group.id", "consuming-group-id")// Consumer Sinkval input: DataStream[String] = env.addSource( new FlinkKafkaConsumer[String](topicName, stringSchema, properties))// Producer Sinkval stream: DataStream[String] = ???val producer = new FlinkKafkaProducer[String](brokerList, topicName, stringSchema)stream.addSink(producer)/***************************************************************************************************************** * ElasticSearch Connector * Embedded Node Mode: Sink使用`BulkProcessor`发送文档至ES,在发送前需设置Buffer的请求数 * Transport Client Node: 通过9300端口建立连接,需要指定所有的ES节点 *****************************************************************************************************************/val intput: DataStream[String] = ???val config = new HashMap[String, String]()config.put("bulk.flush.max.actions", "1")config.put("cluster.name", "cluster-name")val indexReqBuilder = new IndexRequestBuilder[String] &#123; override def createIndexRequest(element: String, ctx: RuntimeContext): IndexRequest = &#123; val json = new HashMap[String, AnyRef]() json.put("some-data", element) Requests.indexRequest().index("index-1").`type`("type-1").source(json) &#125;&#125;val esSink = new ElasticSearchSink(config, indexReqBuilder)// Embedded Node Modeinput.addSink(esSink)val transports = new ListBuffer[String]()transports.append(new InetSocketTransportAddress("es-node-1", 9300))transports.append(new InetSocketTransportAddress("es-node-2", 9300))transports.append(new InetSocketTransportAddress("es-node-3", 9300))tansports.toListval esSinkTransport = new ElasticSearchSink(config, transports, indexReqBuilder)// Transport Client Modeinput.addSink(esSinkTransport)/***************************************************************************************************************** * Streaming File Sink * 利用Checkpoint机制确保恰好一次及时消费语义性.当Sink写入一文件时,处于in-progress状态,RollingPolicy确定roll一文件, * 等下次checkpoint完成时, 通过重命名将文件追加状态转变为完成状态并关闭文件. * 当然在某种情况下追加文件并不会提交,`StreamingFileSink`确保数据不丢,但这些文件并不会自动清除 * 手动删除追加文件前,需检测它是否lingering还是将要提交, 当找到TaskIndex相同但ID更高的提交文件时,可以安全移除追加文件. * 依赖`flink-streaming-java`. 若应用禁用checkpoint,`StreamingFileSink`不会对文件从追加状态转变为完成状态. *****************************************************************************************************************/val lineReader = new TextInputFormat(null)// Filesystem Source, FileProcessingMode.PROCESS_CONTINUOUSLY|PROCESS_ONCE, 文件扫描时间周期msval lineStream = env.readFile[String](lineReader, "hdfs:///path/to/data", FileProcessingMode.PROCESS_CONTINUOUSLY, 30000L)val path = new Path("/path/to/base")val strEncoder = new SimpleStringEncoder[String]("UTF-8")val fSink: StreamingFileSink[String] = StreamingFileSink.forRowFormat(path, strEncoder).build()input.addSink(fSink)// Bulk-encoding mode in StreamingFileSink// 处于Bulk-encoding模式下不能选择`RollingPolicy`, Bulk-encoding只能选择结合`OnCheckpointRollingPolicy`, // 每次checkpoint时rolls in progress部分文件val avroWriter = ParquetAvroWriters.forSpecificRecord(classOf[AvroPojo])val fsSinkWithBulkEncoding = StreamingFileSink.forBulkFormat(path, avroWriter).build()input.addSink(fsSinkWithBulkEncoding)]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Apache Flink</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query Engine大作战 -- Apache Drill之UDF篇]]></title>
    <url>%2Fbigdata%2Fdrill%2Fudf%2F</url>
    <content type="text"><![CDATA[本文将介绍Apache Drill中自定义函数(UDF, User Defined Function)及自定义聚合函数(UDAF, User Defined Aggregate Function)编写及代码实战. Drill UDFApache Drill中UDF可接收某列或Expression作为输入并返回计算结果, 返回值可以是基本类型, 也可以是复杂类型如数组或字典等. 添加依赖为正常使用Drill UDF, 需添加以下Maven依赖: 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.apache.drill.exec&lt;/groupId&gt; &lt;artifactId&gt;drill-java-exec&lt;/artifactId&gt; &lt;version&gt;THE-VERSION-OF-YOUR-DRILL&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.drill.contrib.function&lt;/groupId&gt; &lt;artifactId&gt;udf_template&lt;/artifactId&gt; &lt;version&gt;THE-VERSION-OF-YOUR-DRILL&lt;/version&gt;&lt;/dependency&gt; UDF实现Apache Drill中UDF实际功能由org.apache.drill.contrib.function.UDFTemplate提供, 该UDFTemplate包含很多样板代码, Drill并不直接执行该代码, UDFTemplate作为Drill生成代码的实现模板, 需结合UDF源码使用才能正常实现UDF功能. 实现一个简单的Drill UDF, 参考代码如下, 注意@FunctionTemplate中name不能为Drill中保留关键字、不能以数字开头, 若同一函数拥有不同版本接收不同输入, 这些版本的函数可以共享同一函数名(可以理解为允许方法重载); scope表明该函数是否为自定义函数(UDF)还是自定义聚合函数(UDAF); nulls变量表明该函数的空值处理策略. 1234567891011121314151617181920212223242526@FunctionTemplate( // 也可定义函数别名, 如: // names = &#123;"func_name_one", "func_name_two"&#125; name="your_function_name", // `SIMPLE`表明该函数为一自定义函数(UDF) scope=FunctionTemplate.FunctionScope.SIMPLE, // `NULL_IF_NULL`配置将跳过空行, 本例中Query结果中将以NULL代替空行 nulls=FunctionTemplate.NullHandling.NULL_IF_NULL)public class YourDefinedFunction implements DrillSimpleFunc &#123; @Param VarCharHolder yourInputNumber; @Output BitHolder isValid; @Override public void setup() &#123; // Do Something &#125; @Override public void eval() &#123; // 主逻辑实现略 &#125;&#125; 基于Apache Drill的模板系统, Drill要求开发者为输入参数定义Holder类型, Drill中常见Holder类型与SQL数据类型对应关系如下: SQL数据类型 Drill中对应Holder类型 INT IntHolder FLOAT Float4Holder DECIMAL Decimal9Holder DOUBLE Float8Holder BIGINT BigIntHolder VARCHAR VarCharHolder DATE DateHolder BOOLEAN BitHolder TIMESTAMP TimeStampHolder VARBINARY VarBinaryHolder TIME TimeHoder UDF编码实战下面看个简单例子, 编写一Drill UDF对信用卡号码进行合法性校验, 参考代码如下: 123456789101112131415161718192021222324252627282930313233343536import org.apache.commons.validator.routines.CreditCardValidator;import org.apache.drill.exec.expr.fn.impl.StringFunctionHelpers;@FunctionTemplate( name= "validate_credit_card", scope=FunctionTemplate.FunctionScope.SIMPLE, nulls=FunctionTemplate.NullHandling.NULL_IF_NULL)public class ValidateCreditCard implements DrillSimpleFunc &#123; @Param VarCharHolder cardNumber; // 每次迭代时均需使用`ccv`, 为提高性能, 可将该`CreditCardValidator` // 对象存储于 `@Workspace` 并在 `setup()` 方法中实例化 @Workspace CreditCardValidator ccv; @Output BitHolder out; public void setup() &#123; CreditCardValidator ccv = new CreditCardValidator(); &#125; // 信用卡号码合法性校验, 若信用卡号码合法输出值为1, 信用卡号码非法输出值为0 public void eval() &#123; String creditCardNumber = StringFunctionHelpers .toStringFromUTF8(cardNumber.start, cardNumber.end, cardNumber.buffer); if (ccv.isValid(creditCardNumber)) &#123; out.value = 1; &#125; else &#123; out.value = 0; &#125; &#125;&#125; UDF部署新版Apache Drill支持动态注册和注销Drill UDF, 无需重启Drillbits, 为动态注册UDF, 需配置以下路径(注意这些分布式文件系统中路径须对所有的Drillbits可见): Staging Directory, UDF注册前拷贝Jar包文件路径 Local Directory, 动态UDF Jar包文件临时路径, 当Drill关闭时会清空掉该路径 Registry Directory, UDF注册后Jar包拷贝路径 tmp directory, 该路径包含备份的Jar包 这些配置路径, 详见$DRILL_HOME/conf/drill-override.conf, 通常只需设置主路径, 然后让Drill在主路径下定义UDF路径即可, 参考配置如下: 1234567891011drill.exec.udf: &#123; retry­attempts: 5, directory: &#123; # Override this property if custom file system should be used to create # remote directories instead of default taken from Hadoop configuration fs: "hdfs:///", # Set this property if custom absolute root should be used for remote # directories root: "/app/drill" &#125;&#125; 设置完文件系统和主路径便可动态注册Drill UDF, 首先拷贝Jar包至Staging路径, 然后通过以下指令注册Drill UDF: 1CREATE FUNCTION USING JAR 'your_udf_jar_file'; 如果需要注销Drill UDF, 参考指令如下: 1DROP FUNCTION USING JAR 'your_udf_jar_file'; Drill UDAF实现一Drill自定义聚合函数, 与实现Drill UDF有些类似, 但需额外实现以下四个方法: add(), 该方法处理每项Record, 可以粗略的等效为UDF中eval()方法, 该方法用于实现主要聚合逻辑 output(), 该方法计算最终结果并输出 setup(), 该方法用于初始化变量等其它准备操作, 当首次调用UDAF时会调用该方法 reset(), 该方法可用于重置计数器或累计值, 当某列中数据类型发生改变或处理某项Section数据需要进行相关重置操作时, 可以调用该方法 Drill UDAF限制Apache Drill中UDAF存在以下限制: Apache Drill自定义聚合函数中含@Workspace注解(Annotation)的变量不能为复杂变量 含@Workspace注解的变量须为Drill中的Holders类型 含@Output或@Workspace注解的变量不能为可变长度或复杂变量 Apache Drill对于数值计算相关聚合函数存在一定限制, 如果想在@Workspace中使用非数值Holder, 可以考虑使用ObjectHolder(Drill后续版本可能会移除, 具体请参考官方文档), 如果数据集足够大以致Drill做哈希聚合时数据溢出至磁盘, 可能会导致Query失败. 可以参考以下指令禁用哈希聚合: 1ALTER SERSSION SET `planner.enable_hashagg`= false Apache Drill的UDAF须内部处理空值, 如将nulls变量设置为FunctionTemplate.NullHandling.INTERNAL; 还有一点, Drill自定义聚合函数中scope须设置为POINT_AGGREGATE, Apache Drill的UDAF函数模板参考如下: 12345@FunctionTemplate( name="correlation_function", scope=FunctionTemplate.FunctionScope.POINT_AGGREGATE, nulls=FunctionTemplate.NullHandling.INTERNAL) Drill UDAF代码实战下面使用Apache Drill编写一自定义聚合函数, 使用该UDAF计算Kendall(肯德尔)系数, 同序对(concordant pairs)和异序对(discordant pairs)之差与总对数(n*(n-1)/2)的比值定义为Kendall(肯德尔)系数. 相关变量及输出Holder, 声明如下: 1234567891011121314151617181920212223@Param Float8Holder xInput;@ParamFloat8Holder yInput;@WorkspaceFloat8Holder prevValueX;@WorkspaceFloat8Holder prevValueY;@WorkspaceIntHolder concordantPairs;@WorkspaceIntHolder discordantPairs;@WorkspaceIntHolder n;@OutputFloat8Holder tau; 其中同序对(concordantPairs)、异序对(discordantPairs)、prevValueX、prevValueY及参数n, 更新规则如下: 12345678910111213141516171819202122232425262728@Override public void add() &#123; double valueX = xInput.value; double valueY = yInput.value; if (n.value&gt;0) &#123; if ((valueX &gt; prevValueX.value &amp;&amp; valueY &gt; prevValueY.value) || (valueX &lt; prevValueX.value &amp;&amp; valueY &lt; prevValueY.value)) &#123; concordantPairs.value = concordantPairs.value + 1; prevValueX.value = xInput.value; prevValueY.value = yInput.value; n.value = n.value + 1; &#125; else if ((valueX &gt; prevValueX.value &amp;&amp; valueY &lt; prevValueY.value) || (valueX &lt; prevValueX.value &amp;&amp; valueY &gt; prevValueY.value)) &#123; discordantPairs.value = discordantPairs.value + 1; prevValueX.value = xInput.value; prevValueY.value = yInput.value; n.value = n.value + 1; &#125; else &#123; prevValueX.value = xInput.value; prevValueY.value = yInput.value; &#125; &#125; else if (n.value == 0) &#123; prevValueX.value = valueX; prevValueY.value = valueY; n.value = 1; &#125;&#125; 实现output()方法, 相对简单, 计算出同序对(concordantPairs)与异序对(discordantPairs)之差, 再除以总对数(n*(n-1)/2), 并将结果值赋给输出Holder tau即可. 1234567@Overridepublic void output() &#123; double result = 0.0; result = (concordantPairs.value - discordantPairs.value) / (0.5 * n.value * (n.value -1)); tau.value = result;&#125; 其中setup()及reset()函数实现很简单, 代码参考如下: 12345678910111213@Overridepublic void setup() &#123; // 不需要, 可以不实现&#125;// 重置所有变量和计数器值为0@Overridepublic void reset() &#123; prevValueX.value = 0; prevValueY.value = 0; concordantPairs.value = 0; discordantPairs.value = 0; n.value = 0;&#125;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Apache Drill</tag>
        <tag>Big Data</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之动态流控与组件交互篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fflow-control%2F</url>
    <content type="text"><![CDATA[本文将介绍Cascading开发过程中动态流控技巧及与其它外部组件交互应用. 动态流控Cascading中Flow可动态定义、控制, Cascading允许开发人员对数据处理流Flow进行动态编码控制, 如多次迭代运行Data Flow或控制Task执行顺序等. 存在以下几类算法需动态规划(控制): 图处理算法, 如Graph的路径、周期、分区等问题 NLP处理、强化相关算法 机器学习算法如随机梯度下降、”爬坡”算法等 常见递归算法, 如 Monte Carlo算法、Markov Chain迭代算法等 在实际开发中, 处理以上类型Task时, 需保存状态信息、内部计数器等, 便于下次迭代交互、提高计算效率. 本节将从: 计数器、动态定义Flow(FlowDef)及与已有MapReduce任务交互 三个方面对Cascading中动态”流控”(Flow Control)进行阐述. 计数器Flow中允许创建内部计数器(也称仪表), 当一个Operation传入FlowProcess对象时, 可在该FlowProcess对象上触发计数操作, 无需定义计数器, 仅需定义Group名和计数器名即可, 计数器初始化值为0, 计数器累加操作示意代码如下: 12345String counterGroup = "GroupName";String counterName = "CounterOne";// 计数器作用于FlowProcess, 并执行累加操作// FlowProcess实例化代码略flowProcess.increment(counterGroup, counterName, 1); 也可通过枚举定义计时器, 参考代码如下: 12345public enum COUNTERS &#123; COUNTER1, COUNTER2&#125;flowProcess.increment(COUNTER1, 1); 可以通过Flow读取计数器值, 参考代码如下: 12int counter = flow.getFlowStats() .getCounterValue(counterGroup, counterName); Cascading开发中, 可以通过计数器方式动态地控制Cascading中Flow迭代次数, 执行流程图参考如下: 代码参考如下: 12345678910111213141516171819// 构建FlowDef及Flow, 具体实现略FlowConnetor flowConnector = new LocalFlowConnector();String counterGroup = "GroupName";String counterName = "CounterOne";// 定义最大迭代次数以及计数器int maxIterations = 100;int updateCount = 0;boolean done = false;while(!done) &#123; flowConnector.connect(flowDef).complete(); // 计数器初始化为0 updateCount = flow.getFlowStats() .getCounterValue(counterGroup, counterName); maxIterations--; done = (maxIterations == 0 || updateCount == 0); &#125; FlowDef可以通过使用Fluent风格编程方式定义Flow, Fluent风格编程, 主要由Eric Evans和Martin Fowler于05年提出, “Fluent”风格编程也常被引用为Method Cascading, “Fluent”风格编程允许将一系列方法调用链(chain)起来, 形成单条Statement, 参考形式如下: 123// methodA的输出(即返回值)为methodB的输入, methodB的输出为methodC的输入// 与函数式编程的函数组合子有些类似, 但形式上更偏面向对象编程object.methodA().methodB().methodC(); 通过将对象object上调用的方法methodA、methodB、methodC链起来, 以提高代码可读性与可维护性. 其中methodA、methodB、methodC方法有些类似于函数式编程中的Monad概念, Monad可构成管道(Pipe)处理流中一部分并链起来(chain), 不可或缺. Cascading中也存在Fluent风格编程, 如FlowDef, 动态而”流畅”(Fluently)地构建数据处理Flow, FlowDef常见方法签名如下: 1234567FlowDef addSource(Pipe pipe, Tap sourceTap);FlowDef addSink(Pipe pipe, Tap sinkTap);FlowDef addTailSink(Pipe pipe, Tap tailSinkTap);FlowDef addTrap(Pipe pipe, Tap trapTap);FlowDef addToClassPath(String jarPath);FlowDef addCheckpoint(String name, Tap checkpointTap);FlowDef addAssemblyPlanner(AssemblyPlanner assemblyPlanner); 需要注意的是addAssemblyPlanner方法实际负责构建运行FlowConnector的Cascading代码, AssemblyPlanner实例提供了Cascading运行于Hadoop MapReduce、Tez、Apache Flink底层框架的方式. FlowDef示例代码如下: 1234567FlowDef flowDef = FlowDef.flowDef() .addSource(pipe, srcTap) .addTailSink(pipe, sinkTap);FlowConnetor flowConnector = new LocalFlowConnector();Flow flow = flowConnector.connect(flowDef);flow.complete(); 构建Flow时也可传入含Taps及Pipes的容器, 参考代码如下: 1234567891011List&lt;Pipe&gt; pipes = new ArrayList&lt;Pipe&gt;(2);pipes.add(pipeOne);pipes.add(pipeTwo);Map&lt;String, Tap&gt; taps = new HashMap&lt;String, Tap&gt;();taps.put("sourceTap", sourceTap);taps.put("sinkTap", sinkTap);FlowConnetor flowConnector = new LocalFlowConnector();Flow flow = flowConnector.connect(source, taps, pipes);flow.complete(); FlowDef中addSource、addSink、addTailSink等方法可以调用多次, 代码参考如下: 12345678FlowDef flowDef = FlowDef.flowDef() .addSource(pipeOne, sourceTap) .addSource(pipeTwo, anotherSourceTap) .addTailSink(tailPipe, sinkTap);FlowConnetor flowConnector = new LocalFlowConnector();Flow flow = flowConnector.connect(flowDef);flow.complete(); 与MR交互通常, 生产环境中可能运行多项MapReduce任务, 有时需要利用这些已有的MR来构建新的Data Flow, Cascading与现有MapReduce交互代码, 示例如下: 123456789101112131415// Hadoop JobConf配置, Job名、Mapper/Reducer、Key/Value类型设置JobConf mrcnf = new JobConf();mrcnf.setJobName("mr-job-one");mrcnf.setOutputKeyClass(LongWritable.class);mrcnf.setOutputValueClass(Text.class);mrcnf.setMapperClass(IdentityMapper.class);mrcnf.setReducerClass(IdentityReducer.class);// FlowOne -&gt; MapReduceFlow -&gt; FlowTwoFileInputFormat.setInputPath(mrcnf, flowOneSinkTap.getPath());FileOutputFormat.setOutputPath(mrcnf, flowTwoSourceTap.getPath());Flow mrFlow = new MapReduceFlow("mrflow", mrcnf);Cascade cascade = CascadeConnector(flowOne, mrFlow, flowTwo);cascade.complete(); 与外部组件交互本节将介绍Cascading如何与外部组件进行交互、集成. Cascading基于用户定义代码生成执行图(Execution Graph), 该Graph并不依赖于运行框架, 对应Job存在多种可选的组装计划器(Planners)及连接器(Connectors), 允许Cascading任务从一框架迁移至另一框架中运行, 做到了同一套代码, 可复用运行于多种框架. Cascading除了可运行于Hadoop之上(即MapReduce), 还可运行于Tez和Flink之上. Cascading On Flink, 灵活的网络栈, 支持低时延数据管道传输及转换、大规模可拓展; 内存安全; 基于内存计算的Operator、计算效率大大提升; 主动内存管理及自定义序列化栈, 支持Binary数据高效操作、防止JVM内存溢出及GC 暂停(GC Pauses). 以下这段代码为简单的WordCount (Cascading On Flink): 1234567891011121314151617181920public static void main(String[] args) &#123; Fields token = new Fields("token"); Fields text = new Fields("text"); RegexSplitGenerator splitter = new RegexSplitGenerator(token, "\\s+"); Pipe tokenPipe = new Each("token", text, splitter, Fields.RESULTS); Pipe wordCountPipe = new Pipe("wordcount", tokenPipe); wordCountPipe = new AggregateBy(wordCountPipe, token, new CountBy(new Fields("count"))); Tap input = new Hfs(new TextDelimited(text, "\n"), args[0]); Tap output = new Hfs(new TextDelimited(false, "\n"), args[1], SinkMode.REPLACE); FlowDef flowDef = FlowDef.flowDef.setName("wordcount") .addSource(tokenPipe, input) .addTailSink(wordCountPipe, output); FlowConnector flowConnector = new FlinkConnector(); Flow wordCountFlow = flowConnector.connect(flowDef); wordCountFlow.complete();&#125; Cascading On Tez, Tez计算引擎相比MapReduce, 做了很多优化, 如减少大量数据传输(如MapReduce中间数据不断刷写磁盘)开销等, 将整个Flow作为单个Job执行, 无需将临时文件刷写至HDFS. Cascading通过创建特定的Tez计划器、连接器、Flows、Taps等, 生成执行图(Execution Graph)用于分析特定模式, 创建特定的Processors提交至Tez引擎进行计算. Cascading On Hadoop, 注意Hadoop版本迁移问题, 如Hadoop 2.X系列使用YARN作为资源管理、调度工具, 而非之前版本的JobTracker与TaskTracker. 进行Cascading开发时, 须注意Hadoop版本迁移问题. FlowListener每项Flow与Cascade均可通过事件监听器执行回调(Callback), 适用于当Cascade或Flow开启、中断、完成、抛出异常时及时通知外部应用, Cascade或Flow生成事件可由客户端代码进行处理. 如当运行于Amazon EC2 Hadoop集群的Flow完成时, 可通过发送Amazon SQS消息通知另一应用获取Job结果或Shutdown集群等. 示例代码如下: 12345678910111213141516171819202122FlowListener listener = new FlowListener() &#123; public void onStarting(Flow flow) &#123; // 略去具体实现 &#125; public void onStopping(Flow flow) &#123; // 略去具体实现 &#125; public void onCompleted(Flow flow) &#123; // 略去具体实现 &#125; public boolean onThrowable(Flow flow, Throwable throwable) &#123; return false; &#125;&#125;flow.addListener(listener);assertFalse("No listener found", flow.hasListener());flow.removeListener(listener);assertTrue("Listener found", flow.hasListener()); 以下代码中, setSyslogger方法将发送Cascading Job消息(Flow开启、中断、完成等)至Unix风格Syslog Server(该UDP Server使用syslog4j): 1234567891011121314151617181920212223242526272829import org.productivity.java.syslog4j.Syslog;public void setSyslogger(Flow flow) &#123; FlowListener listener = new FlowListener() &#123; public void onStarting(Flow flow) &#123; Syslog.getInstance("udp").info(flow.getName() + "started at "+ new Date().toString()); &#125; public void onStopping(Flow flow) &#123; Syslog.getInstance("udp").info(flow.getName() + "stopped at "+ new Date().toString()); &#125; public void onCompleted(Flow flow) &#123; Syslog.getInstance("udp").info(flow.getName() + "completed at " + new Date().toString() + "with status " + flow.getFlowStats().getStatus().toString() ); &#125; public boolean onThrowable(Flow flow, Throwable throwable) &#123; return false; &#125; &#125;; flow.addListener(listener);&#125; 外部Jar包依赖Cascading开发中, 有时需使用外部Jar包依赖, 可添加这些依赖包至Java类路径中以便正常使用. 对于Cascading本地模式而言, 参考指令如下: 12$ # 请将external-dependency.jar替换为具体外部依赖Jar包$ java -cp your-job.jar:external-dependency.jar:cascading-lib/* com.your-company.your-jobs.MainJob 对于Cascading Hadoop模式而言, 有些复杂, 可考虑打成Uber Jar(或Fat Jar), Uber Jar中包含任务运行所需的所有依赖, 运行参考指令如下: 12$ hadoop jar your-jobs-uber-jar.jar com.your-company.your-jobs.MainJob \ /path/to/input /path/to/output 由于Uber Jar可能比较大, 可以参考以下指令将外部依赖Jar包传入: 12$ hadoop jar your-job.jar com.your-company.your-jobs.MainJob \ -libjar external-dependency.jar /path/to/input /path/to/output]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cascading实战之Cascade篇]]></title>
    <url>%2Fbigdata%2Fcascading%2Fcascade%2F</url>
    <content type="text"><![CDATA[本文将介绍Cascading中Cascade相关概念及使用技巧. Cascading中Cascade通常指一系列Flow, 不同独立的Flow可放在一起生成执行图(Execution Graph), 如果Cascade中有一项Flow依赖其他Flow输出, 该Flow并不会立即执行, 直至所依赖的Flow完成、输入数据满足条件才会执行. Flow Build或许你可能会问, 为何要使用Cascade, 而非含SubAssembly的Big Flow构建自定义、复杂的数据工作流(Workflow)? 但Cascade可以更好地解决以下问题: 为了更好地复用组件及Debug调试, 需要将Workflow分解成足够小而独立的逻辑单元 需要使用已有的MapReduce任务作为Workflow中一部分 需要使用外部组件交互作为Workflow中一部分 需要使用现有的Flow与新的Workflow进行交互、协调 将多项Flow连接起来, 形成Cascade, 参考代码如下, 注意传入的Flow顺序并不重要, Cascading通过使用CascadeConnector辨识Flow中依赖(基于这些Flow的Tap自动有序连接, 可以将这些Tap(通常为文件)视为Flow的连接, 一项Flow的输出可能为另一项Flow的输入, 基于这些Tap及Flow依赖关系, 可以有序地将Flow连起来), 如果这些Flow不存在Tap依赖, 可以并行执行. 12CascadeConnector connector = new CascadeConnector();Cascade cascade = connector.connect(flow1, flow2, flow3, flow4); 假如flow2和flow3分别依赖flow1输出, 而flow4输入数据依赖于flow2和flow3输出数据, 由于flow2和flow3彼此并不依赖可以并行运行, 若Data 1a和Data 1b数据比输入数据Input Data还要新则会跳过flow1(Data 2和Data 3与之类似), 整个Cascade中Flow执行示意图参考如下: Skip Flow执行Cascade时, 可以允许跳过执行某项Flow, 有时Workflow中某项Flow已经完成, 没有必要再重新运行可以选择跳过. Cascading中Flow跳过策略有以下两种: cascading.flow.FlowSkipIfSinkExists, 如果Sink Tap存在则跳过对应Flow, 如果Sink Tap的SinkMode值为REPLACE, 该Sink Tap也可视为Stale(陈旧). cascading.flow.FlowSkipIfSinkNotStale, 默认Flow跳过策略, 如果Sink资源比Feeding Source(数据生成源)要老或Sink并不存在, Sink Tap可以视为Stale(陈旧); 如果Sink Tap的SinkMode值为REPLACE, 该Sink Tap也可视为Stale. 也可实现自定义Skip策略, 只需实现cascading.flow.FlowSkipStrategy接口, 并实现boolean skipFlow(Flow flow)方法即可. 下面这段代码, 展示了如何跳过某项Flow(代码中Flow1使用语句分割器分割语句, Flow2在Flow1基础上对语句进行分词, 当两项Flow组成Cascade运行时, 若Flow1生成的语句输出已经存在, 基于FlowSkip策略, 此时会跳过Flow1. 可以参考第二次代码运行日志, 可以清楚地看到将跳过Flow1: “[pool-1-thread-1] INFO cascading.cascade.Cascade -[Flow2+Flow1] skipping flow: Flow1”). 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import cascading.cascade.Cascade;import cascading.cascade.CascadeConnector;import cascading.flow.Flow;import cascading.flow.FlowSkipIfSinkExists;import cascading.flow.FlowSkipStrategy;import cascading.flow.local.LocalFlowConnector;import cascading.pipe.Each;import cascading.pipe.Every;import cascading.pipe.GroupBy;import cascading.pipe.Pipe;import cascading.scheme.Scheme;import cascading.scheme.local.TextDelimited;import cascading.tap.SinkMode;import cascading.tap.Tap;import cascading.tap.local.FileTap;import cascading.tuple.Fields;public class TestCascade &#123; public void main(String[] args) &#123; // 输入文本 Fields fieldDeclarationInput = new Fields("document", "text"); // 基于文本断句(分句) Fields fieldDeclarationInterm = new Fields("document", "sentum", "sentence"); // 基于语句分词 Fields fieldDeclarationOutput = new Fields("docname", "sentnum", "wordnum", "word"); Scheme inputScheme = new TextDelimited(fieldDeclarationInput, true, "\t"); Scheme intermScheme = new TextDelimited(fieldDeclarationInterm, "\t"); Scheme outputScheme = new TextDelimited(fieldDeclarationOutput, "\t"); Tap srcTap = new FileTap(inputScheme, args[0]); Tap sink1Tap = new FileTap(intermScheme, args[1]); Tap sink2Tap = new FileTap(outputScheme, args[2], SinkMode.REPLACE); // Flow1基于输入文本分句, SentenceFunction封装了语句分割逻辑 Pipe pipe1 = new Pipe("InPipe1"); pipe1 = new Each(pipe1, new SentenceFunction); Flow flow1 = new LocalFlowConnector().connect("Flow1", srcTap, sink1Tap, pipe1); // Flow2在Flow1基础上对语句进行分词, TokenBuffer封装了分词逻辑 Pipe pipe2 = new Pipe("InPipe2"); pipe2 = new GroupBy(pipe2, new Fields("document"), new Fields("sentnum")); pipe2 = new Every(pipe2, new TokenBuffer(), fieldDeclarationOutput); Flow flow2 = new LocalFlowConnector().connect("Flow2", sink1Tap, sink2Tap, pipe2); CascadeConnector connector= new CascadeConnector(); Cascade cascade = connector.connect(flow2, flow1); // 指定FlowSkip策略 cascade.setFlowSkipStrategy(new FlowSkipIfSinkExists()); cascade.complete(); &#125;&#125; 第一次运行该程序时, 没有输出文件, 该Cascading程序运行日志参考如下: 12345678910111213141516171819202122232425262728[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] parallel execution is enabled: true[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flows: 2[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] allocating threads: 2[pool-1-thread-1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flow: Flow1[pool-1-thread-1] INFO cascading.flow.Flow -[Flow1] at least one sink does not exist[flow Flow1] INFO cascading.flow.Flow -[Flow1] starting[flow Flow1] INFO cascading.flow.Flow - [Flow1] source: FileTap["TextDelimited[['document', 'text']]"]["/data/files/sent.txt"][flow Flow1] INFO cascading.flow.Flow - [Flow1] sink: FileTap["TextDelimited[['document', 'sentnum', 'sentence']]"]["/data/files/sent.txt"][flow Flow1] INFO cascading.flow.Flow -[Flow1] parallel execution is enabled: true[flow Flow1] INFO cascading.flow.Flow -[Flow1] starting jobs: 1[flow Flow1] INFO cascading.flow.Flow -[Flow1] allocating threads: 1[pool-2-thread-1] INFO cascading.flow.FlowStep -[Flow1] starting step: local[pool-1-thread-1] INFO cascading.cascade.Cascade -[Flow2+Flow1] completed flow: Flow1[pool-1-thread-2] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flow: Flow2[pool-1-thread-2] INFO cascading.flow.Flow -[Flow2] at least one sink is marked for delete[flow Flow2] INFO cascading.flow.Flow -[Flow2] starting[flow Flow2] INFO cascading.flow.Flow - [Flow2] source: FileTap["TextDelimited[['document', 'sentnum', 'sentence']]"]["/data/files/sent1.txt"][flow Flow2] INFO cascading.flow.Flow - [Flow2] sink: FileTap["TextDelimited[['documentname', 'sentnumber', 'wordnum', 'word']]"]["/data/files/tok1.txt"][flow Flow2] INFO cascading.flow.Flow -[Flow2] parallel execution is enabled: true[flow Flow2] INFO cascading.flow.Flow -[Flow2] starting jobs: 1[flow Flow2] INFO cascading.flow.Flow -[Flow2] allocating threads: 1[pool-5-thread-1] INFO cascading.flow.FlowStep -[Flow2] starting step: local[pool-1-thread-2] INFO cascading.cascade.Cascade -[Flow2+Flow1] completed flow: Flow2 第二次运行该程序时, 会跳过flow1, 因为语句分词阶段产生的临时文件已经存在(由第一次运行程序时产生), 该程序运行日志参考如下: 123456789101112131415161718[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] parallel execution is enabled: true[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flows: 2[cascade Flow2+Flow1] INFO cascading.cascade.Cascade -[Flow2+Flow1] allocating threads: 2[pool-1-thread-1] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flow: Flow1[pool-1-thread-1] INFO cascading.cascade.Cascade -[Flow2+Flow1] skipping flow: Flow1[pool-1-thread-2] INFO cascading.cascade.Cascade -[Flow2+Flow1] starting flow: Flow2[pool-1-thread-2] INFO cascading.flow.Flow -[Flow2] at least onesink is marked for delete[flow Flow2] INFO cascading.flow.Flow -[Flow2] starting[flow Flow2] INFO cascading.flow.Flow - [Flow2] source: FileTap["TextDelimited[['document', 'sentnum', 'sentence']]"]["/data/files/sent1.txt"][flow Flow2] INFO cascading.flow.Flow - [Flow2] sink: FileTap["TextDelimited[['documentname', 'sentnumber', 'wordnum', 'word']]"]["/data/files/tok1.txt"][flow Flow2] INFO cascading.flow.Flow -[Flow2] parallel execution is enabled: true[flow Flow2] INFO cascading.flow.Flow -[Flow2] starting jobs: 1[flow Flow2] INFO cascading.flow.Flow -[Flow2] allocating threads: 1[pool-2-thread-1] INFO cascading.flow.FlowStep - [Flow2] starting step: local[pool-1-thread-2] INFO cascading.cascade.Cascade -[Flow2+Flow1] completed flow: Flow2]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Cascading</tag>
        <tag>MapReduce</tag>
        <tag>Apache Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将集成开发环境(IDE)搬到浏览器中]]></title>
    <url>%2Flife%2Fide-cn%2F</url>
    <content type="text"><![CDATA[重磅! Bring Your IDE Into Your Browser. 对, 你没看错, 不是在浏览器中敲JS代码, 也不是运行WebAssembly代码, 而是真正的将你的IDE移植到浏览器中, 打造高效的开发环境! 前提首先, 你得有台云主机或VPS, 用于安装Cloud IDE(能在浏览器中运行的IDE, 不叫Cloud IDE叫啥?). 如果你只是在你本地环境搞, 没什么意义, 那还不如直接用本地PC IDE, 对不? 理由和大多数开发人员一样, 你可以: 通过SSH和FTP访问云主机或VPS 通过Jupyter Notebook/Jupyter Lab运行Python代码(或者其它Jupyter Notebook支持的语言) 通过远程桌面软件(如VNC等)访问云主机或VPS GUI环境 有没有意识到, 云主机或VPS GUI环境访问是使用时的一大”掣肘”. 主要有以下几点: 远程桌面软件不给力, VNC Sucks, 无论是商业版本的VNC(如RealVNC), 还是开源版本的VNC(如TigerVNC); 无论是Vinagre/AnyDesk/Ammyy Admin/TeamViewer, 还是号称”最好用”的NoMachine, 个人均有用过, 体验均不太好. 远程桌面软件, 存在滞后, 是个绕不过的”坎儿”. 你可以在本机虚拟机上装个远程桌面软件服务端, 然后本机装个客户端, 连上试下体验. 不说了, 请自行体验(如果你还感受不到, 可以同样的在本地虚拟机中装个Jupyter Notebook并运行, 然后在本机浏览器中访问Jupyter Notebook, 对比下体验. 很神奇). 拜托, 这还是本机直连环境, 不是外网啊. 并非所有人都是Posix(Unix/Linux/MacOS) Geek, 也并非所有人都是VIM/Emacs党, CLI(命令行)爱好者. 对于IDE “重度依赖者”而言, 从IDE切换到VIM, 确实是件”头疼”的事儿. 工具, 顺手即可, 不必较真. 与时俱进, 时代在变, 软件和操作系统应该为人服务, 而不是人适应机器. 给云主机或VPS装个Cloud IDE, 有何不可? 云主机或许, 你还有着更深的疑虑. 为何要有自己的云主机或VPS? 身在大天朝的攻城狮们, 肯定会毫不犹豫的回答你, “科学上网”, “天天向上”. 天朝的GFW, 真的是”Great Firewall”, 她可是会学习的哦, 她很聪明, 请不要做些不理智的事儿! (如果你还没感受到, 请看下你购买的VPN, 现在能用的还有几个) 除了科学上网之外, 你可能还需考虑以下几点: 网速问题, 大天朝内, 普通百姓家里大多数装的是电信百兆宽带, 电信1OOMbps, 即12.5MB/s, 也就是你家里的百兆带宽, 全速跑满也只有12.5 MB/s. 而云主机或VPS, 一般标配千兆口(Gbps), 也就是说, 你的云主机或云主机或VPS可以跑到125MB/s. 理论上, 你的云主机或VPS网络与你家里网络相比, 10:1, 这还只是理想情况. 现实情况是, 你家里的网络, 可能最高能达到6-8MB/s (比如鄙人家里, 电信百兆宽带, 最高能达到5MB/s, 无语中……); 而你的云主机或云主机或VPS, 一般都能跑满带宽(除非你遇到超卖的商家, 那鄙人也无能为力). 这网速悬差, 意味着什么? 意味着同样的工作, 假如能在云主机或云主机或VPS进行, 效率提升至少10倍. (如果你真的感觉SSH与VIM让你很低效, 请尝试下推荐小节中的Cloud IDE再说) 1 Byte = 8 bit, 12.5 MB/s = 100 Mb/s (即100 Mbps, 小p代表per, 每秒传输100Mb数据), 还有什么问题吗? 资源问题, 比如Golang, 比如Github, 比如Rust, 比如Docker, 比如k8s …… 列表很长, 不详细列出来了, 自行体会即可. 所以你身边的同事, 早早用上了自己的云主机或VPS, 除了科学上网外, 他们还经常在上面挂个博客. 云主机或VPS比较适合开发人员, 有多少次, 你想认真地训练个模型, 调个参数(超参数调优), 把任务放到公司服务器上跑, 第二天发现任务早早地被运维”干掉了”, 理由是资源占用; 又有多少次, 你想在自己PC上, 验证下新算法, 奈何本机资源限制(如8G内存, 伤不起), 又或者任务刚跑到一半, 被你女盆友强制关机了, 理由是PC噪音加灯光”刺眼”, 抑或任务跑到第二天上班了还没结束, 只得隐忍作罢. 类似这样的例子, 还有很多, 不详细列了. 说这么多, 主要有两点: 1. 本机PC环境, 容易受到不可抗拒因素影响, 最重要的原因是你无法保证你的PC长时间不断电; 2. 即使是公司的测试集群, 测试主机, 也是公司的, 不属于你, 无法满足个人进一步的开发与调试. 所以, 你需要个人的云主机或VPS, 任务尽管放到后台跑, 不要操心太多. 算法训练, 任务迭代又不占用本机资源, 美哉! 效率问题, 在细述这个问题前, 我希望你把自己的开发环境搬到云主机或VPS上来, 再来谈效率问题. 假定你在自己的云主机或VPS上搞好了开发环境(如果你嫌SSH, VIM以及FTP难用, 请尝试下推荐小节中的Cloud IDE), 你现在可以 以千兆带宽下载数据集(或模型, 或其他文件), 对于要科学上网才能下载的数据集(或模型), 现在你可以几秒钟, 或者几分钟搞定, 而不必苦等几个小时, 甚至是老半天 享受代码提交(或git clone)速率提升的便捷, (通常你的代码提交至Github), 现在你在云主机或VPS上提交代码(或git clone), 瞬间”6得飞起”. (假如你的云主机或VPS节点在北美, Github主力节点也在北美, 那效率真是绝了) 享受”云端”人生, 你的云主机或VPS, 维护不用操心太多, 所有的开发, 调试, 均可以在”云端”进行 享受”无忧”人生, 通常对于算法人员而言, 漫长的模型训练, 迭代, 超参数调优, 特征工程(最主要的是这些过程是不断反复的, 泪啊), 很花时间, 所以时间”分秒必争”. 现在, 你可以将很费时任务训练放到云主机或VPS后台跑, 然后封装下Web接口, 时刻监视每一项重要的超参数. 这生活, 美滋滋! 更加专注, 是时候和”踌躇不已”的自己说再见了, “云端”主机, 让你摆脱束缚, 无畏无惧. 非朝内云主机(或VPS)让你的生活更完美! Non-Chinese 云主机(或VPS) Make Your Life Complete! 投资自己, 请勿吝啬. 无论你是身在大厂也好, 还是小厂也好, 在自己没有真正变得不可或缺时, 请不要停下投资自己的脚步! 举个简单例子, 比如你在Vultr月付5美刀购入云主机或VPS用于科学上网, 5美刀, 约30~40块钱, 在魔都不过一顿饭钱(当然你要吃好可能要多花点), 但是这一顿饭钱, 可以让你享受一个月自由网络, 摆脱束缚, 很值. 投资自己, 绝不妥协! 读到这里, 希望对你有所触动, 假如你身在大天朝, 一台非朝内云主机或VPS真的可以改变你的生活, 小小一台云主机或VPS, 确实能给你带来深远影响, 最重要的是它可以改变你思考的方式, 让你变得更加专注, 更加睿智, 更加无畏无惧!可能下一个问题你会问, 有什么好的云主机或VPS推荐吗? 看你个人需要如果你需要在云主机或VPS上搭建科学上网环境, 可以考虑搬瓦工, Vultr, 或者Gigsgigs Cloud, 科学上网首选.如果你已经能够科学上网, 你想要台备用的云主机或VPS, 用于个人其它需求(比如外贸,跨境电商等), 可以考虑Dream Host, 外贸WordPress/PHP建站首选, 在跨境电商外贸网站托管业界很有口碑; 或者, Liquid Web, 流量给的很足, 对于流量大户, 很有诚意. 对于大数据开发人员而言, 或者算法开发人员而言, 小则几GB数据集, 通常有时需处理上百GB数据集, 云主机或VPS流量很关键, 因为它关系到你是否能”高兴地玩耍”!对于云主机或VPS而言, 通常北美的流量比亚太流量便宜, 比如北美流量$0.01/GB, 1TB流量大概5美刀左右(包含出栈和入栈流量, 所以不是10美刀左右), Liquid Web 低配版每月10TB流量, 两年年付计划每月$15, 真的很良心. (1TB流量按$5.12算, 10TB流量$51.2) 推荐以下是个人使用过的几款可以运行在浏览器中的Cloud IDE. 如果你还有更好的Cloud IDE, 欢迎补充. 以下Cloud IDE在云主机或VPS安装部署时,请确保云主机或VPS已开启IDE对应运行端口, Amazon AWS, Vultr等供应商需要手动开启其它端口. Cloud 9Amazon AWS云端IDE, Cloud 9确实不错, 如果你曾用过, 或许你也想在自己云主机或VPS上装个Cloud 9. 不仅你想, Cloud 9团队也想更多的开发人员使用Cloud 9. 于是, Cloud 9官方团队在Github上放出了Cloud 9 SDK源码, 方便广大开发人员”自给自足”. Cloud 9支持断点测试, Debug调试, 支持终端, 支持浏览器预览, 内部集成了版本控制功能, 如下图所示, 左下方为Git提交的Log View, 对开发人员特别友好. 最让我感到”惊艳”的一个功能是, Cloud 9提供了Process List功能, 你可以不用Shell终端查看云主机或VPS所有后台运行进程, 不仅如此, Cloud 9还提供了Kill与Force Kill两种选项终止进程. Cloud 9安装, 参考指令如下:1234567$ git clone https://github.com/c9/core.git c9sdk \ &amp;&amp; cd c9sdk \ &amp;&amp; scripts/install-sdk.sh$ # Cloud 9安装成功后, 键入以下指令开启服务, Cloud 9默认端口为8181$ # 可以通过以下--port参数指定自定义端口, --auth后为用户名与密码$ node server.js --port 8181 --auth User-Name:Password然后在浏览器中键入 http://你云主机或VPS的公网IP:8181 即可访问Cloud 9官方一键安装脚本, 请移步至这里Cloud 9官方源码编译安装, 请移步至这里 说完了优点, 简单说下Cloud 9不足之处: 首先, 支持语言相对较少, Cloud 9默认仅支持Python, Go, PHP, JavaScript语言, 其它语言可能需要安装插件. Cloud 9代码自动补全功能, 相对简单, 远没有IntelliJ IDEA/Eclipse/Visual Studio强大; 源码跳转, 可能需要插件支持. 个人感觉Cloud 9比较适合Posix(Unix/Linux/MacOS)极客, VIM/EMACS党, 以及CIL爱好者. 对于习惯了IDE的代码补全, 源码跳转的开发人员而言, Cloud 9有些类似于增强版的Sublime (终端, Debug调试, 浏览器预览, 版本控制支持等功能, Sublime添加插件也能实现) 类VS Code产品有没有可能将微软开源的VS Code移到浏览器中, 在浏览器中享受”云端”便捷生活? 答案是肯定的, 类似的产品有: Eclipse Che (可自行部署, 也可使用Red Hat托管的Eclipse Che) Eclipse Theia 其它基于VS Code封装的云IDE (比如腾讯云的云代码编辑器, 国内貌似不止腾讯云, 还有一众Sass服务商将VS Code做成商业化、定制化的云IDE) 这些产品, 本质上将微软开源的VS Code进行封装, 将VS Code GUI功能移到了浏览器端. 云上主机开启VS Code服务端进程, 本地浏览器端开启VS Code客户端进程, 通过HTTP及REST进行通信. 这些产品, 通常使用非常流畅, 有时给人一种运行于本地环境的错觉. 如需自行部署, 前提是得有一台云主机(或VPS), 比如阿里云云主机还不错, 下面以Eclipse Theia为例, 进行私有化部署. 源码安装, 指令参考如下: 12345678$ # 首先拉取源码$ git clone https://github.com/eclipse-theia/theia$ # 也可自定义安装, 如在package.json文件中添加插件依赖或其它自定义依赖等$ yarn # 安装依赖$ yarn theia build # 编译、打包、构建应用$ # 运行, 默认端口为8080, 可以通过--port参数指定自定义端口$ # /my-workspace为工作空间目录, 可自行指定$ yarn theia start /my-workspace --hostname 0.0.0.0 --port 8080 然后在浏览器中键入 http://你云主机或VPS的公网IP:8080 访问即可. 更多细节, 请参考官方文档 Jupyter NotebookJupyter Notebook, 可以让你在浏览器中编写并运行Python代码, 不多介绍了, Python攻城狮必备神器. Jupyter Lab增强版的Jupyter Notebook, Jupyter Lab外观上更像一IDE. 其它如果你喜欢折腾容器(docker, k8s等), Eclipse Che是个不错的选择. 其它Cloud IDE, 如Eclipse Orion, Eclipse Dirigible等也可考虑. Enjoy玩的愉快, 不谢! “等下, 你的Cloud 9, Jupyter Lab以及VS Code, IP均为公网IP”. 呀, 被你发现了呢? 是时候开启你的传奇时刻了, 请让世界遇见更美好的你!]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Cloud IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[站点导航 (免查找与搜索, 你想要了解的都在这里 !)]]></title>
    <url>%2Flife%2Fguide%2F</url>
    <content type="text"><![CDATA[本人目前专注于: Deep Learning &amp; Machine Learning (算法) Big Data (大数据) 个人对于Java 8(及后续版本)新增语言特性的几点看法 点击上方链接, 直达站内博文 (免去费时查找与搜索, 你想要了解的都在这里, 比如查看本站点所有与大数据相关博文, 请点击上方Big Data链接即可).]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之ZGC篇]]></title>
    <url>%2Fambitious-java%2Fzgc%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? Java 11在GC上做了很多优化, 比如新引入的ZGC(Z Garbage Collector), 可拓展、低延迟. ZGC作为一种新的GC, 可运用于堆内存(大小可以从及KB到TB级别, 对你没看错, TB级别), 作为一并发垃圾回收器, ZGC可保证应用延迟不会超过10毫秒, 即便是堆内存占用很大(如TB级别)情况也适用, ZGC很容易调优. 引入原因随着现代硬件技术(内存、磁盘、CPU等)的发展, 低延迟、高吞吐应用已不再是奢望, 对于广发Java程序员而言, 一直都希望Java能有个低延迟、高吞吐的垃圾回收器. ZGC延迟不超过10毫秒, 相对于其它垃圾回收器, Stop-the-world Pause较少, 前景诱人. ZGC特点 ZGC作为一并发垃圾回收器, 可以并发进行内存标记、内存拷贝以及重分配. ZGC含有并发引用处理器, 意味着开发人员可以添加任意类型引用(如软引用、虚引用、弱引用及Finalizer等), 无需过多地担心GC Pause. ZGC使用Load Barriers, 与其它HotSpot GC使用Store Barriers不同, ZGC使用Load Barriers. Load Barriers可用于追踪堆内存使用情况, 不同的Load Barrier使用有不同的标色指针, 以便当线程运行时允许ZGC进行并发操作, 如对象重分配或重分配集选择等. 基于Region的垃圾回收器, 与G1 GC相比, ZGC更加灵活(如配置大小及Schema等), 更适合处理较大对象的内存分配与回收. 支持NUMA架构, ZGC含有支持NUMA架构的内存分配器 单代GC, ZGC支持部分内存合并(Compaction), ZGC在内存回收与重分配方面非常高效, 高性能. 缺点在于ZGC目前仅支持Linux/x64位架构, 其它架构和平台的支持会在未来版本中添加. ZGC堆内存ZGC将内存分成不同的Region, 这些Region也称ZPage, ZPage可动态创建和销毁, 可动态扩容(以2MB为单位, 动态扩容这点与G1 GC存在区别). ZGC堆中按Region大小可分为以下三类: Small(2MB), 较小Region Medium(32MB), 中等Region Large(N * 2MB), 较大Region ZGC堆中可有不同大小的Region, 其中中等Region及较大Region内存是连续分配的, 示意图参考如下: 与其它GC不同, ZGC堆中Region物理内存可以映射成较大堆内存地址空间(也可包含虚拟内存), 有助于预防内存碎片问题. 对于多数垃圾回收器而言, 通常JVM需要进行多项GC周期, 释放内存以便获取连续内存空间, 如果内存不够, JVM会由于OOM报错而Shut Down. 但对于ZGC而言, 并不会出现这种问题, 因为物理内存会映射成更大的地址空间, 分配连续内存空间不是问题. ZGC中的GC阶段ZGC的GC周期主要包含以下三个阶段: Pause Mark开始阶段 Pause Mark结束阶段 Pause 重分配开始阶段 第一阶段, Pause标记开始阶段, ZGC从GC Root进行溯源、标记对象, 包括遍历可达对象并进行标记, 该阶段是ZGC中GC工作最密集的阶段之一. 接下来进行同步, 该过程将中止(Pause)大概1毫秒左右, ZGC开始进行引用处理并进行清理, 包括如重分配集选择(Relocation Set Selection), 标记需要合并的Region等. 最后一个阶段, Pause重分配阶段, 触发实际的Region合并, 从GC Root重新扫描遍历, 于重分配集中并发进行对象重分配. 其中Pause Mark开始阶段, 也会Remap还存活的数据(Live Data). ZGC中标色指针标色指针, 也是ZGC一大特色之一, 通过标色指针, 方便ZGC查找、标记、定位以及Remap对象. 但该特性目前并不支持x32位架构机器. 实现标色指针需要虚拟地址标记(可以通过硬件、操作系统或者软件实现), 示意图参考如下: 如上图所示, 该64位对象引用可分为以下几个部分: 18比特未使用, 保留为后续使用 Finalizeble占1比特, 与并发引用处理相关, 标记仅可通过Finalizer访问的对象 Remapped占1比特, 标记位, 并不指向重分配集 Marked1占1比特, 用于标记对象 Marked0占1比特, 用于标记对象 42位对象地址, 可解决4TB地址空间映射问题 运行ZGC时, 会使用很多虚拟内存空间, 主要原因在于Heap间多映射导致, 如指定对象与标色指针在虚拟内存中如何存储等. ZGC调优主要是一些JVM参数调优, 如设置最大的并发线程数(ZGC作为一并发垃圾回收器, 并发线程数需设置合理), 启用较大ZPage, 启用Huge Page, 以及启用NUMA支持特性等 1234$ java -XX:ConcGCThreads=&lt;some-number-you-set&gt; \ -XX:+UseLargePages \ -XX:+UseTransparentHugePage \ -XX:+UseNUMA 用例如何使用? 由于ZGC目前仅支持Linux/x64位架构, 所以你需要一台x64位架构的Linux主机以及JDK 11. 安装指令参考如下: 123$ hg clone http://hg.openjdk.java.net/jdk/jdk$ cd zgc &amp;&amp; sh configure --with-jvm-features=zgc$ make images 测试代码, 参考如下: 12345class BonjourZGC &#123; public static void main(String[] args) &#123; System.out.println("Bonjour from the ZGC!"); &#125;&#125; 启用ZGC并运行代码 123$ java -XX:+UnlockExperimentalVMOptions -XX:+UseZGC BonjourZGC$ # 或者启用GC日志$ java -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xlog:gc:YOUR-LOG-NAME.log* BonjourZGC]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Project Amber篇(四)]]></title>
    <url>%2Fambitious-java%2Famber-enum%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? Project Amber对Java中枚举进行了强化, 如可以在枚举中添加类型变量(或泛型)以及更加完善的枚举类型检测. 这些改变, 意味着可以使用泛型枚举, 在枚举常量中增加状态和行为, 而不必想之前那样考虑由于泛型需要对枚举使用类进行重构. 语法糖首先, 简单回顾下Java中的枚举. 以下是一段简单的枚举代码: 1enum Size &#123;SMALL, MEDIUM, LARGE&#125; 通常上面这段枚举代码会被编译成以下Java源码: 123456789101112131415161718192021222324252627282930// 每一个用户定义的枚举均隐式继承了 `java.lang.Enum` 类final class Size extends Enum &#123; public static final Size SMALL; public static final Size MEDIUM; public static final Size LARGE; private static final Size $VALUES[]; static &#123; // 静态初始化 SMALL = new Size("SMALL", 0); MEDIUM = new Size("MEDIUM", 1); LARGE = new Size("LARGE", 2); $VALUES = (new Size[] &#123; SMALL, MEDIUM, LARGE &#125;); &#125; public static Size[] values() &#123; return (Size[]) $VALUES.clone(); &#125; public static Size valueOf(String s) &#123; return (Size) Enum.valueOf(Size, s); &#125; private Size(String s, int i) &#123; super(s, i); &#125;&#125; 从以上这段代码, 也可以看出, Java枚举不过只是语法糖而已, 编译器将对用户定义的枚举进行构造时, 需继承java.lang.Enum类来构建一个新类, 在新类中增加成员、方法以及初始化器. 访问规则强化版的Java枚举可有自己的状态和行为. 先来看段简单的Java代码: 12345678910111213141516171819202122232425262728293031323334353637enum Size &#123; SMALL(16, 11), MEDIUM(31, 21) &#123; int number = 10; // MEDIUM 中特定方法 int getSize() &#123; return length + width; &#125; &#125;, LARGE(36, 23) &#123; // 重写Size枚举中的 `toTextString()` 方法 @Override public String toTextString() &#123; return "LARGE"; &#125; &#125;; int length; int width; Size(int length, int width) &#123; this.length = length; this.width = width; &#125; int getLength() &#123; return length; &#125; int getWidth() &#123; return width; &#125; public String toTextString() &#123; return length + " x " + width; &#125;&#125; 目前对于强化版的Java枚举而言, 一个枚举常量可以访问: 所有枚举常量中的通用状态和行为 重写方法 但不允许访问某个特定枚举常量的状态和行为. 换句话说, 上面这段代码中, 如果你在某个方法中访问特定枚举常量MEDIUM中的number和getSize()方法时, 编译报错, 代码无法正常运行. 123// 报错, 无法正常通过编译System.out.println(Size.MEDIUM.number);System.out.println(Size.MEDIUM.getSize()); 主要原因在于MEDIUM枚举常量创建了一个匿名类并重写了Size枚举中方法, 并且该枚举常量仍被Size类型变量所引用. 假定对上面的Java源码使用继承重构如下: 123456789101112131415161718192021222324class SizeMeasurement &#123;&#125;class Small extends SizeMeasurement &#123; String text = "Small";&#125;class Medium extends SizeMeasurement &#123; public int getLength() &#123; return 6666; &#125;&#125;class Large extends SizeMeasurement &#123;&#125;enum Size &#123; SMALL(new Small()), MEDIUM(new Medium()), LARGE(new Large()); private SizeMeasurement mrs; Size (SizeMeasurement obj) &#123; mrs = obj; &#125; SizeMeasurement getSizeMeasurement() &#123; return mrs; &#125;&#125; 类似地, 不能访问某个特定枚举常量的状态和行为, 如 1234567class SizeTest &#123; public static void main(String[] args) &#123; var large = Size.LARGE; // 报错, 无法正常通过编译 System.out.println(large.getSizeMeasurement().getLength()); &#125;&#125; 如何解决这个问题呢? 强化版的Java枚举, 引入了泛型(或类型变量). 泛型枚举现在, 使用泛型, 对以上的枚举代码重构如下: 12345678910111213141516171819202122232425enum Size&lt;T extends SizeMeasurement&gt; &#123; SMALL(new Small()), MEDIUM(new Medium()), LARGE(new Large()); private T mrs; Size (T obj) &#123; mrs = obj; &#125; T getSizeMeasurement() &#123; return mrs; &#125;&#125;class SizeMeasurement &#123;&#125;class Small extends SizeMeasurement &#123; String text = "Small";&#125;class Medium extends SizeMeasurement &#123;&#125;class Large extends SizeMeasurement &#123; public int getLength() &#123; return 6666; &#125;&#125; 现在, 重新运行下面这段测试代码, 能正常编译并运行. 123456class SizeTest &#123; public static void main(String[] args) &#123; var large = Size.LARGE; System.out.println(large.getSizeMeasurement().getLength()); &#125;&#125;]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LevelDB学习手札之优化小节]]></title>
    <url>%2Fnosql%2Fleveldb%2Ftuning%2F</url>
    <content type="text"><![CDATA[LevelDB学习手札之LevelDB性能调优篇. Level File可以参考下图, LevelDB主存储为一系列Level级别的SST(Sorted String Table, 这些SST文件通常以.sst后缀结尾但后续可能会改为以.ldb后缀结尾, 为避免与微软之前提出的.sst后缀文件格式冲突), 这些SST文件的下一层Level通常是上一层Level的10倍大小, 最顶层Level中Record无序, 随着后续的数据拷贝、排序及Compaction, 下一层Level的SST数据开始有序. 这种写放大操作, 在LevelDB中可视为提高性能的一种Trade-off, 优点在于提高了写速度而无需基于索引更新避免中断, 而传统的B树索引当树均衡时需重写数据. 调用write()方法时, 数据首先写入memtable(Skip List结构), 并发写入日志文件落地到磁盘(容错需要, 若后续应用故障可进行数据恢复), 当日志文件达到4MB大小(可由write_buffer_limit参数设置)后, LevelDB开始写入新的Log并处理memtable, 此时内存中将保留俩数据结构: imm作为不可变类型继续写入以及后台线程在Level 0拷贝的SST文件. 为有效管理这些持久化文件, 会写入一Manifest文件, 该文件记录了Key键范围及每项SST文件level, 每当产生新的SST文件或Compaction线程合并文件并推送至以下一level时, 该Manifest文件会新增一项数据记录. 读自上而下当调用Get检索Key键时, 主要步骤参考如下: 首先扫描当前memtable的Skip List (如果Key键找到可以退出) 扫描imm的Skip List, 检测是否为空, 当数据刷写至磁盘时该跳表并不为空 (如果Key键找到可以退出) 检测Manifest文件, 判定Key键是否在已有Level File文件中Key值范围内 (可能在也可能不在) 如果候选Level File没有缓存, 则打开候选Level File文件 如果使用了过滤策略, 通过过滤器判断Key键是否在候选Level File文件中 Level File索引(Index)可用于判断文件是否包含囊括目标Key键范围的Block (可能包含也可能不包含) 如果Block包含目标Key(而非Block Cache), 从候选Level File中读取该Block 顺序化遍历该Block中KV键值对, 读取目标Key对应Value值 (可能存在没找到情形) 由于KV键值对长度任意, 所以不能通过计算偏移值方式进行定位, 基本上所有数据读写操作须经过Level File, 缓存及过滤器(如Bloom Filter等)有助于数据查找与定位. 删即写SST文件涉及从上而下, 不同级别level的数据拷贝、排序以及Compaction, Key键的删除与之类似, 自上而下. 与Tree Index不同, 实际上并不会移除Key键, 相反删除意味着一种写入, 对同一Key写入一份副本并包含特定的Marker(标记)告知该Key键数据已被删除. 布隆过滤器LevelDB底层本身做了很多优化措施, 若通过使用过滤策略判定读取的给定Key键是否存在于候选Level File中, 由于Level File中存在一系列不同范围Key, 若能通过使用过滤器(如布隆过滤器), 便可快速查找、定位(如每次打开文件时会缓存Filter数据, 提升整体检索效率, 无需读取索引或扫描Blocks). 布隆过滤器使用示意图如下: 布隆过滤器通过组合使用一些列简单而快速的哈希函数避免哈希碰撞概率, 组合的哈希函数写入对应结果值同一Bitmask. 注意布隆过滤器非哈希表, 该Filter并不会处理冲突(须由其它LevelDB数据结构处理Key值冲突). 布隆过滤器可以保证没有假负(False Negative, 被模型预测为负的正样本), 即若Key键不存在, 则绝对不存在; 若Key键存在, 其它Key可能含有相同序列的Hash. 通常合理修改Key键对应Bit数或改进Filter算法, 可以提升算法整体性能, 缺点在于增加了存储开销(要存储Filter数据). 假定目标Key键百分之百在数据库中, 没必要使用布隆过滤器. LevelDB并不关心用户使用何种过滤器, 仅提供一Hook指定FilterPolicy对象, 可以通过实现该接口编写自定义Filter, 也可使用NewBloomFilterPolicy提供的默认Filter. 如果自定义比较器认定某部分Key乱序, 不能使用默认过滤策略. 也可参考其它优化组件, 如Basho技术团队推出的Riak Server使用LevelDB的Erlang封装eleveldb, eleveldb包含改进的Bloom Filter(Basho团队称该Filter占用更少存储空间,仅有0.05%假负率, 而Google版本LevelDB假负率为1%), eleveldb的布隆过滤器可以用于替标准LevelDB中的布隆过滤器. 选择性缓存LevelDB可以通过将ReadOptions中的fill_cache flag参数为false, 绕过缓存. 缓存虽好, 但某些业务场景可能要求禁止刷新当前缓存. 可以参考以下代码设置缓存大小, 代码中缓存为读缓存, 适用于读远大于写场景. 123456789leveldb::Options options;// 100MBoptions.cache = leveldb::NewLRUCache(100 *1048576); leveldb::DB* db;leveldb::DB::Open(options, name, &amp;db)// Do Some Work// Then Clean Updelete db;delete options.cache; 快照通常数据库内部使用的Key键包含用户定义Key、Flag值以及Snapshot Number, Flag值表明是数据Key键还是待删除Key; 快照数字在写的时候可以保证并发读, 对Key值遍历时可有效避免其它线程更改(Delete或重写Key键等). 快照可通过ReadOptions对Get或Iterator等读操作产生影响: 12345678leveldb::ReadOptions options;// Save before some workoptions.snapshot = db-&gt;GetSnapshot();// 增删Key键, 相关操作代码实现略leveldb::Iterator* iter = db-&gt;NewIterator(options);// 手动清除delete iter;db-&gt;ReleaseSnapshot(options.snapshot); 尽管GetSnapshot应返回与删除相关的数据库状态对象, 如果传入Snapshot Number组成读时使用Key键, 每次新写或批量写入将增大该数字, 而读时检索的实际Key键及快照后续并不可见. 快照作为一短期行为, 适用于数据库当前会话. 目前并不存一种安全而有效的方法在持久化快照于磁盘同时又能保证被后续应用所使用. 配置调优以下LevelDB配置(这些配置可参考LevelDB::Options)对性能调优存在重大影响: write_buffer_size, 默认4MB, 可以适当调大, 当memtable写入磁盘时可能产生阻塞, 如果imm仍在写而当前Buffer已经满了, 可能会产生延迟 max_open_file, 默认为1000, 如果Server上数据库很多, 可以适当提高该参数值, 允许缓存更多的level File打开文件句柄, 避免文件开启、关闭开销 block_cache, 该指针常用于缓存NEWLRUCache创建对象, 默认8MB block_size, 每项Block用户数据大小, 默认4KB, 影响level table索引(每项Block对应一Index Entry), 如果业务数据中存在很多Key键大于4KB, 可以适当修改. 该参数也可用于I/O刷写, 若参数值设置过大可能会导致数据库容易受OS Crash影响而造成数据丢失 block_restart_interval, 默认值为16, 若数据中存在很多顺序化Key且这些Key很少变更, 可以适当修改. 该参数也可视为写入新Key的Checkpoint Interval filter_policy, 默认为NULL, 可以通过使用NewBloomFilterPolicy创建过滤策略, 使用过滤策略虽增加存储开销(磁盘及内存开销), 但优化了Key键查询.]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>LevelDB</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Project Amber篇(一)]]></title>
    <url>%2Fambitious-java%2Famber-raw-string-literals%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? 随着JDK 12(2019年3月)的推出, Java终于迎来了”生”字符串字面量(Raw String Literals). 什么是”生”字符串字面量? 简单来讲, 它大概长这样: 12345678// 此处只是举个例子, 实际开发环境中常用DOM生成工具String htmlHeader = `&lt;HTML&gt; &lt;BODY&gt; &lt;H1&gt;Add Raw String Literals&lt;/H1&gt; &lt;/BODY&gt; &lt;/HTML&gt; `; 为什么要新引入”生”字符串字面量? 123456789101112131415161718// 对于之前版本的Java, 上面的代码, 你可能会写成这样// 很繁琐, 需要将多行字符串拼接起来, // 如果拼接的字符串过长, 影响代码可读性以及可维护性String htmlHeader2 = "&lt;HTML&gt;" + "\n\t" + "&lt;BODY&gt;" + "\n\t\t" + "&lt;H1&gt;Add Raw String Literals&lt;/H1&gt;" + "\n\t" + "&lt;/BODY&gt;" + "\n" + "&lt;/HTML&gt;";// 或者, 在字符串相对简短的情况下, 使用换行和制表符整成一行代码, 如下// 但这样代码可读性非常差String htmlHeaderOneLine = "&lt;HTML&gt;\n\t&lt;BODY&gt;\n\t\t&lt;H1&gt;Add Raw String Literals&lt;/H1&gt;\n\t&lt;/BODY&gt;\n&lt;/HTML&gt;";// 本例还算好, 但如果存在转义字符呢, 如 &lt;H1&gt;\n Some Text Here \t More Text&lt;/H1&gt;// 字符串拼接后的代码将"不忍直视"// 类似的情况还有Java正则, 比如:String somePatternsHere = "(\\w)(\\s+)([\\.,])";// 简单的正则还好, 但如果正则很复杂, 同样面临一场"恶梦" 对于多行字符串拼接问题, Java之前做的并不出色, 如果字符串过长, 很容易造成”拼接地狱”问题; 类似的还有Java正则, 由于正则模式使用字符串表示, 如果正则过于复杂或转义字符很多, 将严重影响代码可读性以及可维护性. Java中”生”字符串字面量的出现, 有助于解决这些问题, 提高代码可读性以及可维护性. 用例“生”字符串字面量可广泛用于如JSON、XML(或类似的标记语言)文本、文件路径、数据库查询中. 比如数据库查询: 123456789101112// 简单的数据库查询, 使用"生"字符串字面量String queryText = ```SELECT 'product_sk', 'date_sk' FROM 'product_dim', 'date_dim' WHERE 'product_dim.effective_date' = 'date_dim.date' ```;// 而非像之前, 经典的Java写法, 多行字符串拼接String queryTextUsingOldJava = "SELECT product_sk, date_sk " + "FROM product_dim, date_dim " + "WHERE product_dim.effective_date = date_dim.date "; 比如, 文件路径: 1234// 文件路径, 使用"生"字符串字面量 String filePath = `D:\Path\To\Your\File`;// 而非经典的Java写法 (特别是Windows环境, 双转义符号很"优秀")String filePathWin = "D:\\Path\\To\\Your\\File"; 比如, JSON文本: 1234567891011121314151617181920212223242526272829303132333435// 假定有段JSON数据, 长这样// &#123;"department": &#123; // "id": "96111", // "team": &#123; // "stuff": [ // &#123;"name": "Emma Roberts", "age": "24" , "gender": "Female"&#125;, // &#123;"name": "Nia Roam", "age": "21", "gender" : "Female"&#125;// ] // &#125; // &#125;&#125;// 使用"生"字符串字面量, 将JSON数据存储于Java字符串中String json = ```&#123;"department": &#123; "id": "96111", "team": &#123; "stuff": [ &#123;"name": "Emma Roberts", "age": "24" , "gender": "Female"&#125;, &#123;"name": "Nia Roam", "age": "21", "gender" : "Female"&#125; ] &#125; &#125;&#125; ```;// 而非经典的Java写法String jsonUsingOldJava = "&#123;\"department\": &#123; \n" + "\"id\": \"96111\", \n" + "\"team\": &#123; \n" + "\"stuff\": [ \n" + "&#123;\"name\": \"Emma Roberts\", \"age\": \"24\" , \"gender\": \"Female\"&#125;, \n" + "&#123;\"name\": \"Nia Roam\", \"age\": \"21\", \"gender\" : \"Female\"&#125; \n" + "] \n" + "&#125; \n" + "&#125;&#125;"; 基本用法新引入的”生”字符串字面量并不会改变与Java之前传统的字符串字面量值间的交互. Java字节码并不会记录字符串常量是使用传统的字符串创建还是”生”字符串字面量创建. “生”字符串字面量与传统的Java字符串值均存于java.lang.String类的实例中. “生”字符串字面量在Java中定义如下: 1RawStringDelimiter &#123;RawStringCharacters&#125; RawStringDelimiter “生”字符串字面量支持Backtick(`符号)嵌套, 如下: 123456789// 双BackTick中文本可以包含单个BackTickString oneBacktickNested = `` Some Text Provided Here `other text ``;// 四BackTick中文本可以包含三BackTickString threeBacktickNested = ```` Some Text Provided Here ```other text ````;// 多BackTick, 类似, 略 ...... 为了更好地支持新引入的”生”字符串字面量, Java在java.lang.String中新增了一些方法, 如: 1234// 由于Oracle JDK中"生"字符串字面量还处于开发迭代中, // 以下方法可能会重构 (如重命名等)public String unescape() &#123; /** 略 */ &#125;public String escape() &#123; /** 略 */ &#125; 上面这两个方法有什么用呢? 主要用于Escape Sequence(如转义、分割符等)处理, 比如: 123456// 输出: (有换行) // Some // TextSystem.out.println("Some" + `\n`.unescape() + "Text");// 输出: Some\nTextSystem.out.println("Some" + "\n".escape() + "Text"); 多行文本Margin管理对于多行文本处理, 可能需要对齐、移除一些不必要的分隔符等. 为了更好地进行这些文本处理, Java在String类中新增了一些方法, 如align(), indent(), transform()等. align()方法, 主要用于多行文本对齐, 如: 1234567891011String yourText = `Your Text Here `;System.out.print(yourText.align());/* 输出 Your Text Here */ indent()方法, 主要用于指定多行文本的对齐间隔(如N个空格等), 如: 12345678910111213141516String yourText = `Your Text Here `;System.out.print(yourText.align().indent(4));/* 输出: (存在4个空格对齐) Your Text Here */ // 上面这行代码, 实际上也等效于System.out.print(yourText.align(4));// 也就是说, 调用`align()`方法时, 如果没有传入参数, 仅按照给定的多行文本默认对齐// 如果有传入参数, 多行文本对齐的空格数为传入的参数值 detab()与entab()是一对对称方法, detab()将制表符转换成空格, entab()方法反过来. 比如: 123456789101112// 下面这段多行文本按制表符对齐String yourText = `Your Text Here `;System.out.println(yourText.detab(1));/* 输出: (按1个空格对齐) Your Text Here */ transform() 方法, 对应Java源码, 参考如下: 1&lt;R&gt; R transform (Function&lt;String, R&gt; f) 主要用于对多行文本进行转换, 如: 123456789101112131415161718// 假定存在以下文本数据, 现在要将分割符'[ '移除// [ Forest - Fire, Drought// [ Oceans - Plastic Pollution, Human CallousnessString originalString = `[ Forest - Fire, Drought [ Oceans - Plastic Pollution, Human Callousness `;String str = originalString.transform(&#123; txt.stream() .map(s -&gt; s.map(String::strip)) .map(t -&gt; t.startsWith("[ ")? t.substring("[ ".length()): t ) .collect(Collectors.joining("\n", "", "\n")); &#125;);]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LevelDB学习手札之CRUD篇]]></title>
    <url>%2Fnosql%2Fleveldb%2Fcrud%2F</url>
    <content type="text"><![CDATA[LevelDB学习手札之基本概念与CRUD篇. 本文示例代码均采用Nodejs, 为何使用Nodejs? 第一, JS已经占领了浏览器(The Language by which your browser has been dominated); 第二, LevelDB支持脚本语言中, 貌似Nodejs是最快的(心疼Python五秒, 为何是五秒, 因为金鱼的记忆只有五秒, 别问我为何知道, French Guys Told Me That); 第三, JS程序员总有那么几天工作满载、负荷过重, 有时后端攻城狮不得不写一些JS代码. 编码格式LevelDB支持Binary形式的KV键值对, 可以通过keyEncoding与valueEncoding设置KV编码格式: 1234567// 可以使用任意 `Buffer.toString()` 允许的编码格式:// hex, utf8, ascii, binary, base64, ucs2 或 utf16levar options = &#123; keyEncoding: 'hex', valueEncoding: 'base64'&#125;;var db = level(dbPath, options); 也可指定JSON作为Value编码格式, 参考代码如下: 123456789101112131415161718192021222324var level = require('level');var path = require('path');var assert = require('assert');var dbPath = process.env.DB_PATH || path.join(__dirname, 'yourdb');var options = &#123; keyEncoding: 'binary', valueEncodinng: 'json'&#125;;var db = level(dbPath, options);db.put(new Buffer([1, 2, 3]), &#123;some: 'some json value'&#125;, function(err) &#123; if (err) &#123; console.error(err); &#125; db.get(new Buffer([1, 2, 3]), function(err, value) &#123; if (err) &#123; return console.error(err); &#125; assert.deepEqual(value, &#123;some: 'some json value'&#125;); console.log(value); &#125;);&#125;); 使用JSON编码格式, 好处在于可以存储和获取复杂JS对象, 无需开发者手动编码与反编码. 批量操作LevelDB允许开发者进行批量读写, 示例参考代码如下: 1234567891011121314151617181920var batch = db.batch();batch.put('key one', 'value one');batch.put('key two', 'value two');batch.del('key three');batch.write(function(err) &#123; if (err) &#123; console.error('batch operation failed:', err); &#125;&#125;);// 上面这段代码也可链(Chain)起来db.batch() .put('key one', 'value one') .put('key two', 'value two') .del('key three') .write(function(err) &#123; if (err) &#123; console.error('batch operation failed:', err); &#125; &#125;); 除了使用Fluent风格将API链起来, 还可选择使用数组(将批量操作传入一数组中)版本的batch(), 示例代码参考如下: 1234567891011var users = // 具体代码略var operations = users.map(function(user) &#123; // 通过`type`指明操作类型(put或者del等) return &#123;type: 'put', key: user.id, value: user&#125;;&#125;);db.batch(operations, function(err) &#123; if (err) &#123; console.error('error in user batch:', err); &#125;&#125;); 可读流可以通过以下代码从LevelDB创建一可读流(Readable Stream): 12345var stream = db.createReadStream();// 数据读取stream.on('some data', function(data) &#123; console.log('%s = %j', data.key, data.value);&#125;); 除了触发数据, 可读流还可进行下列操作, 参考代码如下: 1234567891011stream.once('end', function() &#123; // 数据读取完 console.log('no more data');&#125;);stream.once('close', function() &#123; // 关闭 console.log('stream closed');&#125;);stream.once('error', function(err) &#123; // 错误处理 console.error('stream emitted error:', err);&#125;); 可以参考以下方式指定数据触发的Key键范围: 123456789var assert = require('assert');var stream = db.createReadStream(&#123; gte: 'start key', lte: 'end key'&#125;);// 数据Key键在 start key 与 end key 之间stream.on('data', function(record) &#123; assert(record.key &gt;= 'start key' &amp;&amp; record.key &lt;= 'end key');&#125;); 限制返回Record条数, 参考代码如下: 123456789var assert = require('assert');// 假定仅对前10条Record感兴趣var stream = db.createReadStream(&#123; limit: 10 &#125;);var count = 0;stream.on('data', function(record)&#123; assert(++count &lt;= 10);&#125;); 使用可读流的一大好处在于可以获取一致性读快照, 这意味着任一Stream开始若进行后续写入或批量写入并不会影响该可读流, 示例代码如下: 1234567891011121314151617181920212223242526272829303132333435var assert = require('assert');var db = require('./db');var batch = [ &#123;type: 'put', key: 'key one', value: 'Value A'&#125;, &#123;type: 'put', key: 'key two', value: 'Value B'&#125;, &#123;type: 'put', key: 'key three', value: 'Value C'&#125;, &#123;type: 'put', key: 'key four', value: 'Value D'&#125;]var index = 0;db.batch(batch, function(err) &#123; var stream; if (err) &#123; console.error(err); &#125; else &#123; stream = db.createReadStream(&#123;gte: 'start key', lte: 'end key'&#125;); stream.on('data', onData); db.batch(batch.map(function(op) &#123; return &#123;type: op.type, key: key.key, value: 'value'&#125;; &#125;), function(err) &#123; if error(err) &#123; console.log(er); &#125; else &#123; console.log('Saved Batch replacing with other value, resuming'); &#125; &#125;); &#125;&#125;);function onData(record) &#123; console.log('read: %j', record); assert.equal(record.value, batch[index ++].value);&#125; SubLevel批量操作可以通过使用level-sublevel NPM模块按需对Key键分区, 而非手动创建Key, level-sublevel模块支持在多项sublevel上原子性批量更新. 安装命令参考如下: 123$ node install level-sublevel --save$ # 可以考虑安装 cuid NPM 模块生成随机唯一ID, 便于后续测试$ node install cuid --save 下面创建两个Database: 一个用于存储用户Record, 另一个用于存储用户消息. 123456789101112// sublevels.jsvar level = require('level');var path = require('path');var sublevel = require('level-sublevel');var dbPath = process.env.DB_PATH || path.join(__dirname, 'sublevels');var db = sublevel(level(dbPath, &#123;valueEncoding: 'json'&#125;));exports.base = db;// users 用于存储用户Record; messages 用于存储用户消息exports.users = db.sublevel('users');exports.message = db.sublevel('messages'); level-sublevel模块支持在多项sublevel上原子性批量更新, 如生成一条用户消息时希望原子性插入该消息至发送邮箱与接收邮箱, 脚本参考如下: 123456789101112131415161718192021222324252627282930var db = require('./sublevels');var cuid = require('cuid');exports.insert = insertMessage;function insertMessage(to, from, subject, body, callback) &#123; var id = cuid(); var message = &#123; to: to, from: from, subject: subject, body: body &#125;; var batch = [ &#123; type: 'put', key: id, value: message, prefix: db.messsage.sublevel(from).sublevel('out') &#125;, &#123; type: 'put', key: id, value: message, prefix: db.message.sublevel(to).sublevel('in') &#125; ]; db.base.batch(batch, callback)&#125; 钩子(Hooks)新建一Hook, 假定脚本名为sublevels_user_hook.js, 参考代码如下: 123456789101112131415var cuid = require('cuid');var db = require('./sublevels');var userChanges = db.base.sublevel('userchanges');db.users.pre(function(change, add) &#123; add(&#123; type: 'put', key: cuid(), value: &#123; when: new Date(), change: change &#125;, prefix: userChanges.sublevel(change.key) &#125;);&#125;); 激活该Hook并Include该模块至sublevels.js中: 12345exports.base = db;exports.users = db.sublevel('users');exports.messages = db.sublevel('messages');require('./sublevels_user_hook'); 用户更新, 编写一测试脚本(sublevels_user_log.js)查询用户更新: 12345678910var db = require('./sublevels').base.sublevel('userchanges');var email = process.argv[2];var userChanges = db.sublevel(email);userChanges.createValueStream().on('data', function(message) &#123; console.log('User Change: %j', message);&#125;).once('end', function () &#123; console.log('no more change');&#125;); 运行该脚本, 效果如下: 1234567891011121314151617181920212223242526272829$ node sublevels_user_log.js usr_one@dotnet.comUser Change: &#123; "when":"2014-10-08T12:19:43.154Z", "change":&#123; "key":"usr_one@dotnet.com", "value":&#123;"name":"Xavier","email":"usr_one@dotnet.com"&#125;, "prefix":["users"], "type":"put" &#125; &#125;User Change: &#123; "when":"2014-10-08T12:19:43.946Z", "change":&#123; "key":"usr_one@dotnet.com", "value":&#123;"name":"Xavier","email":"usr_one@dotnet.com"&#125;, "prefix":["users"], "type":"put" &#125; &#125;User Change: &#123; "when":"2014-10-08T12:19:44.555Z", "change":&#123; "key":"usr_one@dotnet.com", "value":&#123;"name":"Xavier","email":"usr_one@dotnet.com"&#125;, "prefix":["users"], "type":"put" &#125; &#125;no more changes]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>LevelDB</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LevelDB学习手札之Key键迭代与搜索]]></title>
    <url>%2Fnosql%2Fleveldb%2Fsearch%2F</url>
    <content type="text"><![CDATA[LevelDB学习手札之Key键迭代与搜索篇. Key键迭代首先, 创建一些测试数据, 代码参考如下, 当然也可考虑对key之前值使用Slice模板, 但需要注意的是Slice仅有一项数据指针(假如Slice指向的值发生改变, Bug你懂的); 代码中使用WriteBatch不仅为批量写入需要, 还且有助于存储引擎优化文件写入. 123456789101112vector&lt;string&gt; words &#123;"Some", "Random", "Words", "For", "Test"&#125;;string prevKey;WriteOptions syncW;syncW.sync = true;WriteBatch wb;// C++11中Range风格遍历for (auto key: words) &#123; wb.Put(key, prevKey + "\tAdd Some Text"); prevKey = key;&#125;assert(db-&gt;Write(syncW, &amp;wb), ok()); LevelDB提供一迭代器Iterator, 每次使用Iterator时会获取一份LevelDB一致性快照, 进行遍历时会忽略更新. LevelDB向前遍历, 可以通过SeekToFirst()方法跳到第一项KV值, 代码参考如下: 123456Iterator* idb = db-&gt;NewIterator(ropt);for (idb-&gt;SeekToFirst(); idb-&gt;Valid(); idb-&gt;Next()) &#123; cout&lt;&lt; idb-&gt;key() &lt;&lt;endl; // 可以通过调用 `value()` 方法查看Value值 // cout&lt;&lt; idb-&gt;key() &lt;&lt; " " &lt;&lt; idb-&gt;value() &lt;&lt;endl;&#125; 向后遍历, 有些类似(如通过SeekToLast()方法跳到最后一项KV值等), 但效率不高. 123for (idb-&gt;SeekToLast(); idb-&gt;Valid(); idb-&gt;Prev()) &#123; cout&lt;&lt; idb-&gt;key() &lt;&lt;endl;&#125; Key键查找由于Get()返回Key键精确匹配值, 对于Iterator而言, 通常有些业务场景需通过Seek()方法对Key进行查找. 以下代码, 列出所有匹配给定前缀的Key: 1234567void listPrefixMatchedKey(Iterator* idb, const Slice&amp; prefix) &#123; cout&lt;&lt; "List all keys starting with " &lt;&lt;prefix.ToString() &lt;&lt;endl; for(idb-&gt;Seek(prefix); idb-&gt;Valid() &amp;&amp; idb-&gt;key().starts_with(prefix); idb-&gt;Next()) &#123; cout&lt;&lt;ibd-&gt;key() &lt;&lt;endl; &#125;&#125; 向后遍历, 有些复杂, 以下代码以向后遍历的方式列出所有匹配给定前缀的Key: 123456789101112131415void listBackwardsKeysMatched(Iterator* idb, const Slice&amp; prefix)&#123; cout&lt;&lt; "List all keys starting with " &lt;&lt;prefix.ToString() &lt;&lt; " backwards " &lt;&lt;endl; const string keyAfter = prefix.ToString() + "\xFF"; idb-&gt;Seek(keyAfter); if (idb-&gt;Valid()) idb-&gt;Prev(); else idb-&gt;SeekToLast(); for(; idb-&gt;Valid() &amp;&amp; idb-&gt;key().starts_with(prefix); idb-&gt;Prev()) &#123; cout&lt;&lt;idb-&gt;key() &lt;&lt;endl; &#125;&#125; 以下代码, 列出了给定范围内(不包括endKey)的所有Key: 12345678void listKeysBetween(Iterator* idb, const Slice&amp; startKey, const Slice&amp; endKey)&#123; cout&lt;&lt; "List all keys &gt;= " &gt;&gt;startKey.ToString() &lt;&lt; "and &lt; " &lt;&lt;endKey.ToString() &lt;&lt;endl; // 如需包含`endKey`, 将下面代码中小于号改为小于等于即可. for(idb-&gt;Seek(startKey); idb-&gt;Valid() &amp;&amp; idb-&gt;key().compare(endKey) &lt; 0; idb-&gt;Next()) &#123; cout&lt;&lt;idb-&gt;key() &lt;&lt;endl; &#125;&#125; 为了加快数据搜索效率, 有时需要对KV键值对做些相关性索引, 如常见做法有: 将相关Key与下一相关Key链起来形成一相关列表, 便于后续搜索匹配等. 123456789101112131415string nextKey;if (db-&gt;Get(ropt, firstKey, &amp;nextKey).IsNotFound()) &#123; return firstKey + " ** not found **";&#125;// 为了简化, 代码中使用箭头(-&gt;)将相关Key连接起来形成一文本string ret = firstKey;for (;;) &#123; string key = value.substr(0, value.find("\t")); if (db-&gt;Get(ropt, key, &amp;value).IsNotFound()) &#123; break; &#125; ret += " -&gt; " + key;&#125;return ret;]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>LevelDB</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Epsilon GC篇]]></title>
    <url>%2Fambitious-java%2Fepsilon-gc%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? Java 11新引入Epsilon GC, Epsilon GC也称No-Operation(no-op) GC, Epsilon GC并不会回收任何垃圾, 仅处理内存分配, 当可用的堆内存(Heap Memory)用尽时, JVM会立即Shut Down(停掉). Epsilon GC听起来很怪异, 对不对? 它又有什么用呢? 先回答第二个问题, Epsilon GC可用于测试、Benchmark应用的性能、内存使用、延迟及吞吐等, 以便后续进行性能调优. 引入原因现在回到第一个问题, 为什么引入Epsilon GC? 预测导向, 举个简单例子, 多数环保专家对”全球变暖”持肯定态度, 他们是怎么得出这个结论的? 只是因为最近几年大多数地区变热了吗? 还是他们会”穿越”, “穿越”到未来, 发现地球真的变成了”大火炉”. 现实情况是, “全球变暖”是他们的预测观点, 他们基于历史数据进行科学分析(如工业温室气体排放, 历年全球气温数据等)得出的结论. Java 11引入Epsilon GC也是类似目的, 开发者可以通过使用Epsilon GC预测应用性能, Epsilon GC可以在不回收已分配内存的情况下对Java应用程序的性能、内存使用、延迟以及吞吐等进行真实评估与测试. Epsilon GC特点Epsilon并不会清除未使用对象的堆内存, 仅进行内存分配. 当遇到JVM OOM时, 会立即关闭并抛出OOM错误, 如果启用Heap Dump, 抛出OOM错误后Epsilon会立即进行Heap Dump. Epsilon GC使用一种简单的、无锁的Thread Local Allocation Buffer(TLAB, 线程局部分配缓冲, 以线性化方式分配连续内存), 好处在于TLAB可以绑定使用已分配内存的Process. 由于Epsilon GC并不回收内存, 无需维护对象标记、对象合并(Compaction)、对象图(Graph)或对象拷贝等. 缺点在于Epsilon GC可能存在延迟Overhead, 当Epsilon进行分配内存时可能会有延迟Overhead问题, 比如分配内存过大或分配的内存Chunk过大等. 使用场景小结 场景一: 延迟相关场景假定你的Java程序每秒需要处理上千条消息, 在该种情况下即使一毫秒延迟也会对系统性能产生重大影响, 最糟糕的情况是你并不知道什么时候执行GC进行垃圾回收. 该种情况下, 建议使用Epsilon GC测试该程序, 因为此时Epsilon GC并不会进行垃圾回收, 通过分析日志, 可以定位到产生延迟的一些可能根源: 如与GC相关的GC Worker调度、GC周期、GC Barrier开销等, 或者与GC无关的如OS调度或编译器问题等. GC周期存在延迟Overhead, 影响吞吐, 可能影响因素有, 如堆内存大小、GC持续时间、Region大小、分配单元等. 此外, 系统Overhead也可能导致延迟Overhead, 与GC无关. 可以通过使用Epsilon GC(no-op GC), 来判定是GC相关的问题还是OS/编译器相关的问题导致应用性能问题. 场景二: 短时间运行作业假定你需要创建一个较短运行时间作业, 当退出程序时, JVM Shut Down, 所有的堆内存进行回收, 由于执行GC需要花费一点时间, 此时也可考虑使用Epsilon GC. 用例如何使用Epsilon GC, 以下是个小例子: 123456// Simple Hello Word 代码class BonjourEpsilonGCCase &#123; public static void main(String[] args) &#123; System.out.println("Bonjour From Epsilon GC Case One!"); &#125;&#125; 1$ java -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC BonjourEpsilonGCCase 再来看个使用Epsilon GC进行内存压测的例子: 1234567891011121314import java.util.*;class MapTest &#123; public static void main(String[] args) &#123; Map&lt;String, String&gt; testMap = new HashMap&lt;String, String&gt;(); int testSize = 1_000_000; for (int i=0; i &lt; size; i++) &#123; String testString = new String("Scala"); String ioStringValue = new String("zScalaRocks.io"); testMap.put(testString, ioStringValue); testMap.remove(testString); &#125; &#125;&#125; 1$ java -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xlog:gc* -Xmx40M MapTest 如果使用String池重构代码, 如下, 猜猜看会发生什么? 1234567891011121314import java.util.*;class MapTest &#123; public static void main(String[] args) &#123; Map&lt;String, String&gt; testMap = new HashMap&lt;String, String&gt;(); int testSize = 1_000_000; for (int i=0; i &lt; size; i++) &#123; String testString = "Scala"; String ioStringValue = "zScalaRocks.io"; testMap.put(testString, ioStringValue); testMap.remove(testString); &#125; &#125;&#125; 1$ java -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xlog:gc* -Xmx40M MapTest]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving]]></title>
    <url>%2Fambitious-java%2Fguide%2F</url>
    <content type="text"><![CDATA[本文采用先抑后扬的写作技巧, 可能会有部分读者不太喜欢, 迅速跳出, 本文没有任何贬低或负面的想法, 正如文末所言, 鄙人只是一个观察者, 一个乐于观察Java语言不断演变的Observer. 起由 最初主要是想写Java 8的一些新增语言特性, 记录下Java 8的学习笔记. 后来发现自己对这些Java 8的这些新增特性并不太”感冒”, 最终搁置了一段时间. Java 8新增语言特性, 主要参考如下: Lambda与函数式方法接口 Stream API / Parellel Stream API 并发API增强, 如CompletableFuture API 接口可有默认实现 Optional (为更好地避免空指针问题) 新增原子性容器, 如LongAdder、LongAccumulator等 其它一些API优化与改进, 比如Date API等 (部分日期相关的方法, 变得有点像Joda, 确实是件好事儿) 简单说下个人不太”感冒”的原因. 首先, Java 8中的Lambda与函数式方法接口、Stream API, 不过是Java对FP(函数式编程)的进一步”调情”后的结果, 一直以来Java对FP不断”调情”, 小动作不断. 即便是C++, 动作也比Java快很多, 如C++ 11(先于Java 8, Java 8于2014年发布)中率先新增了对FP的支持. CompletableFuture, 确实优秀, 但Scala、C#等语言早已有了Future/Promise(请注意此处的Future与Java 7及以前的Future并非同一概念). 接口可有默认实现, 到Java 8才出, 初看有点像”抄” Scala中的特质(Trait, 当然Scala的特质主要为Type Class而设计的, 特质的OOP特性不过是副产物而已). 但, 这终究不过是Java的”妥协”(Java 7及以前的接口中所有方法均为抽象方法, 对于小型项目还好, 但对于大型项目而言, 调几个接口而已, 还得实现一堆无关的抽象方法, 瞬间代码越千行, 然后你”很有成就感”与”自豪感”), Java 确实是经历过”痛与泪”, 才明白这条路确实可行. (毕竟, Java多年的接口、库、包、庞大的生态, 必然要经历过”痛与泪”, 才会妥协做出该抉择). Optional, Java到Java 8才想通. “或许避免空指针异常最好的方式是Haskell中的Maybe”, Scala很早就想通了, 于是很早就有了Option(Some/None, 分别对应Haskell中的Just和Nothing); 紧接着Kotlin、Rust、Swift等语言也有了自己对应版本的”Option”(或”Optional”, 可能名称有些小差异, 具体看对应语言实现, 本质上还是借鉴Haskell中的Maybe). 至于Parallel Stream API, 初看很像Java的一场”模仿秀”. Scala中的Collection(集合/容器), 有并行容器(如ParIterable, 包含ParSeq、ParSet、ParMap)与顺序化容器(如Iterable)之分, 最重要的是Scala中顺序化容器到并行容器, 有时仅需要调用.par即可完成. 于是Kotlin顺手”抄”了Scala, 然后你一边对Kotlin”大手称赞”, 一边数落Scala的难用. Java很聪明, 从Stream到Parallel Stream也做了很多优化与封装, 毕竟Java确实把核心给摸透了. 别误会, 在这里并不是说Scala比Java”优秀很多”. 只是这些年(14年及以前), 纵观下各大主流语言(比如C#、C++等), Java 8这些新增语言特性, 确实让人”不太感冒”, 即便是C++, 也变得更加Modern, 变得比Java更加”与时俱进”. 转折那为何突然又想写这个系列呢? 转折点在于Java 9的强化, 让我闻到了一丝”Java的野心”. Java 9 中的Flow API, 让我看到了Java试图将Reactive(响应式)原理引入到Java语言级别做出的努力. 或许那个”充满野心”的Java回来了, 不对, Java从诞生之初, 就一直充满”野心”, 比如Java诞生之初标榜的”编写一次, 到处运行(Write Once, Run Anywhere)”, 本来就代表Sun公司的野心. 或许这些年, Java并没有丧失自己的”野心”. 但Java 8以前这些年(14年以前), 除了JVM生态不断扩大外, Java语言本身, 并没有多大”侵入性”. Java从96年面世至今, 走过的这些年, 让人一直感觉Java就像个中年大叔, 不太喜欢激进与折腾, 不是吗? 这些年Java语言变得肥实了(多金, 无忧), 喜欢充当幕后的观察者. Java变了, 变得有些像静待无声的捕食者, 动静不大, 但”一击必杀”. 不太确定, 以后Java是否会将Reactive完全融入到Java语言级别中, 但我仍然闻到了Java静谧之下的一丝”野心”. 是的, Java的”野心”一直都在. 鉴于Java 9/10, 仅作为JDK的短期快速迭代版本, 我好奇地看了下Java 11及Java 12的一些变化, 作为笔记记录下来. 这个系列的博文, 主题实际上为Java的野心. 但”野心”这个词, 近些年伴随着华文语境的一些变化, 似乎成了一个贬义词, 贬义意味着不喜欢、厌恶. (“野心”, 中性词, 然而随着”野心家”、牺牲品舆论的不断放大, 中性词逐渐变得似乎有一丝贬义词的”味道”. 但不管舆论怎么带节奏, 该中性词依然还是中性词, 就像地球不会突然消失一样). 个人其实对于Java这些变化, 并没有多少反感, 相反, 我只是一个观察者, 一个乐于观察Java语言不断演变的Observer. 标题为Ambitious Java Evolving, 字面意思为”不断演变的、充满抱负的Java”, 引申义为”充满抱负的Java的进击之路”. 内容这个系列的笔记主要以Java 11/12的部分新增语言特性为主, 与君共勉! 站点直链: Ambitious Java Evolving系列之ZGC篇Ambitious Java Evolving系列之Epsilon GC篇Ambitious Java Evolving系列之Project Amber篇(一) - “生”字符串字面量Ambitious Java Evolving系列之Project Amber篇(二) - Lambda遗留问题Ambitious Java Evolving系列之Project Amber篇(三) - Data ClassAmbitious Java Evolving系列之Project Amber篇(四) - 枚举强化Ambitious Java Evolving系列之Project Amber篇(五) - 模式匹配]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Project Amber篇(二)]]></title>
    <url>%2Fambitious-java%2Famber-legacy-lambda%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? 本文本来准备写Project Amber对Lambda的强化, 但目前Java对Lambda的强化, 还算”小打小闹”, 比如终于可以使用下滑线代替未使用的方法参数了. 但在某种程度上, Java中的Lambda使用还存在一定限制, 比如Lambda中同名参数隐藏问题, 比如调用重载的Functional Expression目前还存在一些问题. 下滑线与未使用的方法参数当调用一个方法或Lambda表达式时, 有时候可能并不需要所有的方法参数, 此时可以通过使用下划线代替未使用的参数. 比如下面这段代码: 12// 此处的下滑线代表并不关心Lambda中的第二个参数情况BiFunction&lt;Integer, String, Boolean&gt; pred = (value, _) -&gt; value &gt; 666; 这行做的好处有两点: 1. 减少编译器对于未使用值的类型检查, 减少编译器开销; 2. 开发友好, 无需传递所有参数. 对于上面这段代码, 如果你不想使用下划线代替未使用参数, 参考做法有以下几种: 12345678// 方法一: 传递Null值给未使用参数BiFunction&lt;Integer, String, Boolean&gt; pred = (value, null) -&gt; value &gt; 666;// 方法二: 传递空字符串值给未使用参数BiFunction&lt;Integer, String, Boolean&gt; pred = (value, "") -&gt; value &gt; 666;// 方法三: 传递任意字符串值给未使用参数BiFunction&lt;Integer, String, Boolean&gt; pred = (value, "Any String You Can Use") -&gt; value &gt; 666;// 方法四: 传递任意变量值(要求对应给定类型)给未使用参数BiFunction&lt;Integer, String, Boolean&gt; pred = (value, str) -&gt; value &gt; 666; 目前, 基于JEP 302, 可以在以下几种情况下使用下划线代替未使用的方法参数: Lambda中 方法中 Catch Handler中 使用下划线代替未使用值, Scala、Python等语言早已嵌入到语言级别, Java总算是”赶上了”. Lambda参数隐藏问题以下是一段可以正常运行的Java代码: 1234List&lt;String&gt; lst = List.of("Bonjour", "Hola", "Salut");lst.stream() .map(str -&gt; str.toUpperCase()) .forEach(System.out::println); 如果在上面代码基础上再加一个同名(与Lambda中参数同名)的str变量, 如下, 猜猜看, 会发生什么? 1234567public void methodProcessing() &#123; List&lt;String&gt; lst = List.of("Bonjour", "Hola", "Salut"); String str = "Ciao"; lst.stream() .map(str -&gt; str.toUpperCase()) .forEach(System.out::println);&#125; 很遗憾, 上面这段代码无法正常通过编译. 为什么无法通过编译? 因为map()方法中的Lambda参数str无法覆盖掉局部变量str (隐藏问题).当代码运行到map方法时, map()方法中的Lambda参数str相当于重定义变量str, 自然报错, 无法正常通过编译. 对于Scala而言, 并不存在这种问题. 如 12345678def someMethod(): Unit = &#123; val lst = List("Bonjour", "Hola", "Salut") val str = "Ciao" lst.map &#123; str =&gt; str.toUpperCase() &#125; // 或者直接 foreach println, 无需点号 // 写成下面这种形式, 是为了更好地体现Scala类型推导的强大 .foreach &#123; str =&gt; println(str) &#125;&#125; 1234scala&gt; someMethod()BONJOURHOLASALUT 得益于Scala强大的类型推导能力, Scala并不会有类似于Java中的Lambda参数隐藏问题. 函数表达式歧义问题首先来看段Java代码: 12345678910111213141516interface Hiking() &#123; boolean hikingOrNot(String conditions);&#125;interface Diver &#123; String dive(double depth);&#125;Class SportsTest &#123; // 定义重载方法 static void evalueate(Hiking hiking) &#123; System.out.println("Start Hiking"); &#125; static void evalueate(Diver diver) &#123; System.out.println("Start Diving"); &#125;&#125; 现在调用SportsTest中的重载方法, 如下: 12345class RunningTest &#123; public static void main(String[] args) &#123; SportsTest.evaluate(d -&gt; false); &#125;&#125; 上面这段代码不能正常通过编译, 主要原因在于上面的Lambda参数d没有指定输入参数的类型, 这样一来的话d既可以是String类型(Diver接口中dive方法) 也可以是boolean类型(Hiking接口中hikingOrNot方法), 此时模棱两可, 编译器无法判断, 只能拒绝编译. 解决方式: 显式地为Lambda参数加上合适的类型, 如下: 12345class RunningTest &#123; public static void main(String[] args) &#123; SportsTest.evaluate((String d) -&gt; false); &#125;&#125; 假如重构上面这段代码, 参考如下: 123456789101112131415interface Hiking &#123; boolean hikingOrNot(double miles);&#125;interface Diver &#123; String dive(double depth);&#125;Class SportsTest &#123; static void evalueate(Hiking hiking) &#123; System.out.println("Start Hiking"); &#125; static void evalueate(Diver diver) &#123; System.out.println("Start Diving"); &#125;&#125; 现在, 猜猜看下面这段代码, 能否正常通过编译: 12SportsTest.evaluate(d -&gt; false);SportsTest.evaluate((double d) -&gt; false); 很不幸, 上面这两行代码均无法正常通过编译, 主要原因在于编译器无法判断到底调用的是哪个重载方法(evaluate()), 因为此时Diver接口中的dive()方法与接口Hiking中的hikingOrNot()方法均接受同一类型(double)参数. 编译器此时很懵逼, 只能”罢工”. 可能你也很疑惑, Diver接口中的dive()方法与接口Hiking中的hikingOrNot()方法, 明明它们的返回类型不同啊!!! 为何编译器不能做出判断??? 请重新回顾下重载的定义: 同一个类中同名方法可以有不同的参数类型、参数个数或者参数个数与参数类型均不同. 方法重载与返回类型, 没有多大关系, 对不? 同样容易产生歧义的还有传递方法引用问题. 比如下面这段代码: 1234567891011// 无法正常通过编译, 编译器无法判定到底是引用哪个重载方法callSomeMethod(Credits::check);class Credits &#123; static boolean check(double number) &#123; return (number &lt; 66.6); &#125; static boolean check(String conditions) &#123; return (lap.equalsIgnoreCase("Some Filters")); &#125;&#125;]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Project Amber篇(三)]]></title>
    <url>%2Fambitious-java%2Famber-data-class%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? Project Amber为进一步强化Java, 新引入了record关键字以便更好地支持Data Class. 什么是Data Class? 对于广大Java攻城狮而言, 这个概念既陌生又熟悉, 熟悉的是POJO(Plain Old Java Object), 陌生的是新引入的以record关键字为代表的Data Class. POJO, 可以视为Java最早版本的Data Class, 简单来说, 一个POJO封装了一系列数据, 但没有其它额外的行为来更改状态. POJO通常包含类成员、类构造器、getter/setter, 以及重写Object类中一些方法(如toString(), hashCode(), equals()等). Java POJO, 让人又爱又恨. 爱它是因为简单的一个类, 你需要定义好Fields, 类构造器, 一堆的getter和setter, 以及重写Object中一些方法(如toString(), hashCode(), equals()等), 然后你的代码瞬间过百行, 很有成就感, 有木有? 恨它是因为, 拜托, 你不过定义了一个类而言, 活儿没干完. 你写是轻松了(比如IDE简单右键几下搞定POJO), 但你让读的人怎么想? 你让后期维护你代码的人开心吗? Java冗余的语法, 有一半是POJO的功劳. Project Amber新引入的Data Class, 在一定程度上了简化了Java代码, 有助于提高代码的可读性及后期的可维护性. Scala有Case Class, 甚至Python也推出了Data Class, Kotlin也有Data Class, 现在Java终于”补上了”. 比如Scala中定义一个Case Class, 可以这样写:123456// Scala编译器会默认为该Case Class生成// `copy()`、`equals()`、`hashCode()`、`toString()`四个方法// 当然这些方法也可重写case class People(name: String, age: Int, gender: String) &#123; // 重写方法或定义其它方法或相关变量等&#125; 语法使用record关键字, 可以很简单的定义一个Data Class: 12345678910// 很简洁, 对吧record People(String name, int age, String gender) &#123; // 1. 除了上面 `name`, `age`, `gender` 外, // Data Class还可以在里面(此处)添加其它变量或字段 // 2. 或者定义其它方法 // 3. 或者实现自己的构造器, 而非编译器默认生成的构造器 // 4. 或者重写`Object`中方法, 如`equals()`,`hashCode()`及`toString()`等 // 而非Java编译默认生成的方法 // 5. 或者像现在这样, 一行Data Class代码, 仅使用默认实现&#125; 运行上面这段代码时, Java编译器会为该Data Class自动生成默认的Object方法(如equals(),hashCode()及toString()等). 上面这段代码会被Java编译器转换成以下源码: 12345678910111213final class People extends java.lang.DataClass &#123; final String name; final int age; final String gender; public People(String name, int age, String gender) &#123; this.name = name; this.age = age; this.gender = gender &#125; // `equals()`,`hashCode()`及`toString()` 方法实现略 // getters方法略&#125; Data Class可以定义为抽象类, 也可定义为非抽象类, 如果定义为抽象类, 生成的构造器为Protected. 继承规则目前, Java对于Data Class的继承规则, 参考如下: 非抽象(或抽象)的Data Class可继承其它抽象的Data Class 一个抽象(或非抽象)的Data Class可实现任意接口 目前, 以下继承规则是非法的: Data Class可继承常规类 常规类可继承Data Class 一个Data Class可继承另一非抽象的Data Class Data Class继承另一抽象Data Class, 示例代码参考如下: 12abstract record Animal(String name, String family);record Tiger(String name, String family, String description) extends Animal(name, family); Data Class实现一接口, 示例代码参考如下: 1234567891011interface Howl &#123; abstract void howl();&#125;record Wolf(String name, String family, String description) extends Animal(name, family) implements Howl &#123; public void howl() &#123; System.out.println("Wolf Howl !"); &#125;&#125;; 使用Data Class可用于模式匹配, 如: 123456789101112interface Garment &#123;&#125; record Button(float radius, Color color); record Shirt(Button button, double price); record Trousers(float length, Button button, double price); record Cap(...) switch (garment) &#123; // 对`Button` 展开, 进行模式匹配 case Shirt(Button(float f1, Color c2), Color c3): ... case Trousers(float f1, Button(float f2, Color c3), double a4): ... .... &#125; 上面这段代码, 使用switch语句进行模式匹配时, 有些字段也可不展开, 如: 12345switch (garment) &#123; case Shirt(Button b1, Color c2): ... case Trousers(float f1, Button b2, double d3): ... .... &#125; 目前, 对于Data Class设计成可变(Mutable)的还是不可变(Immutable)的, 还存在争议. 若Data Class设计成不可变类型, 有助于并发/并行开发; 可变的Data Class适合频繁更新的业务场景. 由于现阶段Data Class还没有设计成不可变类型, 所以在多线程环境下, 须注意线程安全问题.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambitious Java Evolving系列之Project Amber篇(五)]]></title>
    <url>%2Fambitious-java%2Famber-pattern-matching%2F</url>
    <content type="text"><![CDATA[为何写这个系列的笔记? 模式匹配在函数式语言中很常见, 比如Scala, Haskell, OCaml, Erlang等 (有关模式匹配相关概念, 本节将不多作介绍). 目前Java语言中类型系统并不完美. 比如在面临快速业务迭代时, 由于Java语言本身的一些冗余特性, Java类型检测有时会增加复杂性, 如将原本O(1)的复杂性活活的变成了O(n). 比如下面这段代码 12345678910111213141516Object object = new SomeObject();// 类型检测, 判定 `object` 变量类型if (object instanceof SomeObject) &#123; // Do Something Here, Then System.out.println(((SomeObject) object).callSomeMethod()); // 注意上面 `println()` 方法中的主逻辑, 主要有两步: // 1. 强制类型转换 // 2. 对象实例解构, 调用某个方法并获取某个值&#125;class SomeObject &#123; // Define Some Fields Here public double callSomeMethod() &#123; // Place Your Logic Here &#125;&#125; 上面这段代码还算简单, 但也体现出了Java语言本身的冗余特性. 比如上面这段代码, 主逻辑主要有三步: 首先进行类型检测, 判定变量类型是否为目标类型 然后对引用变量进行强制类型转换 最后对实例进行解构, 调用某个方法抽取某个值 作为Java程序员, 或许你早已习以为常, 但是如果你的业务代码长这样 1234567891011121314151617181920public void specificProcessingLogic(Object object) &#123; if (object instanceof ObjectA) &#123; // Do Something Here, Then System.out.println(((ObjectA) object).callMethodA()); &#125; else if (object instanceof ObjectB) &#123; // Do Something Here, Then System.out.println(((ObjectB) object).callMethodB()); &#125; else if (object instanceof ObjectC) &#123; // Do Something Here, Then System.out.println(((ObjectC) object).callMethodC()); &#125; else if (object instanceof ObjectN) &#123; // 类似的逻辑还很长 ...... &#125;&#125;class ObjectA &#123; /* Place Your Logic Here */ &#125;class ObjectB &#123; /* Place Your Logic Here */ &#125;class ObjectC &#123; /* Place Your Logic Here */ &#125;// ...... 类似的逻辑还很长class ObjectN &#123; /* Place Your Logic Here */ &#125; 还没什么感觉? 好, 现在回到问题的本质, 不过是一个类型匹配的问题, 由于反复的强制类型转换、实例解构, 原本底层的复杂性不过O(1), 而上面这段Java代码, 却活生生的变成了O(n). Java很强大, 但有些语言特性也让人抓狂. Project Amber中强化了Java语言对模式匹配特性支持. 换句话说, 上面这段代码, 使用模式匹配可以变成这样 1234567891011121314public void specificProcessingLogic(Object object) &#123; if (object matches ObjectA a) &#123; // Do Something Here System.out.println(a.callMethodA()); &#125; else if (object matches ObjectB b) &#123; // Do Something Here, Then System.out.println(b.callMethodB()); &#125; else if (object matches ObjectC c) &#123; // Do Something Here, Then System.out.println(c.callMethodC()); &#125; else if (object matches ObjectN n) &#123; // 类似的逻辑还有, 略 ...... &#125;&#125; 代码中的matches为新引入的关键字, matches前连匹配对象(如代码中的object), 后接目标类型对象(如代码中ObjectA a). 上面这段代码完全移除了显式的强制类型转换问题, 优雅而高效. 当然, 对于Java而言, 模式匹配常见于switch语句中.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JVM And JVM Languages</tag>
      </tags>
  </entry>
</search>
